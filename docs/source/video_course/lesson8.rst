.. note::

    Hallo, willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Community auf Facebook! Tauchen Sie tiefer in Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten ein.

    **Warum beitreten?**

    - **Fachkundige Unterst√ºtzung**: L√∂sen Sie Probleme nach dem Kauf und technische Herausforderungen mit Hilfe unserer Community und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Tutorials aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und Sneak Peeks.
    - **Spezielle Rabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Verlosungen**: Nehmen Sie an Verlosungen und Feiertagsaktionen teil.

    üëâ Bereit, mit uns zu entdecken und zu kreieren? Klicken Sie auf [|link_sf_facebook|] und treten Sie noch heute bei!

Lektion 8: Zusammengesetzte Bedingungen und If-Anweisungen in MicroPython
===============================================================================

Dieses Tutorial behandelt die Verwendung eines Potentiometers zur Steuerung von drei LEDs (gr√ºn, gelb und rot) mit dem Raspberry Pi Pico W und identifiziert einen kritischen logischen Fehler in der vorherigen Implementierung:

* **√úberpr√ºfung der Hausaufgabenl√∂sung**: Fasst die vorherige Aufgabe zusammen, den logischen Fehler im Code zu finden, der die LEDs basierend auf den Potentiometerwerten steuerte.
* **Erkl√§rung des logischen Fehlers**: Erl√§utert den logischen Fehler im Code, bei dem sich die LED-Zust√§nde √ºberlappen konnten, was zu unbeabsichtigtem Verhalten f√ºhrte. Betont die Bedeutung sicherzustellen, dass logische Bedingungen sich gegenseitig ausschlie√üen, um solche Fehler zu vermeiden.
* **Beispiel aus der Praxis**: Veranschaulicht die potenziellen Gefahren logischer Fehler anhand eines hypothetischen Szenarios von UV-Sterilisationsr√§umen, bei dem eine falsche LED-Steuerung Schaden verursachen k√∂nnte.
* **Einf√ºhrung in zusammengesetzte Bedingungen**: F√ºhrt zusammengesetzte Bedingungen unter Verwendung logischer Operatoren (UND, ODER) ein, um pr√§zise Bedingungen f√ºr die Steuerung der LEDs zu schaffen. Zeigt, wie man sicherstellt, dass jede Bedingung korrekt implementiert wird, um √úberlappungen zu vermeiden.
* **Schaltungsaufbau und Code-Erkl√§rung**: Bietet ein detailliertes Schaltbild und die Einrichtung zum Anschlie√üen des Potentiometers und der LEDs an den Raspberry Pi Pico W. Diskutiert die korrekte Art, bedingte Anweisungen zu schreiben, um die LEDs basierend auf den Potentiometerwerten zu steuern.
* **Praktische Demonstration**: Zeigt den √ºberarbeiteten Code in Aktion und hebt das korrekte LED-Verhalten ohne √úberlappungen oder verpasste Bedingungen hervor. Betont die Bedeutung sorgf√§ltiger logischer Planung in Coding-Projekten.
* **N√§chste Schritte**: Vorschau auf die n√§chste Lektion zur Simulation analoger Ausgaben, die das Toolkit f√ºr die Arbeit mit dem Raspberry Pi Pico W weiter erweitern wird.

**Video**

.. raw:: html

    <iframe width="700" height="500" src="https://www.youtube.com/embed/uTwm3ydI69w?si=2OJPTawMlFfqO_DN" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
