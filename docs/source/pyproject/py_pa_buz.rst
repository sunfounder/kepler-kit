.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino & ESP32 Enthusiasts sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux d√©monstrations exclusives.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et concours** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_pa_buz:

3.2 Tonalit√© Personnalis√©e
==========================================


Nous avons utilis√© un buzzer actif dans le projet pr√©c√©dent, cette fois nous allons utiliser un buzzer passif.

Comme le buzzer actif, le buzzer passif utilise √©galement le ph√©nom√®ne d'induction √©lectromagn√©tique pour fonctionner. La diff√©rence est qu'un buzzer passif n'a pas de source d'oscillation, il ne produira donc pas de bip si des signaux continus (DC) sont utilis√©s.
Cependant, cela permet au buzzer passif de r√©gler sa propre fr√©quence d'oscillation et de produire diff√©rentes notes telles que "do, r√©, mi, fa, sol, la, si".

Faisons √©mettre une m√©lodie au buzzer passif !

* :ref:`cpn_buzzer`

**Composants Requis**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_transistor`
        - 1 (S8050)
        - |link_transistor_buy|
    *   - 6
        - :ref:`cpn_resistor`
        - 1 (1KŒ©)
        - |link_resistor_buy|
    *   - 7
        - Buzzer passif :ref:`cpn_buzzer`
        - 1
        - |link_passive_buzzer_buy|

**Sch√©ma**

|sch_buzzer|

Lorsque la sortie GP15 est √©lev√©e, apr√®s la r√©sistance de limitation de courant de 1K (pour prot√©ger le transistor), le S8050 (transistor NPN) va conduire, ce qui permettra au buzzer de sonner.

Le r√¥le du S8050 (transistor NPN) est d'amplifier le courant et de rendre le son du buzzer plus fort. En effet, vous pouvez √©galement connecter directement le buzzer √† GP15, mais vous constaterez que le son du buzzer est plus faible.

**C√¢blage**

|img_buzzer|

Deux buzzers sont inclus dans le kit, nous utilisons un buzzer passif (celui avec un PCB expos√© √† l'arri√®re).

Le buzzer n√©cessite un transistor pour fonctionner, ici nous utilisons le S8050.

|wiring_buzzer|

.. 1. Connectez 3V3 et GND du Pico W au bus d'alimentation de la breadboard.
.. #. Connectez la broche positive du buzzer au bus d'alimentation positif.
.. #. Connectez la broche cathodique du buzzer au **collecteur** du transistor.
.. #. Connectez la **base** du transistor √† la broche GP15 via une r√©sistance de 1kŒ©.
.. #. Connectez l'**√©metteur** du transistor au bus d'alimentation n√©gatif.

**Code**

.. note::

    * Ouvrez le fichier ``3.2_custom_tone.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    buzzer = machine.PWM(machine.Pin(15))

    def tone(pin,frequency,duration):
        pin.freq(frequency)
        pin.duty_u16(30000)
        utime.sleep_ms(duration)
        pin.duty_u16(0)

    tone(buzzer,440,250)
    utime.sleep_ms(500)
    tone(buzzer,494,250)
    utime.sleep_ms(500)
    tone(buzzer,523,250)

**Comment √ßa marche ?**

Si le buzzer passif re√ßoit un signal num√©rique, il ne pourra que faire vibrer la membrane sans produire de son.

Nous utilisons donc la fonction ``tone()`` pour g√©n√©rer le signal PWM permettant au buzzer passif de sonner.

Cette fonction prend trois param√®tres :

* **pin**, la broche GPIO qui contr√¥le le buzzer.
* **frequency**, la tonalit√© du buzzer est d√©termin√©e par la fr√©quence ; plus la fr√©quence est √©lev√©e, plus la tonalit√© est aigu√´.
* **duration**, la dur√©e de la note.

Nous utilisons la fonction ``duty_u16()`` pour r√©gler le cycle de service √† 30000 (environ 50%). Cela peut √™tre d'autres valeurs, tant qu'il s'agit de g√©n√©rer un signal √©lectrique discontinu pour provoquer une oscillation.

**En savoir plus**

Nous pouvons simuler des tonalit√©s sp√©cifiques en fonction des fr√©quences fondamentales du piano, afin de jouer un morceau complet.

* `Piano key frequencies - Wikipedia <https://en.wikipedia.org/wiki/Piano_key_frequencies>`_



.. note::

    * Ouvrez le fichier ``3.2_custom_tone_2.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    NOTE_C4 = 262
    NOTE_G3 = 196
    NOTE_A3 = 220
    NOTE_B3 = 247

    melody =[NOTE_C4,NOTE_G3,NOTE_G3,NOTE_A3,NOTE_G3,NOTE_B3,NOTE_C4]

    buzzer = machine.PWM(machine.Pin(15))

    def tone(pin,frequency,duration):
        pin.freq(frequency)
        pin.duty_u16(30000)
        utime.sleep_ms(duration)
        pin.duty_u16(0)

    for note in melody:
        tone(buzzer,note,250)
        utime.sleep_ms(150)
