.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas posventa y desaf√≠os t√©cnicos con ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones Exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones durante festividades.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.

.. _py_pa_buz:

3.2 Tono Personalizado
==========================================

En el proyecto anterior usamos un zumbador activo; esta vez utilizaremos un zumbador pasivo.


Al igual que el zumbador activo, el zumbador pasivo tambi√©n funciona por inducci√≥n electromagn√©tica. 
La diferencia es que el zumbador pasivo no tiene una fuente de oscilaci√≥n interna, por lo que no emitir√° 
sonidos si se usan se√±ales de corriente continua. Sin embargo, esta caracter√≠stica permite que el zumbador 
pasivo ajuste su propia frecuencia de oscilaci√≥n y pueda emitir diferentes notas como "do, re, mi, fa, sol, la, si".

¬°Vamos a hacer que el zumbador pasivo emita una melod√≠a!

* :ref:`cpn_buzzer`

**Componentes Necesarios**

Para este proyecto, necesitamos los siguientes componentes.

Es muy conveniente adquirir un kit completo; aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPONENTE	
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_transistor`
        - 1(S8050)
        - |link_transistor_buy|
    *   - 6
        - :ref:`cpn_resistor`
        - 1(1KŒ©)
        - |link_resistor_buy|
    *   - 7
        - Zumbador Pasivo :ref:`cpn_buzzer`
        - 1
        - |link_passive_buzzer_buy|

**Esquema**

|sch_buzzer|

Cuando el pin GP15 emite un nivel alto, la corriente pasa a trav√©s de la resistencia limitadora de 1K (para proteger el transistor), el transistor S8050 (NPN) conduce, y el zumbador emite sonido.

El rol del transistor S8050 (NPN) es amplificar la corriente y hacer que el zumbador suene m√°s fuerte. De hecho, tambi√©n se podr√≠a conectar el zumbador directamente a GP15, pero notar√°s que el sonido es m√°s bajo.

**Conexiones**

|img_buzzer|

En el kit se incluyen dos zumbadores; aqu√≠ usaremos el zumbador pasivo (el que tiene una PCB expuesta en la parte posterior).

El zumbador necesita un transistor para funcionar; aqu√≠ usamos el S8050.

|wiring_buzzer|

.. 1. Conecta 3V3 y GND de la Pico W a la barra de energ√≠a de la protoboard.
.. #. Conecta el pin positivo del zumbador a la barra positiva de la protoboard.
.. #. Conecta el pin negativo del zumbador al pin **colector** del transistor.
.. #. Conecta el pin **base** del transistor al pin GP15 a trav√©s de una resistencia de 1kŒ©.
.. #. Conecta el pin **emisor** del transistor a la barra negativa de energ√≠a.

**C√≥digo**

.. note::

    * Abre el archivo ``3.2_custom_tone.py`` en la ruta de ``kepler-kit-main/micropython`` o copia este c√≥digo en Thonny, luego haz clic en "Run Current Script" o simplemente presiona F5 para ejecutarlo.

    * No olvides seleccionar el int√©rprete "MicroPython (Raspberry Pi Pico)" en la esquina inferior derecha.

    * Para tutoriales detallados, consulta :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    buzzer = machine.PWM(machine.Pin(15))

    def tone(pin,frequency,duration):
        pin.freq(frequency)
        pin.duty_u16(30000)
        utime.sleep_ms(duration)
        pin.duty_u16(0)

    tone(buzzer,440,250)
    utime.sleep_ms(500)
    tone(buzzer,494,250)
    utime.sleep_ms(500)
    tone(buzzer,523,250)


**¬øC√≥mo funciona?**

Si el zumbador pasivo recibe una se√±al digital, solo mover√° el diafragma sin producir sonido.

Por lo tanto, usamos la funci√≥n ``tone()`` para generar la se√±al PWM y hacer que el zumbador pasivo suene.

Esta funci√≥n tiene tres par√°metros:

* **pin**, el pin GPIO que controla el zumbador.
* **frequency**, la frecuencia que determina el tono del zumbador; cuanto mayor es la frecuencia, m√°s alto es el tono.
* **duration**, la duraci√≥n de la nota.

Usamos la funci√≥n ``duty_u16()`` para establecer el ciclo de trabajo en 30000 (aproximadamente 50%). Este valor puede ser diferente; solo necesita generar una se√±al el√©ctrica discontinua para provocar la oscilaci√≥n.


**Aprende M√°s**

Podemos simular tonos espec√≠ficos seg√∫n la frecuencia fundamental del piano, para as√≠ reproducir una melod√≠a completa.

* `Piano key frequencies - Wikipedia <https://en.wikipedia.org/wiki/Piano_key_frequencies>`_



.. note::

    * Abre el archivo ``3.2_custom_tone_2.py`` en la ruta de ``kepler-kit-main/micropython`` o copia este c√≥digo en Thonny, luego haz clic en "Run Current Script" o simplemente presiona F5 para ejecutarlo.

    * No olvides seleccionar el int√©rprete "MicroPython (Raspberry Pi Pico)" en la esquina inferior derecha.

    * Para tutoriales detallados, consulta :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    NOTE_C4 = 262
    NOTE_G3 = 196
    NOTE_A3 = 220
    NOTE_B3 = 247

    melody =[NOTE_C4,NOTE_G3,NOTE_G3,NOTE_A3,NOTE_G3,NOTE_B3,NOTE_C4]

    buzzer = machine.PWM(machine.Pin(15))

    def tone(pin,frequency,duration):
        pin.freq(frequency)
        pin.duty_u16(30000)
        utime.sleep_ms(duration)
        pin.duty_u16(0)

    for note in melody:
        tone(buzzer,note,250)
        utime.sleep_ms(150)
