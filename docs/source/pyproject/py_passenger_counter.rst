.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans le Raspberry Pi, l'Arduino et l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux d√©monstrations exclusives.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et concours** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_passage_counter:


7.4 Compteur de Passagers
==============================

Dans les grands centres commerciaux, a√©roports, gares, mus√©es et autres lieux publics comme les salles d'exposition, le flux de passagers est une donn√©e indispensable.

Par exemple, dans les a√©roports et les gares, le nombre de personnes doit √™tre strictement contr√¥l√© pour garantir la s√©curit√© et fluidifier les d√©placements. 
Il est √©galement possible de savoir quand il y a plus de visiteurs dans les centres commerciaux et les magasins, combien de commandes chaque utilisateur peut g√©n√©rer, etc. 
Ainsi, nous pouvons analyser les habitudes de consommation des gens et augmenter le chiffre d'affaires.

Les compteurs de passagers aident √† comprendre le fonctionnement de ces lieux publics et √† organiser leurs op√©rations de mani√®re efficace.

Un simple compteur de passagers peut √™tre cr√©√© √† l'aide d'un capteur PIR et d'un affichage 7 segments √† 4 chiffres.


**Composants Requis**

Dans ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 4 (220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_4_dit_7_segment`
        - 1
        - 
    *   - 7
        - :ref:`cpn_74hc595`
        - 1
        - |link_74hc595_buy|
    *   - 8
        - :ref:`cpn_pir`
        - 1
        - |link_pir_buy|

**Sch√©ma**

|sch_passager_counter| 

* Ce circuit est bas√© sur le :ref:`py_74hc_4dig` avec l'ajout d'un module PIR.
* Le PIR envoie un signal haut d'environ 2,8 secondes lorsqu'une personne passe devant lui.
* Le module PIR poss√®de deux potentiom√®tres : l'un ajuste la sensibilit√©, l'autre ajuste la distance de d√©tection. Pour un meilleur fonctionnement du module PIR, il faut tourner les deux potentiom√®tres √† fond dans le sens antihoraire.

    |img_PIR_TTE|


**C√¢blage**

|wiring_passager_counter|

**Code**

.. note::

    * Ouvrez le fichier ``7.4_passenger_counter.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite.

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import time

    # Initialiser le capteur PIR sur la broche 16, configur√© en entr√©e
    pir_sensor = machine.Pin(16, machine.Pin.IN)

    # Codes d'affichage 7 segments pour les chiffres 0-9, en utilisant l'hexad√©cimal pour repr√©senter les segments LED
    SEGCODE = [0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f]

    # D√©finir les broches pour la communication avec le registre de d√©calage (74HC595)
    sdi = machine.Pin(18, machine.Pin.OUT)   # Entr√©e de donn√©es s√©rie
    rclk = machine.Pin(19, machine.Pin.OUT)  # Horloge de registre (Latch)
    srclk = machine.Pin(20, machine.Pin.OUT) # Horloge du registre de d√©calage

    # Initialiser la liste pour stocker les broches de contr√¥le des 4 chiffres
    placePin = []

    # D√©finir les broches de contr√¥le pour chaque chiffre (anodes communes)
    pin = [10,13,12,11] # Num√©ros de broche pour l'affichage 4 chiffres
    for i in range(4):
        placePin.append(None)  # R√©server de la place dans la liste
        placePin[i] = machine.Pin(pin[i], machine.Pin.OUT)  # Initialiser la broche en sortie

    # Initialiser le compteur pour suivre les √©v√©nements de mouvement d√©tect√©s
    count = 0

    # Fonction pour s√©lectionner quel chiffre (0-3) afficher en contr√¥lant les broches d'anodes communes
    def pickDigit(digit):
        for i in range(4):
            placePin[i].value(1)  # √âteindre tous les chiffres
        placePin[digit].value(0)  # Allumer le chiffre s√©lectionn√©

    # Fonction pour effacer l'affichage en envoyant '0x00' au registre de d√©calage
    def clearDisplay():
        hc595_shift(0x00)

    # Fonction pour envoyer des donn√©es au registre de d√©calage (74HC595)
    def hc595_shift(dat):
        rclk.low()  # Tirer la latch en bas pour pr√©parer le d√©calage des donn√©es
        time.sleep_us(200)  # Petite pause pour la stabilit√© du timing
        for bit in range(7, -1, -1):  # Boucler √† travers chaque bit (MSB en premier)
            srclk.low()  # Pr√©parer pour envoyer le bit suivant
            time.sleep_us(200)
            value = 1 & (dat >> bit)  # Extraire le bit courant des donn√©es
            sdi.value(value)  # R√©gler la ligne de donn√©es sur la valeur du bit courant
            time.sleep_us(200)
            srclk.high()  # Pulser l'horloge de d√©calage pour stocker le bit dans le registre
            time.sleep_us(200)
        time.sleep_us(200)
        rclk.high()  # Pulser l'horloge de registre pour d√©placer les donn√©es vers la sortie

    # Gestionnaire d'interruption pour le capteur PIR, d√©clench√© √† la d√©tection de mouvement (front montant)
    # Incr√©mente le compteur de mouvements chaque fois que le capteur est d√©clench√©
    def motion_detected(pin):
        global count
        count = count + 1  # Incr√©menter le compteur √† la d√©tection de mouvement

    # Configurer une interruption pour d√©tecter les mouvements √† l'aide du capteur PIR
    pir_sensor.irq(trigger=machine.Pin.IRQ_RISING, handler=motion_detected)

    # Boucle principale pour mettre √† jour en continu l'affichage 7 segments avec le compteur courant
    while True:
        # Mettre √† jour le premier chiffre (unit√©s)
        pickDigit(0)
        hc595_shift(SEGCODE[count % 10])

        # Mettre √† jour le deuxi√®me chiffre (dizaines)
        pickDigit(1)
        hc595_shift(SEGCODE[count % 100 // 10])

        # Mettre √† jour le troisi√®me chiffre (centaines)
        pickDigit(2)
        hc595_shift(SEGCODE[count % 1000 // 100])

        # Mettre √† jour le quatri√®me chiffre (milliers)
        pickDigit(3)
        hc595_shift(SEGCODE[count % 10000 // 1000])


Lorsque le code est ex√©cut√©, le nombre sur l'affichage 7 segments √† 4 chiffres sera incr√©ment√© de un chaque fois qu'une personne passe devant le module PIR.
