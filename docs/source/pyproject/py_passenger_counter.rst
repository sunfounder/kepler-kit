.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete junto a otros entusiastas en el mundo de Raspberry Pi, Arduino y ESP32.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas posventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones Exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones en temporadas festivas.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.

.. _py_passage_counter:

7.4 Contador de Pasajeros
==================================

Para centros comerciales, cadenas de tiendas, aeropuertos, estaciones, museos y otros espacios p√∫blicos como salas de exposici√≥n, el flujo de personas es un dato indispensable.

Por ejemplo, en aeropuertos y estaciones, se necesita controlar estrictamente el n√∫mero de personas 
para garantizar la seguridad y el flujo fluido. Adem√°s, se puede analizar cu√°ndo hay m√°s visitantes 
en centros comerciales y tiendas, cu√°ntas compras genera cada usuario, entre otros. De este modo, se pueden estudiar los h√°bitos de consumo y aumentar las ventas.

Los contadores de pasajeros ayudan a comprender el funcionamiento de estos espacios p√∫blicos y a organizar sus operaciones de forma eficiente.

Crearemos un contador de pasajeros sencillo utilizando un sensor PIR y una pantalla de 7 segmentos de 4 d√≠gitos.

**Componentes Necesarios**

Para este proyecto, necesitamos los siguientes componentes.

Es muy conveniente adquirir un kit completo; aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPONENTE
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 4(220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_4_dit_7_segment`
        - 1
        - 
    *   - 7
        - :ref:`cpn_74hc595`
        - 1
        - |link_74hc595_buy|
    *   - 8
        - :ref:`cpn_pir`
        - 1
        - |link_pir_buy|

**Esquema**

|sch_passager_counter| 

* Este circuito se basa en el :ref:`py_74hc_4dig` con la adici√≥n de un m√≥dulo PIR.
* El PIR enviar√° una se√±al alta de aproximadamente 2.8 segundos cuando alguien pase frente a √©l.
* El m√≥dulo PIR tiene dos potenci√≥metros: uno ajusta la sensibilidad y el otro la distancia de detecci√≥n. Para mejorar el rendimiento del m√≥dulo PIR, ajusta ambos potenci√≥metros completamente en sentido antihorario.

    |img_PIR_TTE|

**Conexiones**

|wiring_passager_counter|

**C√≥digo**

.. note::

    * Abre el archivo ``7.4_passenger_counter.py`` en la ruta de ``kepler-kit-main/micropython`` o copia este c√≥digo en Thonny, luego haz clic en "Run Current Script" o simplemente presiona F5 para ejecutarlo.

    * No olvides seleccionar el int√©rprete "MicroPython (Raspberry Pi Pico)" en la esquina inferior derecha.

    * Para tutoriales detallados, consulta :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import time

    # Inicializa el sensor PIR en el pin 16, configurado como entrada
    pir_sensor = machine.Pin(16, machine.Pin.IN)

    # C√≥digos de 7 segmentos para los d√≠gitos 0-9, usando hexadecimal para representar los segmentos LED
    SEGCODE = [0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f]

    # Define los pines para la comunicaci√≥n con el registro de desplazamiento (74HC595)
    sdi = machine.Pin(18, machine.Pin.OUT)   # Entrada de datos en serie
    rclk = machine.Pin(19, machine.Pin.OUT)  # Reloj del registro (Latch)
    srclk = machine.Pin(20, machine.Pin.OUT) # Reloj del registro de desplazamiento

    # Inicializa la lista para almacenar los pines de control de 4 d√≠gitos
    placePin = []

    # Define los pines de control para cada uno de los cuatro d√≠gitos (√°nodos comunes)
    pin = [10,13,12,11] # N√∫meros de pines para la pantalla de 4 d√≠gitos
    for i in range(4):
        placePin.append(None)  # Reserva espacio en la lista
        placePin[i] = machine.Pin(pin[i], machine.Pin.OUT)  # Inicializa el pin como salida

    # Inicializa el contador para rastrear eventos de detecci√≥n de movimiento
    count = 0

    # Funci√≥n para seleccionar qu√© d√≠gito (0-3) mostrar controlando los pines de √°nodo com√∫n
    def pickDigit(digit):
        for i in range(4):
            placePin[i].value(1)  # Apaga todos los d√≠gitos
        placePin[digit].value(0)  # Enciende el d√≠gito seleccionado

    # Funci√≥n para limpiar la pantalla enviando '0x00' al registro de desplazamiento
    def clearDisplay():
        hc595_shift(0x00)

    # Funci√≥n para enviar datos al registro de desplazamiento (74HC595)
    def hc595_shift(dat):
        rclk.low()  # Baja el latch para preparar el desplazamiento de datos
        time.sleep_us(200)  # Peque√±a demora para estabilidad de sincronizaci√≥n
        for bit in range(7, -1, -1):  # Bucle a trav√©s de cada bit (MSB primero)
            srclk.low()  # Prepara el siguiente bit
            time.sleep_us(200)
            value = 1 & (dat >> bit)  # Extrae el bit actual de los datos
            sdi.value(value)  # Establece el valor de la l√≠nea de datos
            time.sleep_us(200)
            srclk.high()  # Pulso en el reloj de desplazamiento para almacenar el bit
            time.sleep_us(200)
        time.sleep_us(200)
        rclk.high()  # Pulso en el reloj del registro para mover los datos a la salida

    # Manejador de interrupci√≥n para el sensor PIR, activado en detecci√≥n de movimiento (flanco ascendente)
    # Incrementa el contador de movimiento cada vez que se detecta el sensor
    def motion_detected(pin):
        global count
        count = count + 1  # Incrementa el conteo al detectar movimiento

    # Configura una interrupci√≥n para detectar movimiento usando el sensor PIR
    pir_sensor.irq(trigger=machine.Pin.IRQ_RISING, handler=motion_detected)

    # Bucle principal para actualizar continuamente la pantalla de 7 segmentos con el conteo actual
    while True:
        # Actualiza el primer d√≠gito (unidades)
        pickDigit(0)
        hc595_shift(SEGCODE[count % 10])

        # Actualiza el segundo d√≠gito (decenas)
        pickDigit(1)
        hc595_shift(SEGCODE[count % 100 // 10])

        # Actualiza el tercer d√≠gito (centenas)
        pickDigit(2)
        hc595_shift(SEGCODE[count % 1000 // 100])

        # Actualiza el cuarto d√≠gito (millares)
        pickDigit(3)
        hc595_shift(SEGCODE[count % 10000 // 1000])

Cuando se ejecuta el c√≥digo, el n√∫mero en la pantalla de 4 d√≠gitos de 7 segmentos aumentar√° en uno cada vez que alguien pase frente al m√≥dulo PIR.
