.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete junto a otros entusiastas en temas avanzados sobre Raspberry Pi, Arduino y ESP32.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas posventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones Exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones en d√≠as festivos.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.

.. _py_light_theremin:

7.1 Theremin de Luz
=========================

El theremin es un instrumento musical electr√≥nico que no requiere contacto f√≠sico. Seg√∫n la posici√≥n de la mano del jugador, produce diferentes tonos.

La secci√≥n de control suele estar compuesta por dos antenas met√°licas que detectan la posici√≥n de las manos del thereminista, controlando un oscilador con una mano y el volumen con la otra. Las se√±ales el√©ctricas del theremin se amplifican y se env√≠an a un altavoz.

No podemos reproducir el mismo instrumento con el Pico W, pero podemos usar una fotorresistencia y un zumbador pasivo para lograr un efecto de juego similar.

* `Theremin - Wikipedia <https://en.wikipedia.org/wiki/Theremin>`_

**Componentes Necesarios**

En este proyecto, necesitaremos los siguientes componentes.

Es muy conveniente adquirir un kit completo; aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPONENTE	
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|
    *   - 6
        - :ref:`cpn_transistor`
        - 1(S8050)
        - |link_transistor_buy|
    *   - 7
        - :ref:`cpn_resistor`
        - 3(1KŒ©, 220Œ©, 10KŒ©)
        - |link_resistor_buy|
    *   - 8
        - Zumbador Pasivo :ref:`cpn_buzzer`
        - 1
        - 
    *   - 9
        - :ref:`cpn_photoresistor`
        - 1
        - |link_photoresistor_buy|

**Esquema**

|sch_light_theremin|

Antes de comenzar el proyecto, mueve tu mano arriba y abajo sobre la fotorresistencia para calibrar el rango de intensidad de luz. El LED conectado en GP16 indica el tiempo de calibraci√≥n: se encender√° al inicio y se apagar√° al finalizar.

Cuando GP15 emite un nivel alto, el S8050 (transistor NPN) conduce y el zumbador pasivo comienza a sonar.

Cuando la luz es m√°s intensa, el valor de GP28 es menor; y viceversa, cuando la luz es m√°s tenue, el valor es mayor.
Mediante programaci√≥n, el valor de la fotorresistencia afecta la frecuencia del zumbador pasivo, creando un dispositivo fotosensible.


**Conexiones**

|wiring_light_theremin|


**C√≥digo**

.. note::

    * Abre el archivo ``7.1_light_theremin.py`` en la ruta de ``kepler-kit-main/micropython`` o copia este c√≥digo en Thonny, luego haz clic en "Run Current Script" o simplemente presiona F5 para ejecutarlo.

    * No olvides seleccionar el int√©rprete "MicroPython (Raspberry Pi Pico)" en la esquina inferior derecha.

    * Para tutoriales detallados, consulta :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    # Inicializar LED, fotorresistencia y zumbador
    led = machine.Pin(16, machine.Pin.OUT)  # LED en pin 16
    photoresistor = machine.ADC(28)  # Fotorresistencia en pin ADC 28
    buzzer = machine.PWM(machine.Pin(15))  # Zumbador en pin 15 con PWM

    # Variables para almacenar las lecturas de luz m√°s altas y m√°s bajas para calibraci√≥n
    light_low = 65535 
    light_high = 0 

    # Funci√≥n para mapear un rango de valores a otro
    def interval_mapping(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    # Funci√≥n para reproducir un tono en el zumbador a una frecuencia y duraci√≥n espec√≠ficas
    def tone(pin, frequency, duration):
        pin.freq(frequency)  # Establecer frecuencia del zumbador
        pin.duty_u16(30000)  # Fijar ciclo de trabajo al 50%
        utime.sleep_ms(duration)  # Reproducir el tono durante la duraci√≥n especificada
        pin.duty_u16(0)  # Apagar el tono estableciendo el ciclo de trabajo a 0

    # Calibrar la fotorresistencia encontrando los valores de luz m√°s altos y m√°s bajos durante 5 segundos
    timer_init_start = utime.ticks_ms()  # Obtener el tiempo actual (inicio)
    led.value(1)  # Encender el LED para indicar que la calibraci√≥n est√° en progreso
    while utime.ticks_diff(utime.ticks_ms(), timer_init_start) < 5000:  # Ejecutar calibraci√≥n por 5 segundos
        light_value = photoresistor.read_u16()  # Leer el valor de luz de la fotorresistencia
        if light_value > light_high:  # Registrar el valor m√°ximo de luz
            light_high = light_value
        if light_value < light_low:  # Registrar el valor m√≠nimo de luz
            light_low = light_value
    led.value(0)  # Apagar el LED despu√©s de la calibraci√≥n

    # Bucle principal para leer los niveles de luz y reproducir los tonos correspondientes
    while True:
        light_value = photoresistor.read_u16()  # Leer el valor actual de luz de la fotorresistencia
        pitch = int(interval_mapping(light_value, light_low, light_high, 50, 6000))  # Mapear el valor de luz a un rango de tonos
        if pitch > 50:  # Reproducir tonos solo si el tono est√° por encima de un umbral m√≠nimo
            tone(buzzer, pitch, 20)  # Reproducir el tono correspondiente por 20ms
        utime.sleep_ms(10)  # Peque√±a pausa entre lecturas

Tan pronto como el programa se ejecute, el LED se encender√°, y tendremos cinco segundos para calibrar el rango de detecci√≥n de la fotorresistencia.

Esto se debe a que los entornos de luz pueden variar (por ejemplo, la intensidad de luz al mediod√≠a y al anochecer), as√≠ como la altura de la mano sobre la fotorresistencia. Necesitas establecer la altura m√°xima y m√≠nima de tu mano desde la fotorresistencia, que tambi√©n es la altura a la que ‚Äútocas‚Äù el instrumento.

Despu√©s de cinco segundos, el LED se apagar√°, y podremos mover la mano sobre la fotorresistencia y tocar.
