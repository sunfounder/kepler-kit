.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez vos probl√®mes apr√®s-vente et vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_light_theremin:

7.1 Theremin lumineux
=========================

Le Theremin est un instrument de musique √©lectronique qui ne n√©cessite aucun contact physique. En fonction de la position de la main du joueur, il produit diff√©rents sons.

Sa partie de contr√¥le est g√©n√©ralement compos√©e de deux antennes m√©talliques qui d√©tectent la position des mains du thereministe : l'une contr√¥le les oscillateurs et l'autre le volume. Les signaux √©lectriques √©mis par le theremin sont amplifi√©s et envoy√©s √† un haut-parleur.

Nous ne pouvons pas reproduire exactement le m√™me instrument avec la Pico W, mais nous pouvons utiliser une photo-r√©sistance et un buzzer passif pour obtenir un effet similaire.

* `Theremin - Wikipedia <https://en.wikipedia.org/wiki/Theremin>`_

**Composants requis**

Pour ce projet, nous aurons besoin des composants suivants. 

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|
    *   - 6
        - :ref:`cpn_transistor`
        - 1(S8050)
        - |link_transistor_buy|
    *   - 7
        - :ref:`cpn_resistor`
        - 3(1KŒ©, 220Œ©, 10KŒ©)
        - |link_resistor_buy|
    *   - 8
        - Buzzer passif :ref:`cpn_buzzer`
        - 1
        - 
    *   - 9
        - :ref:`cpn_photoresistor`
        - 1
        - |link_photoresistor_buy|

**Sch√©ma**

|sch_light_theremin|

Avant de commencer le projet, passez votre main de haut en bas au-dessus de la photo-r√©sistance pour calibrer la plage d'intensit√© lumineuse. La LED connect√©e au GP16 est utilis√©e pour indiquer la p√©riode de calibration : la LED s'allume pour signaler le d√©but de la calibration et s'√©teint pour indiquer la fin.

Lorsque GP15 √©met un niveau haut, le transistor S8050 (NPN) conduit et le buzzer passif commence √† √©mettre un son.

Plus la lumi√®re est forte, plus la valeur de GP28 est faible ; √† l'inverse, elle est plus √©lev√©e lorsque la lumi√®re est plus faible.
En programmant la valeur de la photo-r√©sistance pour affecter la fr√©quence du buzzer passif, on peut simuler un dispositif photosensible.


**C√¢blage**

|wiring_light_theremin|


**Code**

.. note::

    * Ouvrez le fichier ``7.1_light_theremin.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    # Initialiser la LED, la photo-r√©sistance et le buzzer
    led = machine.Pin(16, machine.Pin.OUT)  # LED sur la broche 16
    photoresistor = machine.ADC(28)  # Photo-r√©sistance sur la broche ADC 28
    buzzer = machine.PWM(machine.Pin(15))  # Buzzer sur la broche 15 avec PWM

    # Variables pour stocker les valeurs maximales et minimales de la lumi√®re pour la calibration
    light_low = 65535 
    light_high = 0 

    # Fonction pour mapper une plage de valeurs √† une autre
    def interval_mapping(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    # Fonction pour jouer une tonalit√© sur le buzzer √† une fr√©quence sp√©cifi√©e pendant une dur√©e d√©finie
    def tone(pin, frequency, duration):
        pin.freq(frequency)  # D√©finir la fr√©quence du buzzer
        pin.duty_u16(30000)  # R√©gler le cycle de service √† environ 50%
        utime.sleep_ms(duration)  # Jouer la tonalit√© pendant la dur√©e sp√©cifi√©e
        pin.duty_u16(0)  # √âteindre la tonalit√© en r√©glant le cycle de service √† 0

    # Calibrer la photo-r√©sistance en trouvant les valeurs maximales et minimales de la lumi√®re sur 5 secondes
    timer_init_start = utime.ticks_ms()  # Obtenir l'heure actuelle (heure de d√©but)
    led.value(1)  # Allumer la LED pour indiquer que la calibration est en cours
    while utime.ticks_diff(utime.ticks_ms(), timer_init_start) < 5000:  # Effectuer la calibration pendant 5 secondes
        light_value = photoresistor.read_u16()  # Lire la valeur de la lumi√®re de la photo-r√©sistance
        if light_value > light_high:  # Suivre la valeur maximale de la lumi√®re
            light_high = light_value
        if light_value < light_low:  # Suivre la valeur minimale de la lumi√®re
            light_low = light_value
    led.value(0)  # √âteindre la LED apr√®s la calibration

    # Boucle principale pour lire les niveaux de lumi√®re et jouer les tonalit√©s correspondantes
    while True:
        light_value = photoresistor.read_u16()  # Lire la valeur actuelle de la lumi√®re de la photo-r√©sistance
        pitch = int(interval_mapping(light_value, light_low, light_high, 50, 6000))  # Mapper la valeur de la lumi√®re √† une plage de tonalit√©s
        if pitch > 50:  # Jouer les tonalit√©s uniquement si la fr√©quence est au-dessus d'un seuil minimal
            tone(buzzer, pitch, 20)  # Jouer la tonalit√© correspondante pendant 20ms
        utime.sleep_ms(10)  # Petit d√©lai entre les lectures


D√®s que le programme se lance, la LED s'allume et vous aurez cinq secondes pour calibrer la plage de d√©tection de la photo-r√©sistance.

Cela est n√©cessaire en raison des diff√©rentes conditions d'√©clairage auxquelles nous pouvons √™tre confront√©s (par exemple, intensit√©s lumineuses diff√©rentes √† midi et au cr√©puscule), ainsi que de la hauteur de votre main au-dessus de la photo-r√©sistance. Vous devez d√©finir la hauteur maximale et minimale de votre main par rapport √† la photo-r√©sistance, qui d√©terminera √©galement la mani√®re dont vous jouerez de l'instrument.

Apr√®s cinq secondes, la LED s'√©teindra, et vous pourrez alors agiter votre main au-dessus de la photo-r√©sistance et commencer √† jouer.
