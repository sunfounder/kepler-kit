.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _py_light_theremin:

7.1 Licht-Theremin
=========================

Ein Theremin ist ein elektronisches Musikinstrument, das keinen physischen Kontakt erfordert. Je nach Position der Hand des Spielers erzeugt es unterschiedliche T√∂ne.

√úblicherweise besteht der Steuerungsbereich aus zwei Metallantennen, die die Position der H√§nde des Thereministen erfassen und Oszillatoren mit einer Hand und die Lautst√§rke mit der anderen steuern. Die elektrischen Signale vom Theremin werden verst√§rkt und an einen Lautsprecher gesendet.

Zwar k√∂nnen wir das gleiche Instrument mit Pico W nicht nachbilden, jedoch k√∂nnen wir mit einem Fotowiderstand und einem passiven Summer ein √§hnliches Spielgef√ºhl erzeugen.

* `Theremin - Wikipedia <https://de.wikipedia.org/wiki/Theremin>`_

**Ben√∂tigte Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - Kepler Kit
        - 450+
        - |link_kepler_kit|

Sie k√∂nnen die Teile auch einzeln √ºber die unten stehenden Links erwerben.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - KOMPONENTE
        - MENGE
        - LINK

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Micro-USB-Kabel
        - 1
        -
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Mehrere
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|
    *   - 6
        - :ref:`cpn_transistor`
        - 1(S8050)
        - |link_transistor_buy|
    *   - 7
        - :ref:`cpn_resistor`
        - 3(1KŒ©, 220Œ©, 10KŒ©)
        - |link_resistor_buy|
    *   - 8
        - Aktiver :ref:`cpn_buzzer`
        - 1
        -
    *   - 9
        - :ref:`cpn_photoresistor`
        - 1
        - |link_photoresistor_buy|

**Schaltplan**

|sch_light_theremin|

Bevor Sie mit dem Projekt beginnen, bewegen Sie Ihre Hand auf und ab √ºber den Fotowiderstand, um den Lichtintensit√§tsbereich zu kalibrieren. Die mit GP16 verbundene LED dient zur Anzeige der Debugging-Zeit; sie leuchtet beim Debugging-Start und erlischt beim Debugging-Ende.

Wenn GP15 ein hohes Signal ausgibt, leitet der S8050 (NPN-Transistor) und der passive Summer ert√∂nt.

Je st√§rker das Licht, desto kleiner ist der Wert an GP28; umgekehrt ist er gr√∂√üer, wenn das Licht schw√§cher ist. Durch Programmierung des Fotowiderstandswerts zur Beeinflussung der Frequenz des passiven Summers kann ein lichtempfindliches Ger√§t simuliert werden.

**Verdrahtung**

|wiring_light_theremin|

**Code**

.. note::

    * √ñffnen Sie die Datei ``7.1_light_theremin.py`` im Pfad ``kepler-kit-main/micropython`` oder kopieren Sie diesen Code in Thonny und klicken Sie auf "Aktuelles Skript ausf√ºhren" oder dr√ºcken Sie einfach F5.

    * Vergessen Sie nicht, den "MicroPython (Raspberry Pi Pico)"-Interpreter in der unteren rechten Ecke auszuw√§hlen.

    * F√ºr detaillierte Anleitungen siehe :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    led = machine.Pin(16, machine.Pin.OUT)
    photoresistor = machine.ADC(28) 
    buzzer = machine.PWM(machine.Pin(15))

    light_low=65535
    light_high=0

    def interval_mapping(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    def tone(pin,frequency,duration):
        pin.freq(frequency)
        pin.duty_u16(30000)
        utime.sleep_ms(duration)
        pin.duty_u16(0)

    # calibrate the photoresistor max & min values.
    timer_init_start = utime.ticks_ms()
    led.value(1)    
    while utime.ticks_diff(utime.ticks_ms(), timer_init_start)<5000:
        light_value = photoresistor.read_u16()
        if light_value > light_high:
            light_high = light_value
        if light_value < light_low:
            light_low = light_value   
    led.value(0)    

    # play
    while True:
        light_value  = photoresistor.read_u16()
        pitch = int(interval_mapping(light_value,light_low,light_high,50,6000))
        if pitch > 50 :
            tone(buzzer,pitch,20)
        utime.sleep_ms(10)

Sobald das Programm startet, leuchtet die LED auf, und wir haben f√ºnf Sekunden Zeit, um den Erfassungsbereich des Fotowiderstands zu kalibrieren.

Dies ist auf die verschiedenen Lichtverh√§ltnisse zur√ºckzuf√ºhren, unter denen das Ger√§t eingesetzt werden k√∂nnte (z. B. unterschiedliche Lichtintensit√§ten zu Mittag und in der D√§mmerung) sowie auf die H√∂he unserer H√§nde √ºber dem Fotowiderstand. Sie m√ºssen die maximale und minimale H√∂he Ihrer Hand √ºber dem Fotowiderstand festlegen, die zugleich die H√∂he ist, in der Sie das Instrument spielen.

Nach Ablauf der f√ºnf Sekunden erlischt die LED, und wir k√∂nnen unsere H√§nde √ºber dem Fotowiderstand bewegen und spielen.

