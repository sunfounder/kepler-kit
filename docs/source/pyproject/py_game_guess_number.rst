.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez vos probl√®mes apr√®s-vente et vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_guess_number:

7.7 Devine le Nombre
==============================


"Devine le Nombre" est un jeu amusant o√π vous et vos amis devez deviner un nombre (0-99). √Ä chaque tentative, la plage des possibilit√©s se r√©duit jusqu'√† ce qu'un joueur trouve la bonne r√©ponse. Celui qui d√©couvre le nombre myst√®re est consid√©r√© comme perdant et re√ßoit une petite punition.

Par exemple, si le nombre myst√®re est 51 (invisible pour les joueurs) et que le joueur 1 entre 50, la plage devient 50 - 99 ; si le joueur 2 entre 70, la plage passe √† 50 - 70 ; si le joueur 3 entre 51, il perd la partie. Dans ce jeu, les num√©ros sont entr√©s via un clavier, et les r√©sultats sont affich√©s sur un √©cran LCD.

|guess_number|

**Composants requis**

Pour ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.


.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 4 (10KŒ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_keypad`
        - 1
        - |link_keypad_buy|
    *   - 7
        - :ref:`cpn_i2c_lcd`
        - 1
        - |link_i2clcd1602_buy|


**Sch√©ma**


|sch_guess_number|

Ce circuit est bas√© sur :ref:`py_keypad` avec l'ajout d'un √©cran LCD1602 I2C pour afficher les touches press√©es.


**C√¢blage**

|wiring_game_guess_number| 

Pour faciliter le c√¢blage, dans le sch√©ma ci-dessus, la rang√©e de colonnes du clavier matriciel et les r√©sistances de 10KŒ© sont ins√©r√©es simultan√©ment dans les trous o√π G10 ~ G13 sont situ√©s.


**Code**

.. note::

    * Ouvrez le fichier ``7.7_game_guess_number.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    from lcd1602 import LCD
    from machine import I2C, Pin
    import time
    import urandom

    # Initialiser la communication I2C pour l'√©cran LCD1602
    i2c = I2C(1, sda=Pin(6), scl=Pin(7), freq=400000)

    # Cr√©er un objet LCD pour contr√¥ler l'√©cran LCD1602
    lcd = LCD(i2c)

    # Mappage des caract√®res du clavier pour un clavier matriciel 4x4
    characters = [["1", "2", "3", "A"], 
                ["4", "5", "6", "B"], 
                ["7", "8", "9", "C"], 
                ["*", "0", "#", "D"]]

    # D√©finir les broches pour les rang√©es du clavier
    pin = [21, 20, 19, 18]
    row = []
    for i in range(4):
        row.append(None)
        row[i] = machine.Pin(pin[i], machine.Pin.OUT)  # Configurer les broches de rang√©e en sortie

    # D√©finir les broches pour les colonnes du clavier
    pin = [13, 12, 11, 10]
    col = []
    for i in range(4):
        col.append(None)
        col[i] = machine.Pin(pin[i], machine.Pin.IN)  # Configurer les broches de colonne en entr√©e

    # Fonction pour lire une touche du clavier
    def readKey():
        key = []
        for i in range(4):
            row[i].high()  # Activer la broche de rang√©e
            for j in range(4):
                if col[j].value() == 1:  # V√©rifier si une colonne est press√©e
                    key.append(characters[i][j])  # Enregistrer la touche correspondante
            row[i].low()  # D√©sactiver la broche de rang√©e
        if key == []:
            return None  # Retourner None si aucune touche n'est press√©e
        else:
            return key  # Retourner la touche press√©e

    # Initialiser et r√©initialiser les variables du jeu (pointValue al√©atoire, limites sup√©rieure/inf√©rieure)
    def init_new_value():
        global pointValue, upper, count, lower
        pointValue = int(urandom.uniform(0, 99))  # G√©n√©rer un nombre al√©atoire entre 0 et 99
        print(pointValue)  # Afficher le nombre cible (pour le d√©bogage)
        upper = 99  # Limite sup√©rieure initiale
        lower = 0  # Limite inf√©rieure initiale
        count = 0  # R√©initialiser le compteur de tentatives du joueur
        return False  # Indiquer que le jeu n'est pas termin√©

    # Fonction pour afficher les informations du jeu sur l'√©cran LCD
    # Si le joueur a trouv√© le bon nombre, afficher "GAME OVER"
    # Sinon, montrer la tentative actuelle et la plage des possibilit√©s
    def lcd_show(result):
        lcd.clear()  # Effacer l'√©cran LCD
        if result == True:  # Si le joueur a devin√© correctement
            string = "GAME OVER!\n"
            string += "Point is " + str(pointValue)  # Afficher le nombre correct
        else:
            string = "Enter number: " + str(count) + "\n"  # Afficher la tentative actuelle
            string += str(lower) + " < Point < " + str(upper)  # Afficher la plage de valeurs possibles
        lcd.message(string)  # Envoyer la cha√Æne de caract√®res √† l'√©cran LCD
        return

    # Traiter la tentative du joueur et mettre √† jour la limite sup√©rieure ou inf√©rieure
    # Si la tentative correspond √† pointValue, retourner True pour indiquer que le jeu est termin√©
    # Sinon, mettre √† jour les limites et retourner False
    def number_processing():
        global upper, count, lower
        if count > pointValue:
            if count < upper:
                upper = count  # Mettre √† jour la limite sup√©rieure si la tentative est trop √©lev√©e
        elif count < pointValue:
            if count > lower:
                lower = count  # Mettre √† jour la limite inf√©rieure si la tentative est trop basse
        elif count == pointValue:
            return True  # Retourner True si la tentative correspond √† pointValue
        count = 0  # R√©initialiser le compteur de tentatives pour la prochaine tentative
        return False

    ## Configuration et boucle principale du jeu
    # Afficher un message de bienvenue et inviter l'utilisateur √† appuyer sur 'A' pour commencer
    string = "Press A to Start!"
    lcd.message(string)
    result = init_new_value()  # Initialiser les variables du jeu

    # Boucle principale pour g√©rer l'entr√©e du clavier et mettre √† jour l'affichage
    last_key = None
    while True:
        current_key = readKey()  # Lire la touche actuellement press√©e
        if current_key == last_key:
            continue  # Ignorer le traitement si la m√™me touche est encore press√©e
        last_key = current_key  # Mettre √† jour la derni√®re touche press√©e
        
        if current_key != None:
            # Si 'A' est press√©, recommencer le jeu avec un nouveau nombre cible
            if current_key == ["A"]:
                result = init_new_value()
            # Si 'D' est press√©, v√©rifier si la tentative actuelle est correcte
            elif current_key == ["D"]:
                result = number_processing()
            # Si un nombre est press√© et que le compteur a moins de 10 chiffres
            elif current_key[0] in list("1234567890") and count < 10:
                count = count * 10 + int(current_key[0])  # Ajouter le chiffre √† la tentative actuelle
            lcd_show(result)  # Mettre √† jour l'√©cran LCD avec l'√©tat actuel du jeu
        time.sleep(0.1)  # Petit d√©lai pour le rebond des touches


* Apr√®s avoir ex√©cut√© le code, appuyez sur ``A`` pour commencer le jeu. Un nombre al√©atoire ``point`` est g√©n√©r√© mais n'est pas affich√© sur l'√©cran LCD, et vous devez le deviner.
* Le nombre que vous saisissez appara√Æt √† la fin de la premi√®re ligne jusqu'√† ce que la v√©rification finale soit effectu√©e. (Appuyez sur ``D`` pour d√©marrer la comparaison.)
* La plage de valeurs possibles de ``point`` est affich√©e sur la deuxi√®me ligne, et vous devez saisir un nombre dans cette plage.
* √Ä chaque tentative, la plage se r√©duit ; si vous trouvez le nombre chanceux (ou malchanceux), le message ``GAME OVER!`` s'affichera.

.. note:: 
    Si le code et le c√¢blage sont corrects mais que l'√©cran LCD n'affiche toujours rien, vous pouvez ajuster le potentiom√®tre √† l'arri√®re pour augmenter le contraste.

