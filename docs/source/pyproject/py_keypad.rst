.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez vos probl√®mes apr√®s-vente et vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_keypad:

4.2 Clavier 4x4
========================

Le clavier 4x4, √©galement connu sous le nom de clavier matriciel, est une matrice de 16 touches regroup√©es sur un seul panneau.

Le clavier se retrouve sur des dispositifs n√©cessitant principalement une entr√©e num√©rique, comme les calculatrices, les t√©l√©commandes, les t√©l√©phones √† boutons-poussoirs, les distributeurs automatiques, les guichets automatiques, les serrures √† combinaison et les serrures num√©riques.

Dans ce projet, nous apprendrons √† d√©terminer quelle touche est press√©e et √† obtenir la valeur correspondante.

* :ref:`cpn_keypad`
* `E.161 - Wikipedia <https://en.wikipedia.org/wiki/E.161>`_

**Composants requis**

Pour ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.


.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 4 (10KŒ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_keypad`
        - 1
        - |link_keypad_buy|

**Sch√©ma**

|sch_keypad|

4 r√©sistances de tirage sont connect√©es √† chacune des colonnes du clavier matriciel, afin que G6 ~ G9 obtiennent un niveau bas stable lorsque les touches ne sont pas press√©es.

Les rang√©es du clavier (G2 ~ G5) sont programm√©es pour √™tre √† un niveau haut ; si l'une des broches G6 ~ G9 est lue √† un niveau haut, cela signifie qu'une touche a √©t√© press√©e.

Par exemple, si G6 est lue √† un niveau haut, alors la touche num√©rique 1 est press√©e ; c'est parce que les broches de contr√¥le de la touche 1 sont G2 et G6. Lorsque la touche 1 est press√©e, G2 et G6 sont connect√©es, et G6 est donc √©galement √† un niveau haut.


**C√¢blage**

|wiring_keypad|

Pour faciliter le c√¢blage, dans le sch√©ma ci-dessus, la rang√©e de colonnes du clavier matriciel et les r√©sistances de 10KŒ© sont ins√©r√©es dans les trous o√π se trouvent G6 ~ G9.

**Code**

.. note::

    * Ouvrez le fichier ``4.2_4x4_keypad.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.


.. code-block:: python

    import machine
    import time

    characters = [["1","2","3","A"],["4","5","6","B"],["7","8","9","C"],["*","0","#","D"]]

    pin = [2,3,4,5]
    row = []
    for i in range(4):
        row.append(None)
        row[i] = machine.Pin(pin[i], machine.Pin.OUT)

    pin = [6,7,8,9]
    col = []
    for i in range(4):
        col.append(None)
        col[i] = machine.Pin(pin[i], machine.Pin.IN)

    def readKey():
        key = []
        for i in range(4):
            row[i].high()
            for j in range(4):
                if(col[j].value() == 1):
                    key.append(characters[i][j])
            row[i].low()
        if key == [] :
            return None
        else:
            return key

    last_key = None
    while True:
        current_key = readKey()
        if current_key == last_key:
            continue
        last_key = current_key
        if current_key != None:
            print(current_key)
        time.sleep(0.1)

Apr√®s l'ex√©cution du programme, le terminal affichera les touches que vous avez press√©es sur le clavier.

**Comment √ßa fonctionne**

.. code-block:: python

    import machine
    import time

    characters = [["1","2","3","A"],["4","5","6","B"],["7","8","9","C"],["*","0","#","D"]]

    pin = [2,3,4,5]
    row = []
    for i in range(4):
        row.append(None)
        row[i] = machine.Pin(pin[i], machine.Pin.OUT)

    pin = [6,7,8,9]
    col = []
    for i in range(4):
        col.append(None)
        col[i] = machine.Pin(pin[i], machine.Pin.IN)

D√©clarez chaque touche du clavier matriciel dans le tableau ``characters[]`` et d√©finissez les broches de chaque rang√©e et colonne.

.. code-block:: python

    last_key = None
    while True:
        current_key = readKey()
        if current_key == last_key:
            continue
        last_key = current_key
        if current_key != None:
            print(current_key)
        time.sleep(0.1)

Ceci est la partie principale de la fonction qui lit et affiche la valeur de la touche press√©e.

La fonction ``readKey()`` lit l'√©tat de chaque touche.

Les instructions ``if current_key != None`` et ``if current_key == last_key`` 
sont utilis√©es pour d√©terminer si une touche est press√©e et son √©tat. 
(Si vous appuyez sur '3' apr√®s avoir appuy√© sur '1', la condition est v√©rifi√©e.)

La valeur de la touche press√©e est affich√©e lorsque la condition est v√©rifi√©e.

L'instruction ``last_key = current_key`` assigne l'√©tat de chaque √©valuation 
√† un tableau ``last_key`` pour faciliter la prochaine √©valuation conditionnelle.

.. code-block:: python

    def readKey():
        key = []
        for i in range(4):
            row[i].high()
            for j in range(4):
                if(col[j].value() == 1):
                    key.append(characters[i][j])
            row[i].low()
        if key == [] :
            return None
        else:
            return key

Cette fonction attribue un niveau haut √† chaque rang√©e √† tour de r√¥le, et lorsque la touche est press√©e, 
la colonne o√π se trouve la touche re√ßoit un niveau haut. 
Apr√®s le double bouclage, la valeur de la touche dont l'√©tat est √† 1 est stock√©e dans le tableau ``key``.

Si vous appuyez sur la touche '3' :

|img_keypad_pressed|


``row[0]`` est mis √† un niveau haut, et ``col[2]`` re√ßoit un niveau haut.



``col[0]``, ``col[1]``, ``col[3]`` restent √† un niveau bas.

Il y a quatre √©tats : 0, 0, 1, 0 ; et nous enregistrons \'3\' dans ``pressed_keys``.

Lorsque ``row[1]``, ``row[2]``, ``row[3]`` passent √† un niveau haut,
``col[0]`` √† ``col[4]`` restent √† un niveau bas.

La boucle s'arr√™te, et la fonction retourne key = \'3\'.

Si vous appuyez sur les touches \'1\' et \'3\', il retournera key = [\'1\',\'3\'].
