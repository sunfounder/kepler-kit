.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete junto a otros entusiastas en temas m√°s avanzados sobre Raspberry Pi, Arduino y ESP32.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas posventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones Exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones en d√≠as festivos.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.

.. _py_led_bar:

2.2 Visualizaci√≥n del Nivel
================================

En el primer proyecto simplemente hicimos parpadear un LED. Para este proyecto, usaremos una Barra de LED, que contiene 10 LEDs en una carcasa pl√°stica, com√∫nmente utilizada para mostrar niveles de potencia o de volumen.

|img_led_bar_pin|

* :ref:`cpn_led_bar`

**Componentes Necesarios**

Para este proyecto, necesitaremos los siguientes componentes.

Es m√°s conveniente adquirir un kit completo, aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPONENTE	
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 10(220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led_bar`
        - 1
        - 

**Esquema**


|sch_ledbar|

La Barra de LED cuenta con 10 LEDs, cada uno de los cuales puede controlarse individualmente. El √°nodo de cada LED est√° conectado a GP6*GP15, mientras que el c√°todo se conecta a una resistencia de 220 ohmios y luego a tierra (GND).

**Conexiones**

|wiring_ledbar|

**C√≥digo**

.. note::

    * Abre el archivo ``2.2_display_the_level.py`` en la ruta ``kepler-kit-main/micropython`` o copia este c√≥digo en Thonny, luego haz clic en "Run Current Script" o simplemente presiona F5 para ejecutarlo.

    * No olvides seleccionar el int√©rprete "MicroPython (Raspberry Pi Pico)" en la esquina inferior derecha.

    * Para tutoriales detallados, consulta :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    pin = [6,7,8,9,10,11,12,13,14,15]
    led= []
    for i in range(10):
        led.append(None)
        led[i] = machine.Pin(pin[i], machine.Pin.OUT)

    while True:
        for i in range(10):
            led[i].toggle()
            utime.sleep(0.2)

En la Barra de LED, ver√°s que los LEDs se encienden y apagan secuencialmente mientras el programa est√° en ejecuci√≥n.

**¬øC√≥mo funciona?**

La Barra de LED consta de diez LEDs controlados por diez pines, por lo que debemos definir estos pines. El proceso ser√≠a muy tedioso si los defini√©ramos uno por uno. Aqu√≠ utilizamos ``listas``.

.. note::
    Las listas de Python son uno de los tipos de datos m√°s vers√°tiles, que nos permiten trabajar con m√∫ltiples elementos a la vez. Se crean colocando elementos dentro de corchetes [], separados por comas.

.. code-block:: python

    pin = [6,7,8,9,10,11,12,13,14,15]    

La l√≠nea anterior define una lista llamada ``pin`` que contiene los diez 
elementos ``6,7,8,9,10,11,12,13,14,15``. Podemos usar el operador de 
√≠ndice [] para acceder a un elemento de una lista. En Python, los √≠ndices 
comienzan en 0. As√≠, una lista de 10 elementos tendr√° √≠ndices de 0 a 9. 
En este caso, ``pin[0]`` es ``6`` y ``pin[4]`` es ``10``.

Luego, declaramos una lista vac√≠a ``led`` que usaremos para definir diez objetos LED.

.. code-block:: python

    led = []    

Debido a que la lista inicialmente tiene una longitud de 0, no se pueden realizar operaciones directas en ella, como imprimir ``led[0]``. Es necesario agregar nuevos elementos.

.. code-block:: python

    led.append(None)

El m√©todo ``append()`` agrega el primer elemento a la lista ``led``, que ahora tiene una longitud de 1. ``led[0]`` se convierte en un elemento v√°lido, aunque actualmente su valor es ``None`` (lo que significa nulo).

A continuaci√≥n, definimos ``led[0]``, el LED conectado al pin 6, como el primer objeto LED.

.. code-block:: python

    led[0] = machine.Pin(6, machine.Pin.OUT)

Ahora se ha definido el primer objeto LED.

Como puedes ver, hemos creado la lista de diez n√∫meros de pines llamada **pin**, que podemos utilizar para simplificar las operaciones masivas.

.. code-block:: python

    led[0] = machine.Pin(pin[0], machine.Pin.OUT)

Usamos una instrucci√≥n ``for`` para que todos los 10 pines ejecuten la declaraci√≥n anterior.

.. code-block:: python

    import machine

    pin = [6,7,8,9,10,11,12,13,14,15]
    led= []
    for i in range(10):
        led.append(None)
        led[i] = machine.Pin(pin[i], machine.Pin.OUT)

* :ref:`syntax_list`
* :ref:`syntax_forloop`

Usa otro bucle ``for`` para hacer que los diez LEDs de la Barra de LED cambien de estado uno por uno.

.. code-block:: python

    for i in range(10):
        led[i].toggle()
        utime.sleep(0.2)

El c√≥digo se completa colocando el fragmento anterior en un bucle ``while``.

.. code-block:: python

    import machine
    import utime

    pin = [6,7,8,9,10,11,12,13,14,15]
    led= []
    for i in range(10):
        led.append(None)
        led[i] = machine.Pin(pin[i], machine.Pin.OUT)

    while True:
        for i in range(10):
            led[i].toggle()
            utime.sleep(0.2)


