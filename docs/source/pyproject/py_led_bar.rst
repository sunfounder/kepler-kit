.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez vos probl√®mes apr√®s-vente et vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_led_bar:

2.2 Afficher le Niveau
=============================

Le premier projet consiste simplement √† faire clignoter une LED. Pour ce projet, utilisons la barre de LED, qui contient 10 LED dans un bo√Ætier en plastique, g√©n√©ralement utilis√©e pour afficher les niveaux de puissance ou de volume.

|img_led_bar_pin|

* :ref:`cpn_led_bar`

**Composants requis**

Pour ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 10(220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led_bar`
        - 1
        - 

**Sch√©ma**

|sch_ledbar|

Dans la barre de LED, il y a 10 LED, chacune pouvant √™tre contr√¥l√©e individuellement. L'anode de chaque LED est connect√©e aux broches GP6 √† GP15, et la cathode est reli√©e √† une r√©sistance de 220Œ©, puis √† la terre (GND).

**C√¢blage**

|wiring_ledbar|

**Code**

.. note::

    * Ouvrez le fichier ``2.2_display_the_level.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    pin = [6,7,8,9,10,11,12,13,14,15]
    led= []
    for i in range(10):
        led.append(None)
        led[i] = machine.Pin(pin[i], machine.Pin.OUT)

    while True:
        for i in range(10):
            led[i].toggle()
            utime.sleep(0.2)

Sur la barre de LED, vous verrez les LED s'allumer et s'√©teindre successivement lorsque le programme est en cours d'ex√©cution.

**Comment √ßa fonctionne ?**

La barre de LED se compose de dix LED contr√¥l√©es par dix broches, ce qui signifie que nous devons d√©finir ces broches. Le processus serait trop fastidieux si nous les d√©finissions une par une. Nous utilisons donc des ``listes``.

.. note::
    Les listes Python sont l'un des types de donn√©es les plus polyvalents, permettant de travailler avec plusieurs √©l√©ments en m√™me temps. Elles sont cr√©√©es en pla√ßant les √©l√©ments entre crochets [], s√©par√©s par des virgules.

.. code-block:: python

    pin = [6,7,8,9,10,11,12,13,14,15]    

Une liste ``pin`` est d√©finie par cette ligne de code, contenant les dix √©l√©ments ``6,7,8,9,10,11,12,13,14,15``.
Nous pouvons utiliser l'op√©rateur d'indexation [] pour acc√©der √† un √©l√©ment dans une liste. En Python, les indices commencent √† 0. Ainsi, une liste de 10 √©l√©ments aura des indices de 0 √† 9.
Avec cette liste, ``pin[0]`` est ``6`` et ``pin[4]`` est ``10``.

Ensuite, d√©clarez une liste vide ``led`` qui sera utilis√©e pour d√©finir dix objets LED.

.. code-block:: python

    led = []    

En raison de la longueur initiale de la liste qui est 0, les op√©rations directes comme imprimer ``led[0]`` ne fonctionneraient pas. Il y a de nouveaux √©l√©ments que nous devons ajouter.

.. code-block:: python

    led.append(None)

Avec cette m√©thode ``append()``, la liste ``led`` obtient son premier √©l√©ment, de longueur 1, et ``led[0]`` devient un √©l√©ment valide malgr√© sa valeur actuelle de ``None`` (qui signifie null).

Notre prochaine √©tape est de d√©finir ``led[0]``, la LED connect√©e √† la broche 6, comme le premier objet LED.

.. code-block:: python

    led[0] = machine.Pin(6, machine.Pin.OUT)

Le premier objet LED est maintenant d√©fini.

Comme vous pouvez le voir, nous avons cr√©√© les dix num√©ros de broches sous forme de liste **pin**, que nous pouvons substituer dans cette ligne pour faciliter les op√©rations en masse.

.. code-block:: python

    led[0] = machine.Pin(pin[0], machine.Pin.OUT)

Utilisez une instruction ``for`` pour faire en sorte que toutes les 10 broches ex√©cutent l'instruction ci-dessus.

.. code-block:: python

    import machine

    pin = [6,7,8,9,10,11,12,13,14,15]
    led= []
    for i in range(10):
        led.append(None)
        led[i] = machine.Pin(pin[i], machine.Pin.OUT)

* :ref:`syntax_list`
* :ref:`syntax_forloop`

Utilisez une autre boucle ``for`` pour faire changer d'√©tat les dix LED de la barre de LED une par une.

.. code-block:: python

    for i in range(10):
        led[i].toggle()
        utime.sleep(0.2)

Le code est termin√© en pla√ßant le morceau de code ci-dessus dans une boucle while.

.. code-block:: python

    import machine
    import utime

    pin = [6,7,8,9,10,11,12,13,14,15]
    led= []
    for i in range(10):
        led.append(None)
        led[i] = machine.Pin(pin[i], machine.Pin.OUT)

    while True:
        for i in range(10):
            led[i].toggle()
            utime.sleep(0.2)


