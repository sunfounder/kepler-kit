.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s SunFounder Raspberry Pi, Arduino & ESP32 sur Facebook ! Explorez plus en profondeur le Raspberry Pi, l'Arduino et l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_reversing_aid:

7.10 Assistance au Recul
============================

Ce projet utilise une LED, un buzzer et un module ultrasonique pour cr√©er un syst√®me d'assistance au recul.
Nous pouvons l'installer sur une voiture t√©l√©command√©e pour simuler le processus r√©el de recul d'une voiture dans un garage.


**Composants Requis**

Dans ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_transistor`
        - 1 (S8050)
        - |link_transistor_buy|
    *   - 6
        - :ref:`cpn_resistor`
        - 2 (1KŒ©, 220Œ©)
        - |link_resistor_buy|
    *   - 7
        - Buzzer Actif :ref:`cpn_buzzer`
        - 1
        -
    *   - 8
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|
    *   - 9
        - :ref:`cpn_ultrasonic`
        - 1
        - |link_ultrasonic_buy|

**Sch√©ma**

|sch_reversing_aid|

**C√¢blage**

|wiring_reversing_aid| 

**Code**

.. note::

    * Ouvrez le fichier ``7.10_reversing_aid.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite.

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.


.. code-block:: python

    import machine
    import time

    # Initialiser les broches pour le buzzer et la LED
    buzzer = machine.Pin(15, machine.Pin.OUT)  # Buzzer sur la broche 15
    led = machine.Pin(14, machine.Pin.OUT)  # LED sur la broche 14

    # Initialiser les broches pour le capteur ultrasonique (HC-SR04)
    TRIG = machine.Pin(17, machine.Pin.OUT)  # Broche Trigger pour le capteur ultrasonique
    ECHO = machine.Pin(16, machine.Pin.IN)  # Broche Echo pour le capteur ultrasonique

    dis = 100  # Variable globale pour stocker la distance

    # Fonction pour mesurer la distance avec le capteur ultrasonique
    def distance():
        TRIG.low()
        time.sleep_us(2)
        TRIG.high()
        time.sleep_us(10)
        TRIG.low()

        timeout_start = time.ticks_us()  # Utiliser les microsecondes pour plus de pr√©cision
        
        # Attendre que la broche ECHO passe √† haut (d√©but de l'impulsion echo)
        while not ECHO.value():
            if time.ticks_diff(time.ticks_us(), timeout_start) > 30000:  # Timeout 30ms
                return -1  # Timeout, retourner -1 si aucune impulsion n'est d√©tect√©e
        
        time1 = time.ticks_us()  # Temps de d√©part pour le calcul de la largeur de l'impulsion
        
        # Attendre que la broche ECHO passe √† bas (fin de l'impulsion echo)
        while ECHO.value():
            if time.ticks_diff(time.ticks_us(), time1) > 30000:  # Timeout 30ms
                return -1  # Timeout, retourner -1 si l'impulsion est trop longue
        
        time2 = time.ticks_us()  # Temps de fin pour le calcul de la largeur de l'impulsion
        
        # Calculer la distance en fonction de la dur√©e de l'impulsion echo
        during = time.ticks_diff(time2, time1)
        distance_cm = during * 340 / 2 / 10000  # Convertir le temps en distance en cm
        return distance_cm

    # Fonction pour faire bipper le buzzer et allumer la LED
    def beep():
        buzzer.value(1)  # Allumer le buzzer
        led.value(1)  # Allumer la LED
        time.sleep(0.1)  # Dur√©e du bip
        buzzer.value(0)  # √âteindre le buzzer
        led.value(0)  # √âteindre la LED
        time.sleep(0.1)  # Petite pause entre les bips

    # Initialiser les variables pour contr√¥ler les intervalles de bips
    intervals = 2000  # Long intervalle initial par d√©faut
    previousMillis = time.ticks_ms()  # Stocker le temps pr√©c√©dent pour suivre les intervalles de bips

    # Boucle principale pour g√©rer les intervalles de bips bas√©s sur la distance
    while True:
        dis = distance()  # Mesurer la distance directement dans la boucle principale

        # Ajuster les intervalles de bips en fonction de la distance
        if dis > 0:  # S'assurer que la distance mesur√©e est valide
            if dis <= 10:
                intervals = 300  # Distance proche, bips plus rapides
            elif dis <= 20:
                intervals = 500  # Distance moyenne-proche, bips mod√©r√©s
            elif dis <= 50:
                intervals = 1000  # Distance moyenne, bips plus lents
            else:
                intervals = 2000  # Grande distance, bips tr√®s lents

            # Afficher la distance mesur√©e
            print(f'Distance : {dis:.2f} cm')
            
            # V√©rifier s'il est temps de bipper √† nouveau en fonction de l'intervalle
            currentMillis = time.ticks_ms()  # Obtenir l'heure actuelle
            if time.ticks_diff(currentMillis, previousMillis) >= intervals:
                beep()  # Faire bipper le buzzer et clignoter la LED
                previousMillis = currentMillis  # Mettre √† jour le temps du dernier bip
            
        time.sleep_ms(100)  # Petit d√©lai pour √©viter les lectures trop fr√©quentes


* D√®s que le programme d√©marre, le capteur ultrasonique lira en continu la distance jusqu'√† l'obstacle devant vous, et vous pourrez voir la valeur exacte de la distance sur le shell.
* La LED et le buzzer changeront la fr√©quence de clignotement et de bip en fonction de la distance mesur√©e, indiquant ainsi la proximit√© de l'obstacle.
* L'article :ref:`py_ultrasonic` mentionne que lorsque le capteur ultrasonique fonctionne, le programme sera en pause.
* Pour √©viter de perturber le timing de la LED ou du buzzer, nous avons cr√©√© un thread s√©par√© pour la mesure de distance dans cet exemple.
