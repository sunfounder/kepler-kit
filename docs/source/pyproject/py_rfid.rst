.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s SunFounder Raspberry Pi, Arduino & ESP32 sur Facebook ! Explorez en profondeur le Raspberry Pi, l'Arduino et l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_rfid:

6.5 Identification par Radiofr√©quence (RFID)
================================================

L'Identification par Radiofr√©quence (RFID) est une technologie qui utilise la communication sans fil entre un objet (ou une √©tiquette) et un dispositif de lecture (ou lecteur) pour le suivre et l'identifier. La port√©e de transmission de l'√©tiquette est limit√©e √† plusieurs m√®tres. Les lecteurs et les √©tiquettes ne n√©cessitent pas n√©cessairement une ligne de vue directe.

La plupart des √©tiquettes contiennent un circuit int√©gr√© (IC) et une antenne. 
En plus de stocker des informations, la puce g√®re la communication avec le lecteur via la radiofr√©quence (RF). 
Dans le cas des √©tiquettes passives, il n'y a pas de source d'√©nergie ind√©pendante ; elles d√©pendent d'un signal √©lectromagn√©tique externe √©mis par le lecteur pour √™tre aliment√©es. 
Une √©tiquette active est aliment√©e par une source d'√©nergie ind√©pendante, comme une batterie. En cons√©quence, elles peuvent offrir des capacit√©s accrues en termes de traitement, de transmission et de port√©e.


* :ref:`cpn_mfrc522`

**Composants Requis**

Dans ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_mfrc522`
        - 1
        - |link_rfid_buy|

**Sch√©ma**

|sch_rfid|

**C√¢blage**

|wiring_rfid|

**Code**

Ici, vous devez utiliser les biblioth√®ques dans le dossier ``mfrc522``, veuillez v√©rifier si elles ont √©t√© t√©l√©charg√©es sur Pico W, pour un tutoriel d√©taill√© r√©f√©rez-vous √† :ref:`add_libraries_py`.

La fonction principale est divis√©e en deux :

* ``6.5_rfid_write.py`` : utilis√© pour √©crire des informations sur la carte (ou cl√©).
* ``6.5_rfid_read.py`` : utilis√© pour lire les informations stock√©es dans la carte (ou cl√©).


Ouvrez le fichier ``6.5_rfid_write.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

Apr√®s l'ex√©cution, vous pourrez saisir un message dans le shell, puis approcher la carte (ou la cl√©) du module MFRC522 pour √©crire le message.

.. code-block:: python

    from mfrc522 import SimpleMFRC522

    reader = SimpleMFRC522(spi_id=0,sck=18,miso=16,mosi=19,cs=17,rst=9)

    def write():
        to_write = input("Please enter the message: ")
        print("Writing...Please place the card...")
        id, text = reader.write(to_write)
        print("ID: %s\nText: %s" % (id,text))

    write()

Ouvrez le fichier ``6.5_rfid_read.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

Apr√®s l'ex√©cution, vous pourrez lire le message stock√© sur la carte (ou cl√©).

.. code-block:: python

    from mfrc522 import SimpleMFRC522

    reader = SimpleMFRC522(spi_id=0,sck=18,miso=16,mosi=19,cs=17,rst=9)

    def read():
        print("Reading...Please place the card...")
        id, text = reader.read()
        print("ID: %s\nText: %s" % (id,text))

    read()

**Comment √ßa fonctionne ?**

.. code-block:: python

    from mfrc522 import SimpleMFRC522

    reader = SimpleMFRC522(spi_id=0,sck=18,miso=16,mosi=19,cs=17,rst=9)

Instanciez la classe ``SimpleMFRC522()``.

.. code-block:: python

    id, text = reader.read()

Cette fonction est utilis√©e pour lire les donn√©es de la carte. Si la lecture est r√©ussie, l'identifiant (ID) et le texte seront renvoy√©s.

.. code-block:: python

    id, text = reader.write("text")


Cette fonction est utilis√©e pour √©crire des informations sur la carte. Appuyez sur la touche **Entr√©e** pour terminer l'√©criture. 
``texte`` correspond aux informations √† √©crire sur la carte.
