.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s SunFounder Raspberry Pi, Arduino & ESP32 sur Facebook ! Explorez en profondeur le Raspberry Pi, l'Arduino et l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_music_player:

7.8 Lecteur de Musique RFID
==============================

√Ä travers notre projet pr√©c√©dent, :ref:`py_rfid`, nous avons appris que le module MFRC522 permet d'√©crire jusqu'√† 48 caract√®res d'information sur la carte (ou la cl√©), y compris la cl√© d'acc√®s et les informations d'identit√©, ainsi que la partition musicale.

Par exemple, si vous √©crivez ``EEFGGFEDCCDEEDD EEFGGFEDCCDEDCC``, le buzzer jouera la musique lorsque la carte (ou la cl√©) sera lue √† nouveau. Il peut √©galement √™tre √©quip√© d'un WS2812 pour afficher des effets lumineux spectaculaires.

Vous pouvez trouver plus de partitions musicales sur Internet, ou m√™me composer votre propre musique, les enregistrer sur la carte (ou la cl√©) et les partager avec vos amis !

|rfid_player|

**Composants Requis**

Dans ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_transistor`
        - 1 (S8050)
        - |link_transistor_buy|
    *   - 6
        - :ref:`cpn_resistor`
        - 1 (1KŒ©)
        - |link_resistor_buy|
    *   - 7
        - Buzzer Passif :ref:`cpn_buzzer`
        - 1
        - |link_passive_buzzer_buy|
    *   - 8
        - :ref:`cpn_mfrc522`
        - 1
        - |link_rfid_buy|
    *   - 9
        - :ref:`cpn_ws2812`
        - 1
        - |link_ws2812_buy|

**Sch√©ma**

|sch_music_player|

**C√¢blage**

|wiring_rfid_music_player| 

**Code**

#. Ouvrez le fichier ``6.5_rfid_write.py`` sous le chemin ``kepler-kit-main/micropython``, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

   .. note::

    Ici, vous devez utiliser les biblioth√®ques dans le dossier ``mfrc522``, veuillez v√©rifier si elles ont √©t√© t√©l√©charg√©es sur Pico, pour un tutoriel d√©taill√© r√©f√©rez-vous √† :ref:`add_libraries_py`.

#. Apr√®s l'ex√©cution, tapez ``EEFGGFEDCCDEEDD EEFGGFEDCCDEDCC`` dans le shell, puis rapprochez la carte (ou la cl√©) du module MFRC522 pour enregistrer la partition de "L'Hymne √† la Joie".

#. Ouvrez le fichier ``7.8_rfid_music_player.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

   .. code-block:: python

       ###################################
        # Utilisez 'write.py' pour √©crire #
        # une partition sur la carte, cet #
        # exemple jouera la partition     #
        ###################################
        # Partition de L'Hymne √† la Joie :#
        # EEFGGFEDCCDEEDD EEFGGFEDCCDEDCC  #
        ###################################

        from mfrc522 import SimpleMFRC522
        import machine
        import time
        from ws2812 import WS2812
        import urandom

        # Configuration des LED WS2812
        # Initialiser une bande WS2812 de 8 LEDs sur la broche 0
        ws = WS2812(machine.Pin(0), 8)

        # Configuration du lecteur RFID MFRC522
        # Initialiser le lecteur RFID en utilisant SPI sur des broches sp√©cifiques
        reader = SimpleMFRC522(spi_id=0, sck=18, miso=16, mosi=19, cs=17, rst=9)

        # Fr√©quences des notes pour le buzzer (en Hertz)
        NOTE_C4 = 262
        NOTE_D4 = 294
        NOTE_E4 = 330
        NOTE_F4 = 349
        NOTE_G4 = 392
        NOTE_A4 = 440
        NOTE_B4 = 494
        NOTE_C5 = 523

        # Initialiser le PWM pour le buzzer sur la broche 15
        buzzer = machine.PWM(machine.Pin(15))

        # Liste des fr√©quences de notes correspondant aux notes musicales
        note = [NOTE_C4, NOTE_D4, NOTE_E4, NOTE_F4, NOTE_G4, NOTE_A4, NOTE_B4, NOTE_C5]

        # Fonction pour jouer un ton sur le buzzer avec une fr√©quence et une dur√©e sp√©cifi√©es
        def tone(pin, frequency, duration):
            pin.freq(frequency)  # R√©gler la fr√©quence du buzzer
            pin.duty_u16(30000)  # R√©gler le cycle de service √† 50% (approx)
            time.sleep_ms(duration)  # Jouer le ton pour la dur√©e sp√©cifi√©e
            pin.duty_u16(0)  # Arr√™ter le ton en mettant le cycle de service √† 0

        # Fonction pour allumer une LED WS2812 √† un index sp√©cifique avec une couleur al√©atoire
        def lumi(index):
            for i in range(8):
                ws[i] = 0x000000  # √âteindre toutes les LEDs
            ws[index] = int(urandom.uniform(0, 0xFFFFFF))  # D√©finir une couleur al√©atoire pour la LED √† l'index donn√©
            ws.write()  # √âcrire les donn√©es de couleur aux LEDs WS2812

        # Encoder le texte des notes musicales en indices et jouer les notes correspondantes
        words = ["C", "D", "E", "F", "G", "A", "B", "N"]  # Correspondance des notes musicales aux caract√®res
        def take_text(text):
            string = text.replace(' ', '').upper()  # Supprimer les espaces et convertir le texte en majuscules
            while len(string) > 0:
                index = words.index(string[0])  # Trouver l'index de la premi√®re note dans la cha√Æne
                tone(buzzer, note[index], 250)  # Jouer la note correspondante sur le buzzer pendant 250 ms
                lumi(index)  # Allumer la LED correspondant √† la note
                string = string[1:]  # Passer au caract√®re suivant dans la cha√Æne

        # Fonction pour lire la carte RFID et jouer la partition stock√©e
        def read():
            print("Reading...Please place the card...")
            id, text = reader.read()  # Lire la carte RFID (ID et texte stock√©)
            print("ID: %s\nText: %s" % (id, text))  # Afficher l'ID et le texte
            take_text(text)  # Jouer la partition √† partir du texte stock√© sur la carte
            
        # Commencer la lecture de la carte RFID et jouer la partition correspondante
        read()

#. En rapprochant √† nouveau la carte (ou la cl√©) du module MFRC522, le buzzer jouera la musique stock√©e sur la carte (ou la cl√©), et la bande RGB s'allumera avec des couleurs al√©atoires.
