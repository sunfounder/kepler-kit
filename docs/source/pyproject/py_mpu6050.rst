.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour d√©velopper vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_mpu6050:

6.3 Suivi de Mouvement 6 Axes
=====================================

Le MPU-6050 est un dispositif de suivi de mouvement √† 6 axes (qui combine un gyroscope 3 axes et un acc√©l√©rom√®tre 3 axes).

Un acc√©l√©rom√®tre est un outil qui mesure l'acc√©l√©ration propre. Par exemple, un acc√©l√©rom√®tre au repos sur la surface de la Terre mesurera une acc√©l√©ration due √† la gravit√© terrestre, orient√©e vers le haut, avec une valeur approximative de g ‚âà 9,81 m/s¬≤.

Les acc√©l√©rom√®tres ont de nombreuses applications dans l'industrie et la science, par exemple : syst√®mes de navigation inertielle pour les avions et les missiles, maintien des images verticales sur les tablettes et appareils photo num√©riques, etc.

Les gyroscopes sont utilis√©s pour mesurer l'orientation et la vitesse angulaire d'un dispositif. Ils sont int√©gr√©s dans des syst√®mes tels que les syst√®mes anti-retournement et les airbags pour les automobiles, les syst√®mes de d√©tection de mouvement pour les appareils intelligents, les syst√®mes de stabilisation d'attitude pour les drones, et bien plus encore.

* :ref:`cpn_mpu6050`

**Composants requis**

Dans ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_mpu6050`
        - 1
        - 

**Sch√©ma**

|sch_mpu6050|

**C√¢blage**

|wiring_mpu6050|

**Code**

.. note::

    * Ouvrez le fichier ``6.3_6axis_motion_tracking.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.
    
    * Vous devez utiliser les biblioth√®ques ``imu.py`` et ``vector3d.py``, veuillez v√©rifier si elles ont √©t√© t√©l√©charg√©es sur Pico W. Pour un tutoriel d√©taill√©, consultez :ref:`add_libraries_py`.

.. code-block:: python

    from imu import MPU6050
    from machine import I2C, Pin
    import time

    i2c = I2C(1, sda=Pin(6), scl=Pin(7), freq=400000)
    mpu = MPU6050(i2c)

    while True:
        print("x: %s, y: %s, z: %s"%(mpu.accel.x, mpu.accel.y, mpu.accel.z))
        time.sleep(0.5)
        print("A: %s, B: %s, Y: %s"%(mpu.gyro.x, mpu.gyro.y, mpu.gyro.z))
        time.sleep(0.5)

Une fois le programme lanc√©, vous pourrez voir les valeurs de l'acc√©l√©rom√®tre 
3 axes et du gyroscope 3 axes d√©filer √† l'√©cran. √Ä ce moment-l√†, faites pivoter 
le MPU6050 de mani√®re al√©atoire, et vous verrez ces valeurs changer en cons√©quence. 
Pour faciliter la visualisation des changements, vous pouvez commenter l'une des 
lignes de print et vous concentrer sur l'autre ensemble de donn√©es.

L'unit√© de mesure de l'acc√©l√©ration est le m/s¬≤, et celle de la vitesse angulaire est le ¬∞/s.

**Comment √ßa marche ?**

Dans la biblioth√®que imu, nous avons int√©gr√© les fonctions pertinentes dans la classe ``MPU6050``.
Le MPU6050 est un module I2C et n√©cessite un ensemble de broches I2C pour √™tre initialis√©.

.. code-block:: python

    from imu import MPU6050
    from machine import I2C, Pin

    i2c = I2C(1, sda=Pin(6), scl=Pin(7), freq=400000)
    mpu = MPU6050(i2c)

Ensuite, vous pourrez obtenir les valeurs en temps r√©el de l'acc√©l√©ration et de la vitesse angulaire avec ``mpu.accel.x``, ``mpu.accel.y``, ``mpu.accel.z``, ``mpu.gyro.x``, ``mpu.gyro.y``, ``mpu.gyro.z``.

.. code-block:: python

    while True:
        print("x: %s, y: %s, z: %s"%(mpu.accel.x, mpu.accel.y, mpu.accel.z))
        time.sleep(0.5)
        print("A: %s, B: %s, Y: %s"%(mpu.gyro.x, mpu.gyro.y, mpu.gyro.z))
        time.sleep(0.5)