.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez vos probl√®mes apr√®s-vente et vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_fruit_piano:

7.9 Piano de fruits
============================


La conductivit√© √©lectrique se trouve dans de nombreux objets m√©talliques, ainsi que dans le corps humain et les fruits.
Cette propri√©t√© permet de cr√©er un projet amusant : un piano de fruits.
En d'autres termes, nous transformons des fruits en claviers qui peuvent jouer de la musique simplement en les touchant.

|fruit_piano|

**Composants requis**

Pour ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.


.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_transistor`
        - 1(S8050)
        - |link_transistor_buy|
    *   - 6
        - :ref:`cpn_resistor`
        - 4(1-1KŒ©, 1-330Œ©, 2-220Œ©)
        - |link_resistor_buy|
    *   - 7
        - Buzzer passif :ref:`cpn_buzzer`
        - 1
        - |link_passive_buzzer_buy|
    *   - 8
        - :ref:`cpn_rgb`
        - 1
        - |link_rgb_led_buy|
    *   - 9
        - :ref:`cpn_mpr121`
        - 1
        - 

**Sch√©ma**

|sch_fruit_piano| 

Pour transformer le fruit en touche de piano, vous devez connecter les √©lectrodes du MPR121 au fruit (par exemple, dans la queue de la banane).

Au d√©part, le MPR121 va s'initialiser et chaque √©lectrode obtiendra une valeur bas√©e sur la charge actuelle ; lorsqu'un conducteur (tel qu'un corps humain) touche une √©lectrode, la charge se modifie et se r√©√©quilibre.
Par cons√©quent, la valeur de l'√©lectrode diff√®re de sa valeur initiale, indiquant au microcontr√¥leur qu'elle a √©t√© touch√©e.
Pendant ce processus, assurez-vous que le c√¢blage de chaque √©lectrode est stable afin que sa charge soit √©quilibr√©e lors de l'initialisation.


**C√¢blage**


|wiring_fruit_piano| 


**Code**


.. note::

    * Ouvrez le fichier ``7.9_fruit_piano.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`. 
    
    * Vous devrez utiliser la biblioth√®que appel√©e ``mpr121.py``, v√©rifiez qu'elle a √©t√© t√©l√©charg√©e sur Pico W, pour un tutoriel d√©taill√©, reportez-vous √† :ref:`add_libraries_py`.


.. code-block:: python

    from mpr121 import MPR121
    from machine import Pin, I2C
    import time
    import urandom

    # Initialiser la connexion I2C pour le capteur tactile capacitif MPR121
    i2c = I2C(1, sda=Pin(6), scl=Pin(7))  # Configurer le bus I2C avec SDA sur la broche 6 et SCL sur la broche 7
    mpr = MPR121(i2c)  # Cr√©er une instance du capteur tactile MPR121

    # Fr√©quences des notes pour le buzzer (en Hertz) pour diff√©rentes notes musicales
    NOTE_A3 = 220
    NOTE_B3 = 247
    NOTE_C4 = 262
    NOTE_D4 = 294
    NOTE_E4 = 330
    NOTE_F4 = 349
    NOTE_G4 = 392
    NOTE_A4 = 440
    NOTE_B4 = 494
    NOTE_C5 = 523
    NOTE_D5 = 587
    NOTE_E5 = 659

    # Initialiser le PWM pour le buzzer sur la broche 15
    buzzer = machine.PWM(machine.Pin(15))

    # Liste des fr√©quences des notes √† jouer par le buzzer
    note = [NOTE_A3, NOTE_B3, NOTE_C4, NOTE_D4, NOTE_E4, NOTE_F4, NOTE_G4, NOTE_A4, NOTE_B4, NOTE_C5, NOTE_D5, NOTE_E5]

    # Fonction pour jouer une tonalit√© sur le buzzer √† une fr√©quence sp√©cifique
    def tone(pin, frequency):
        pin.freq(frequency)  # R√©gler la fr√©quence du buzzer
        pin.duty_u16(30000)  # R√©gler le cycle de travail √† 50% (approx.)

    # Fonction pour arr√™ter la tonalit√© (couper le buzzer)
    def noTone(pin):
        pin.duty_u16(0)  # R√©gler le cycle de travail √† 0% (silence)

    # Initialisation de la LED RGB via PWM sur les broches 13, 12 et 11 (pour rouge, vert, bleu)
    red = machine.PWM(machine.Pin(13))
    green = machine.PWM(machine.Pin(12))
    blue = machine.PWM(machine.Pin(11))

    # R√©gler la fr√©quence PWM pour chaque couleur (1kHz)
    red.freq(1000)
    green.freq(1000)
    blue.freq(1000)

    # Fonction pour mapper une valeur `x` d'une plage √† une autre
    def interval_mapping(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    # Fonction pour allumer al√©atoirement la LED RGB avec des valeurs de couleur al√©atoires
    def lightup():
        red.duty_u16(int(urandom.uniform(0, 65535)))  # R√©gler l'intensit√© al√©atoire pour le rouge
        green.duty_u16(int(urandom.uniform(0, 65535)))  # R√©gler l'intensit√© al√©atoire pour le vert
        blue.duty_u16(int(urandom.uniform(0, 65535)))  # R√©gler l'intensit√© al√©atoire pour le bleu

    # Fonction pour √©teindre toutes les couleurs de la LED RGB (tout mettre √† 0)
    def dark():
        red.duty_u16(0)  # √âteindre la LED rouge
        green.duty_u16(0)  # √âteindre la LED verte
        blue.duty_u16(0)  # √âteindre la LED bleue

    # Boucle principale du projet
    lastState = mpr.get_all_states()  # Obtenir l'√©tat initial de toutes les entr√©es tactiles
    touchMills = time.ticks_ms()  # Enregistrer le moment du dernier √©v√©nement tactile
    beat = 500  # D√©finir la dur√©e de l'effet sonore et lumineux (500ms)

    # Boucle principale pour g√©rer la d√©tection tactile et les effets
    while True:
        currentState = mpr.get_all_states()  # Obtenir l'√©tat actuel de toutes les entr√©es tactiles
        
        # V√©rifier s'il y a un changement dans l'√©tat des entr√©es tactiles (d√©but ou fin de contact)
        if currentState != lastState:
            for i in range(12):  # It√©rer sur les 12 entr√©es tactiles possibles
                # V√©rifier si un contact a commenc√© (touch√© dans l'√©tat actuel mais pas dans le dernier √©tat)
                if i in list(currentState) and not i in list(lastState):
                    tone(buzzer, note[i])  # Jouer la note correspondante pour l'entr√©e touch√©e
                    lightup()  # Allumer la LED RGB avec des couleurs al√©atoires
                    touchMills = time.ticks_ms()  # Enregistrer le moment de l'√©v√©nement tactile
        
        # V√©rifier si la dur√©e du beat est √©coul√©e ou si aucune entr√©e tactile n'est active
        if time.ticks_diff(time.ticks_ms(), touchMills) >= beat or len(currentState) == 0:
            noTone(buzzer)  # Arr√™ter le buzzer
            dark()  # √âteindre la LED RGB
        
        # Mettre √† jour le dernier √©tat avec l'√©tat actuel pour la prochaine it√©ration
        lastState = currentState


Veuillez ne pas toucher le fruit avant que le programme ne d√©marre pour √©viter de fausser la r√©f√©rence initiale lors de l'initialisation.
Apr√®s le d√©marrage du programme, touchez doucement le fruit, le buzzer √©mettra la tonalit√© correspondante et la lumi√®re RGB clignotera une fois de mani√®re al√©atoire.
