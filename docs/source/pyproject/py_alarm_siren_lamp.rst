.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions sp√©ciales durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_alarm_lamp:

7.3 Lampe d'Alarme avec Sir√®ne
=====================================

Les gyrophares sont souvent visibles dans la vie r√©elle (ou dans les films). Ils sont g√©n√©ralement utilis√©s pour r√©guler le trafic, servir de dispositif d'avertissement et comme accessoire de s√©curit√© essentiel pour les officiers, v√©hicules d'urgence, camions de pompiers et v√©hicules d'intervention. Quand vous voyez leurs lumi√®res ou entendez leur son, soyez prudent, cela signifie que vous (ou votre entourage) pourriez √™tre en danger.

Ici, une LED et un buzzer sont utilis√©s pour cr√©er un petit feu d'avertissement, activ√© par un interrupteur √† glissi√®re.

|sirem_alarm|


**Composants Requis**

Pour ce projet, nous avons besoin des composants suivants : 

Il est plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kepler Kit	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous :

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|
    *   - 6
        - :ref:`cpn_transistor`
        - 1(S8050)
        - |link_transistor_buy|
    *   - 7
        - :ref:`cpn_resistor`
        - 3(1KŒ©, 220Œ©, 10KŒ©)
        - |link_resistor_buy|
    *   - 8
        - Buzzer Passif :ref:`cpn_buzzer`
        - 1
        - |link_passive_buzzer_buy|
    *   - 9
        - :ref:`cpn_capacitor`
        - 1(104)
        - |link_capacitor_buy|
    *   - 10
        - :ref:`cpn_slide_switch`
        - 1
        - 

**Sch√©ma**

|sch_alarm_siren_lamp|

* Le GP17 est connect√© √† la broche centrale de l'interrupteur √† glissi√®re, avec une r√©sistance de 10K et un condensateur (filtre) en parall√®le vers la masse, ce qui permet √† l'interrupteur de sortir un niveau haut ou bas stable lorsqu'il est bascul√© √† gauche ou √† droite.
* D√®s que le GP15 est √† un niveau haut, le transistor NPN conduit, activant le buzzer passif qui commence √† √©mettre un son. Ce buzzer passif est programm√© pour augmenter progressivement en fr√©quence afin de produire un son de sir√®ne.
* Une LED est connect√©e au GP16 et est programm√©e pour varier p√©riodiquement en intensit√©, simulant ainsi un gyrophare.


**C√¢blage**

|wiring_alarm_siren_lamp|

**Code**

.. note::

    * Ouvrez le fichier ``7.3_alarm_siren_lamp.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Ex√©cuter le script actuel" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite.

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import time

    # Initialiser le PWM pour le buzzer (sur la broche 15) et la LED (sur la broche 16)
    buzzer = machine.PWM(machine.Pin(15))  # PWM pour le buzzer
    led = machine.PWM(machine.Pin(16))  # PWM pour la LED
    led.freq(1000)  # R√©gler la fr√©quence du PWM de la LED √† 1kHz

    # Initialiser l'interrupteur (sur la broche 17) en tant que broche d'entr√©e
    switch = machine.Pin(17, machine.Pin.IN)

    # Fonction pour arr√™ter le buzzer en r√©glant le cycle de service √† 0%
    def noTone(pin):
        pin.duty_u16(0)  # R√©gler le cycle de service PWM √† 0, arr√™tant ainsi le son

    # Fonction pour jouer un son sur le buzzer avec une fr√©quence sp√©cifi√©e
    def tone(pin, frequency):
        pin.freq(frequency)  # R√©gler la fr√©quence pour le buzzer
        pin.duty_u16(30000)  # R√©gler le cycle de service √† environ 50% (30000 sur 65535)

    # Fonction pour mapper une valeur d'une plage √† une autre
    def interval_mapping(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    # Gestionnaire d'interruptions pour basculer le bell_flag lorsque l'interrupteur est press√©
    def toggle(pin):
        global bell_flag
        bell_flag = not bell_flag  # Basculer la valeur de bell_flag
        print(bell_flag)  # Afficher l'√©tat actuel de bell_flag pour le d√©bogage
        
        # Changer l'interruption de l'interrupteur en fonction de l'√©tat de bell_flag
        if bell_flag:
            # Si bell_flag est True, √©couter un front descendant (quand l'interrupteur est rel√¢ch√©)
            switch.irq(trigger=machine.Pin.IRQ_FALLING, handler=toggle)
        else:
            # Si bell_flag est False, √©couter un front montant (quand l'interrupteur est press√©)
            switch.irq(trigger=machine.Pin.IRQ_RISING, handler=toggle)

    # Initialiser bell_flag √† False (buzzer et LED √©teints par d√©faut)
    bell_flag = False

    # Configurer une interruption pour d√©tecter quand l'interrupteur est press√© (front montant)
    switch.irq(trigger=machine.Pin.IRQ_RISING, handler=toggle)

    # Boucle principale pour contr√¥ler le buzzer et la LED en fonction de bell_flag
    while True:
        if bell_flag == True:
            # Si bell_flag est True, augmenter progressivement la luminosit√© de la LED
            # et changer la fr√©quence du buzzer pour simuler un effet de sir√®ne
            for i in range(0, 100, 2):  # Boucler de 0 √† 100 par pas de 2
                led.duty_u16(int(interval_mapping(i, 0, 100, 0, 65535)))  # Mapper i √† la luminosit√© de la LED
                tone(buzzer, int(interval_mapping(i, 0, 100, 130, 800)))  # Mapper i √† la fr√©quence du buzzer
                time.sleep_ms(10)  # Courte pause pour cr√©er une mont√©e en douceur
        else:
            # Si bell_flag est False, arr√™ter le buzzer et √©teindre la LED
            noTone(buzzer)  # Arr√™ter le buzzer
            led.duty_u16(0)  # √âteindre la LED (cycle de service √† 0)

Apr√®s l'ex√©cution du programme, basculez l'interrupteur √† glissi√®re vers la gauche (ou vers la droite, selon le c√¢blage de votre interrupteur), et le buzzer √©mettra un son d'alarme progressif tandis que la LED changera de luminosit√© en cons√©quence. Basculez l'interrupteur dans l'autre sens pour arr√™ter le buzzer et la LED.
