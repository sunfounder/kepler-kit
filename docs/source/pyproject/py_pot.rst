.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _py_pot:

2.11 Den Drehregler bet√§tigen
=============================

In den vorherigen Projekten haben wir den digitalen Eingang des Pico W genutzt.
Beispielsweise kann ein Knopf den Pin von einem niedrigen (aus) zu einem hohen Pegel (ein) √§ndern. Das ist ein bin√§rer Arbeitszustand.

Der Pico W ist jedoch auch in der Lage, eine andere Art von Eingangssignal zu empfangen: den analogen Eingang.
Dieser kann sich in einem Zustand von vollst√§ndig geschlossen bis vollst√§ndig ge√∂ffnet befinden und bietet ein Spektrum an m√∂glichen Werten.
Der analoge Eingang erlaubt es dem Mikrocontroller, die Lichtintensit√§t, Schallintensit√§t, Temperatur, Feuchtigkeit usw. der physischen Welt zu erfassen.

Normalerweise ben√∂tigt ein Mikrocontroller zus√§tzliche Hardware f√ºr den analogen Eingang - den Analog-Digital-Umsetzer (ADC).
Der Pico W verf√ºgt jedoch bereits √ºber einen integrierten ADC, den wir direkt nutzen k√∂nnen.


|pin_adc|

Der Pico W besitzt drei GPIO-Pins, die f√ºr analogen Eingang genutzt werden k√∂nnen: GP26, GP27, GP28, also analoge Kan√§le 0, 1 und 2.
Zudem gibt es einen vierten analogen Kanal, der mit dem eingebauten Temperatursensor verbunden ist und hier nicht weiter erl√§utert wird.

In diesem Projekt versuchen wir, den analogen Wert eines Potentiometers auszulesen.

* :ref:`cpn_potentiometer`

**Erforderliche Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist sicherlich praktisch, ein komplettes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - KOMPONENTEN IN DIESEM KIT
        - LINK
    *   - Kepler Kit	
        - 450+
        - |link_kepler_kit|

Sie k√∂nnen die Komponenten auch einzeln √ºber die unten stehenden Links kaufen.


.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - KOMPONENTE	
        - ANZAHL
        - LINK

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Micro-USB-Kabel
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Mehrere
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 1 (220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|
    *   - 7
        - :ref:`cpn_potentiometer`
        - 1
        - |link_potentiometer_buy|


**Schaltplan**

|sch_pot|

Das Potentiometer ist ein analoges Bauteil, das in zwei verschiedene Richtungen gedreht werden kann.

Schlie√üen Sie den mittleren Pin des Potentiometers an den analogen Pin GP28 an. Der Raspberry Pi Pico W verf√ºgt √ºber einen mehrkanaligen, 16-bit Analog-Digital-Umsetzer. Das bedeutet, dass die Eingangsspannung zwischen 0 und der Betriebsspannung (3,3V) auf einen Ganzzahlwert zwischen 0 und 65535 abgebildet wird. Der Wertebereich von GP28 reicht also von 0 bis 65535.

Die Berechnungsformel lautet wie folgt:

    (Vp/3.3V) x 65535 = Ap

Programmieren Sie dann den Wert von GP28 (Potentiometer) als PWM-Wert von GP15 (LED).
Sie werden feststellen, dass die Helligkeit der LED sich gleichzeitig √§ndert, wenn Sie das Potentiometer drehen.

**Verdrahtung**

|wiring_pot|

**Code**

.. note::

    * √ñffnen Sie die Datei ``2.11_turn_the_knob.py`` im Pfad ``kepler-kit-main/micropython`` oder kopieren Sie diesen Code in Thonny, klicken Sie dann auf "Aktuelles Skript ausf√ºhren" oder dr√ºcken Sie einfach F5.

    * Vergessen Sie nicht, den Interpreter "MicroPython (Raspberry Pi Pico)" in der rechten unteren Ecke auszuw√§hlen.

    * F√ºr detaillierte Anleitungen siehe :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    potentiometer = machine.ADC(28)
    led = machine.PWM(machine.Pin(15))
    led.freq(1000)

    while True:
        value = potentiometer.read_u16()
        print(value)
        led.duty_u16(value)
        utime.sleep_ms(200)

Wenn das Programm l√§uft, k√∂nnen wir den derzeit von Pin GP28 gelesenen analogen Wert im Shell-Fenster sehen.
Drehen Sie den Drehregler, und der Wert wird sich von 0 auf 65535 √§ndern.
Gleichzeitig wird die Helligkeit der LED mit dem Anstieg des analogen Werts zunehmen.

**Funktionsweise**

.. code-block:: python

    potentiometer = machine.ADC(28)

Zugriff auf den ADC, der mit einer durch die ID identifizierten Quelle verbunden ist. In diesem Beispiel handelt es sich um GP28.

.. code-block:: python

    potentiometer.read_u16()

F√ºhrt eine analoge Messung durch und gibt einen Ganzzahlwert im Bereich von 0 bis 65535 zur√ºck. Der R√ºckgabewert stellt die rohe Messung dar, die vom ADC erfasst und so skaliert wurde, dass der Mindestwert 0 und der H√∂chstwert 65535 betr√§gt.


* `machine.ADC - MicroPython Dokumentation <https://docs.micropython.org/en/latest/library/machine.ADC.html>`_

