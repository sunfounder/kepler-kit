.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez vos probl√®mes apr√®s-vente et vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_led:

2.1 Bonjour, LED !
=======================================

Tout comme l'impression de "Hello, world!" est la premi√®re √©tape pour apprendre √† programmer, utiliser un programme pour piloter une LED est la traditionnelle introduction √† la programmation physique.

* :ref:`cpn_led`

**Composants requis**

Pour ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 1(220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|


**Sch√©ma**

|sch_led|

Ce circuit fonctionne selon un principe simple, la direction du courant est indiqu√©e dans la figure. La LED s'allumera apr√®s la r√©sistance limitant le courant de 220 ohms lorsque GP15 √©met un niveau haut (3,3V). La LED s'√©teindra lorsque GP15 √©mettra un niveau bas (0V).

**C√¢blage**

|wiring_led|

Pour construire le circuit, suivez la direction du courant !

1. La LED est aliment√©e par la broche GP15 de la carte Pico W, et le circuit commence ici.
#. Pour prot√©ger la LED, le courant doit passer par une r√©sistance de 220 ohms. Une extr√©mit√© de la r√©sistance doit √™tre ins√©r√©e dans la m√™me rang√©e que la broche GP15 de la Pico W (rang√©e 20 dans mon circuit), et l'autre extr√©mit√© doit √™tre ins√©r√©e dans une rang√©e libre de la breadboard (rang√©e 24).

    .. note::
        L'anneau de couleur de la r√©sistance de 220 ohms est rouge, rouge, noir, noir et brun.

#. Si vous prenez la LED, vous verrez que l'une de ses pattes est plus longue que l'autre. Connectez la patte longue √† la m√™me rang√©e que la r√©sistance, et la patte courte √† la m√™me rang√©e de l'autre c√¥t√© du milieu de la breadboard.

    .. note::
        La patte longue est l'anode, qui repr√©sente le c√¥t√© positif du circuit ; la patte courte est la cathode, repr√©sentant le c√¥t√© n√©gatif.

        L'anode doit √™tre connect√©e √† la broche GPIO via une r√©sistance ; la cathode doit √™tre connect√©e √† la broche GND.

#. Utilisez un c√¢ble de liaison m√¢le-m√¢le (M2M) pour connecter la patte courte de la LED au bus d'alimentation n√©gatif de la breadboard.
#. Connectez la broche GND de la Pico W au bus d'alimentation n√©gatif √† l'aide d'un c√¢ble de liaison.

**Code**

.. note::

    * Ouvrez le fichier ``2.1_hello_led.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime
    
    led = machine.Pin(15, machine.Pin.OUT)
    while True:
        led.value(1)
        utime.sleep(2)
        led.value(0)
        utime.sleep(2)

Une fois le code ex√©cut√©, vous verrez la LED clignoter.


**Comment √ßa fonctionne ?**

La biblioth√®que ``machine`` est n√©cessaire pour utiliser les GPIO.

.. code-block:: python

    import machine

Cette biblioth√®que contient toutes les instructions n√©cessaires pour permettre la communication entre MicroPython et la Pico W. 
Sans cette ligne de code, il ne sera pas possible de contr√¥ler les GPIO.

La prochaine ligne importante √† noter est la suivante :

.. code-block:: python

    led = machine.Pin(15, machine.Pin.OUT)

L'objet ``led`` est d√©fini ici. Techniquement, il peut porter n'importe quel nom, comme x, y, banana, Michael_Jackson, ou tout autre caract√®re. 
Pour s'assurer que le programme reste facile √† lire, il est pr√©f√©rable d'utiliser un nom qui d√©crit son r√¥le.

Dans la seconde partie de cette ligne (celle apr√®s le signe √©gal), nous appelons la fonction ``Pin`` de la biblioth√®que ``machine``. Elle permet de dire aux broches GPIO de la Pico ce qu'elles doivent faire.
La fonction ``Pin`` prend deux param√®tres : le premier (15) indique la broche √† configurer ; 
le second param√®tre (machine.Pin.OUT) pr√©cise que la broche doit √™tre utilis√©e comme sortie plut√¥t que comme entr√©e.

Le code ci-dessus a configur√© la broche, mais cela ne suffit pas pour allumer la LED. Pour cela, nous devons √©galement "utiliser" la broche.

.. code-block:: python

    led.value(1)

La broche GP15 a √©t√© pr√©c√©demment configur√©e et nomm√©e ``led``. Cette instruction sert √† d√©finir la valeur de ``led`` √† 1 pour allumer la LED.

En r√©sum√©, pour utiliser les GPIO, ces √©tapes sont n√©cessaires :

* **Importer la biblioth√®que machine** : Cette √©tape est essentielle et n'est ex√©cut√©e qu'une seule fois.
* **Configurer les GPIO** : Avant utilisation, chaque broche doit √™tre configur√©e.
* **Utiliser** : Changez l'√©tat de fonctionnement de la broche en lui attribuant une valeur.

Si nous suivons ces √©tapes pour √©crire un exemple, voici le code obtenu :

.. code-block:: python

    import machine
    led = machine.Pin(15, machine.Pin.OUT)
    led.value(1)

Ex√©cutez-le et vous verrez la LED s'allumer.

Ensuite, essayons d'ajouter une instruction pour l'√©teindre :

.. code-block:: python

    import machine   
    led = machine.Pin(15, machine.Pin.OUT)
    led.value(1)
    led.value(0)

D'apr√®s ces lignes de code, le programme allumera d'abord la LED, puis l'√©teindra. 
Cependant, lorsque vous l'ex√©cutez, vous constaterez que ce n'est pas le cas. 
Aucune lumi√®re ne s'√©chappe de la LED. Cela est d√ª √† la vitesse d'ex√©cution extr√™mement rapide entre les deux lignes, bien plus rapide que la perception de l'≈ìil humain. 
Quand la LED s'allume, nous ne percevons pas la lumi√®re imm√©diatement. Ce probl√®me peut √™tre r√©solu en ralentissant l'ex√©cution du programme.

La seconde ligne du programme devrait inclure l'instruction suivante :

.. code-block:: python

    import utime

De la m√™me mani√®re que ``machine``, la biblioth√®que ``utime`` est import√©e ici, pour g√©rer tout ce qui concerne le temps.
Les d√©lais que nous devons utiliser y sont inclus. Ajoutez une instruction de d√©lai entre ``led.value(1)`` et ``led.value(0)`` et espacez-les de 2 secondes.

.. code-block:: python

    utime.sleep(2)

Voici √† quoi le code devrait ressembler maintenant. 
Nous verrons que la LED s'allume d'abord, puis s'√©teint lorsque nous l'ex√©cutons :

.. code-block:: python

    import machine 
    import utime  
    led = machine.Pin(15, machine.Pin.OUT)
    led.value(1)
    utime.sleep(2)
    led.value(0)

Enfin, faisons clignoter la LED. 
Cr√©ez une boucle, r√©√©crivez le programme, et vous obtiendrez ce que vous avez vu au d√©but de ce chapitre.

.. code-block:: python

    import machine
    import utime
    
    led = machine.Pin(15, machine.Pin.OUT)
    while True:
        led.value(1)
        utime.sleep(2)
        led.value(0)
        utime.sleep(2)

* :ref:`py_syntax_while` 

**En savoir plus**


Il existe g√©n√©ralement un fichier API (Interface de Programmation d'Application) associ√© √† la biblioth√®que. 
Ce fichier contient toutes les informations n√©cessaires pour utiliser cette biblioth√®que, y compris des descriptions d√©taill√©es des fonctions, classes, types de retour, types de param√®tres, etc.

Dans cet article, nous avons utilis√© les biblioth√®ques ``machine`` et ``utime`` de MicroPython, et nous pouvons trouver plus de fa√ßons de les utiliser ici :

* `machine.Pin <https://docs.micropython.org/en/latest/library/machine.Pin.html>`_

* `utime <https://docs.micropython.org/en/latest/library/utime.html>`_

Veuillez lire le fichier API pour bien comprendre cet exemple de clignotement de LED !

.. note::

    * Ouvrez le fichier ``2.1_hello_led_2.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    led = machine.Pin(15, machine.Pin.OUT)
    while True:
        led.toggle()
        utime.sleep(1)