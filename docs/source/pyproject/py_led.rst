.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete junto a otros entusiastas en temas avanzados sobre Raspberry Pi, Arduino y ESP32.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas posventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones Exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones en d√≠as festivos.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.

.. _py_led:

2.1 ¬°Hola, LED!
===================

As√≠ como imprimir "¬°Hola, mundo!" es el primer paso para aprender a programar, controlar un LED mediante programaci√≥n es la introducci√≥n cl√°sica al aprendizaje de la programaci√≥n f√≠sica.

* :ref:`cpn_led`

**Componentes Necesarios**

Para este proyecto, necesitaremos los siguientes componentes.

Es muy conveniente adquirir un kit completo; aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPONENTE	
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 1(220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|


**Esquema**

|sch_led|

Este circuito funciona con un principio simple, y la direcci√≥n de la corriente se muestra en la figura. El LED se encender√° despu√©s de la resistencia limitadora de corriente de 220 ohmios cuando GP15 emite un nivel alto (3.3v). El LED se apagar√° cuando GP15 emita un nivel bajo (0v).

**Conexiones**

|wiring_led|

¬°Para montar el circuito, sigamos la direcci√≥n de la corriente!

1. El LED se alimenta mediante el pin GP15 de la placa Pico W, y el circuito comienza aqu√≠.
#. Para proteger el LED, la corriente debe pasar a trav√©s de una resistencia de 220 ohmios. Inserta un extremo de la resistencia en la misma fila que el pin GP15 de Pico W (fila 20 en mi circuito) y el otro extremo en una fila libre de la placa de pruebas (fila 24).

    .. note::
        La resistencia de 220 ohmios tiene bandas de color rojo, rojo, negro, negro y marr√≥n.

#. Si observas el LED, ver√°s que uno de sus pines es m√°s largo que el otro. Conecta el pin m√°s largo a la misma fila que la resistencia y el pin m√°s corto a la fila opuesta de la placa de pruebas.

    .. note::
        El pin m√°s largo es el √°nodo, que representa el lado positivo del circuito; el pin m√°s corto es el c√°todo, que representa el lado negativo.

        El √°nodo debe estar conectado al pin GPIO a trav√©s de una resistencia; el c√°todo debe estar conectado al pin GND.

#. Usa un cable de puente macho a macho (M2M) para conectar el pin corto del LED al bus negativo de la placa de pruebas.
#. Conecta el pin GND de Pico W al bus negativo de la placa de pruebas usando un cable de puente.


**C√≥digo**

.. note::

    * Abre el archivo ``2.1_hello_led.py`` en la ruta de ``kepler-kit-main/micropython`` o copia este c√≥digo en Thonny, luego haz clic en "Run Current Script" o simplemente presiona F5 para ejecutarlo.

    * No olvides seleccionar el int√©rprete "MicroPython (Raspberry Pi Pico)" en la esquina inferior derecha.

    * Para tutoriales detallados, consulta :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime
    
    led = machine.Pin(15, machine.Pin.OUT)
    while True:
        led.value(1)
        utime.sleep(2)
        led.value(0)
        utime.sleep(2)

Despu√©s de ejecutar el c√≥digo, ver√°s que el LED parpadea.


**¬øC√≥mo funciona?**


La biblioteca machine es necesaria para usar GPIO.

.. code-block:: python

    import machine

La biblioteca contiene todas las instrucciones necesarias para la comunicaci√≥n entre MicroPython y Pico W. 
Sin esta l√≠nea de c√≥digo, no podremos controlar los GPIO.

Observa la siguiente l√≠nea:

.. code-block:: python

    led = machine.Pin(15, machine.Pin.OUT)

Aqu√≠ definimos el objeto ``led``. T√©cnicamente, podr√≠a tener cualquier nombre, como x, y, banana o cualquier otra cosa.
Para facilitar la lectura del programa, es mejor utilizar un nombre que describa su prop√≥sito.

En la segunda parte de esta l√≠nea (despu√©s del signo igual), llamamos a la funci√≥n Pin que se encuentra en la biblioteca ``machine``. Sirve para indicar a los pines GPIO de Pico qu√© hacer.
La funci√≥n ``Pin`` tiene dos par√°metros: el primero (15) representa el pin a configurar;
el segundo par√°metro (machine.Pin.OUT) especifica que el pin debe ser de salida en lugar de entrada.

El c√≥digo anterior "configura" el pin, pero no encender√° el LED. Para esto, necesitamos tambi√©n "usar" el pin.

.. code-block:: python

    led.value(1)

El pin GP15 ha sido configurado previamente y nombrado ``led``. La funci√≥n de esta declaraci√≥n es establecer el valor de ``led`` en 1 para encender el LED.

En resumen, para usar GPIO, estos pasos son necesarios:

* **Importar la biblioteca machine**: Esto es esencial y solo se ejecuta una vez.
* **Configurar GPIO**: Antes de su uso, cada pin debe configurarse.
* **Usar**: Cambiar el estado de funcionamiento del pin asign√°ndole un valor.

Si seguimos los pasos anteriores para escribir un ejemplo, obtendr√°s un c√≥digo como este:

.. code-block:: python

    import machine
    led = machine.Pin(15, machine.Pin.OUT)
    led.value(1)

Ejecuta el c√≥digo y podr√°s encender el LED.

A continuaci√≥n, intentemos agregar una instrucci√≥n para apagarlo:

.. code-block:: python

    import machine   
    led = machine.Pin(15, machine.Pin.OUT)
    led.value(1)
    led.value(0)

Seg√∫n el c√≥digo, este programa encender√° primero el LED y luego lo apagar√°. 
Sin embargo, al ejecutarlo, ver√°s que no ocurre como esperabas.
El LED no emite luz visible. Esto se debe a que la ejecuci√≥n entre ambas l√≠neas es muy r√°pida, mucho m√°s de lo que el ojo humano puede percibir. 
Cuando el LED se enciende, no percibimos la luz de inmediato. Esto se soluciona ralentizando el programa.

La segunda l√≠nea del programa deber√≠a contener la siguiente instrucci√≥n:

.. code-block:: python

    import utime

Similar a ``machine``, la biblioteca ``utime`` se importa aqu√≠ y maneja todo lo relacionado con el tiempo.
La demora que necesitamos est√° incluida aqu√≠. A√±ade una instrucci√≥n de pausa entre ``led.value(1)`` y ``led.value(0)`` para que est√©n separados por 2 segundos.

.. code-block:: python

    utime.sleep(2)

As√≠ es como deber√≠a verse ahora el c√≥digo. 
Veremos que el LED se enciende primero y luego se apaga cuando lo ejecutamos:

.. code-block:: python

    import machine 
    import utime  
    led = machine.Pin(15, machine.Pin.OUT)
    led.value(1)
    utime.sleep(2)
    led.value(0)

Finalmente, debemos hacer que el LED parpadee. 
Crea un bucle, reescribe el programa, y ser√° como lo viste al inicio de este cap√≠tulo.

.. code-block:: python

    import machine
    import utime
    
    led = machine.Pin(15, machine.Pin.OUT)
    while True:
        led.value(1)
        utime.sleep(2)
        led.value(0)
        utime.sleep(2)

* :ref:`py_syntax_while` 

**Para Aprender M√°s**


Por lo general, habr√° un archivo de API (Interfaz de Programaci√≥n de Aplicaciones) asociado con la biblioteca. 
Este contiene toda la informaci√≥n necesaria para utilizar la biblioteca, incluyendo descripciones detalladas de funciones, clases, tipos de retorno, tipos de par√°metros, etc.

En este art√≠culo usamos las bibliotecas ``machine`` y ``utime`` de MicroPython. Podemos encontrar m√°s formas de utilizarlas aqu√≠:

* `machine.Pin <https://docs.micropython.org/en/latest/library/machine.Pin.html>`_

* `utime <https://docs.micropython.org/en/latest/library/utime.html>`_

¬°Revisa el archivo API para comprender mejor este ejemplo de c√≥mo hacer parpadear el LED!

.. note::

    * Abre el archivo ``2.1_hello_led_2.py`` en la ruta de ``kepler-kit-main/micropython`` o copia este c√≥digo en Thonny, luego haz clic en "Run Current Script" o simplemente presiona F5 para ejecutarlo.

    * No olvides seleccionar el int√©rprete "MicroPython (Raspberry Pi Pico)" en la esquina inferior derecha.

    * Para tutoriales detallados, consulta :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    led = machine.Pin(15, machine.Pin.OUT)
    while True:
        led.toggle()
        utime.sleep(1)