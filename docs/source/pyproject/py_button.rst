.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions sp√©ciales durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_button:

2.5 Lecture de la Valeur du Bouton
==============================================

Ces broches ont √† la fois des fonctions d'entr√©e et de sortie, comme l'indique leur nom GPIO (General-purpose input/output). Auparavant, nous avons utilis√© la fonction de sortie ; dans ce chapitre, nous utiliserons la fonction d'entr√©e pour lire la valeur du bouton.

* :ref:`cpn_button`

**Composants Requis**

Pour ce projet, nous avons besoin des composants suivants : 

Il est plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kepler Kit	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous :

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 1 (10KŒ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_button`
        - 1
        - |link_button_buy|

**Sch√©ma**

|sch_button|

Il suffit de connecter une broche du bouton √† 3.3V et l'autre broche √† GP14 ; ainsi, lorsque le bouton est press√©, GP14 sera √† un niveau haut. Cependant, quand le bouton n'est pas press√©, GP14 est en √©tat flottant et peut √™tre soit haut, soit bas. Pour obtenir un niveau bas stable lorsque le bouton n'est pas press√©, GP14 doit √™tre reli√© √† la masse via une r√©sistance de pull-down de 10KŒ©.

**C√¢blage**

|wiring_button|

.. Suivons la direction du sch√©ma pour construire le circuit !

.. 1. Connectez la broche 3V3 du Pico W au bus d'alimentation positif de la breadboard.
.. #. Ins√©rez le bouton dans la breadboard en chevauchant la ligne centrale.

.. note::
    Un bouton √† quatre broches a la forme d'un "H". Les deux broches de gauche ou de droite sont connect√©es, ce qui signifie que lorsqu'il est plac√© sur la ligne centrale, il connecte deux demi-rang√©es ayant le m√™me num√©ro de rang√©e. (Par exemple, dans mon circuit, E23 et F23 sont d√©j√† connect√©s, tout comme E25 et F25).

    Tant que le bouton n'est pas press√©, les broches gauche et droite sont ind√©pendantes et le courant ne peut pas circuler d'un c√¥t√© √† l'autre.

.. #. Utilisez un fil de connexion pour relier une broche du bouton au bus positif (dans mon cas, la broche en haut √† droite).
.. #. Connectez l'autre broche (en haut √† gauche ou en bas √† gauche) √† GP14 avec un fil de connexion.
.. #. Utilisez une r√©sistance de 10KŒ© pour connecter la broche en haut √† gauche du bouton au bus n√©gatif.
.. #. Connectez le bus d'alimentation n√©gatif de la breadboard √† la masse (GND) du Pico.

**Code**

.. note::

    * Ouvrez le fichier ``2.5_read_button_value.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Ex√©cuter le script actuel" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime
    button = machine.Pin(14, machine.Pin.IN)
    while True:
        if button.value() == 1:
            print("You pressed the button!")
            utime.sleep(1)

D√®s que le code s'ex√©cute, le Shell affiche "Vous avez appuy√© sur le bouton !"

**Mode de Fonctionnement Pull-up**

La prochaine partie concerne le c√¢blage et le code lorsque vous utilisez le bouton en mode pull-up.

|sch_button_pullup|

|wiring_button_pullup|

La seule diff√©rence avec le mode pull-down est que la r√©sistance de 10KŒ© est connect√©e √† 3.3V et le bouton √† la masse, de sorte que lorsque le bouton est press√©, GP14 recevra un niveau bas, ce qui est l'inverse de la valeur obtenue en mode pull-down. 
Il suffit donc de modifier le code par ``if button.value() == 0:``.

Voir √©galement la r√©f√©rence ici :

* `machine.Pin <https://docs.micropython.org/en/latest/library/machine.Pin.html>`_