.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans le Raspberry Pi, l'Arduino et l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des astuces et des tutoriels pour d√©velopper vos comp√©tences.
    - **Aper√ßus exclusifs** : Profitez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_pir:

2.10 D√©tection de Mouvement Humain
========================================

Le capteur infrarouge passif (capteur PIR) est un capteur courant capable de mesurer la lumi√®re infrarouge (IR) √©mise par les objets dans son champ de vision.
En termes simples, il capte le rayonnement infrarouge √©mis par le corps, d√©tectant ainsi les mouvements des personnes et d'autres animaux.
Plus pr√©cis√©ment, il informe la carte de contr√¥le principale que quelqu'un est entr√© dans votre pi√®ce.

:ref:`cpn_pir`

**Composants Requis**

Dans ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_pir`
        - 1
        - |link_pir_buy|

**Sch√©ma**

|sch_pir|

Lorsque le module PIR d√©tecte le passage de quelqu'un, le GP14 sera √† un niveau haut, sinon il sera bas.

.. note::
    Le module PIR poss√®de deux potentiom√®tres : l'un ajuste la sensibilit√©, l'autre ajuste la distance de d√©tection. Pour un fonctionnement optimal, tournez les deux dans le sens inverse des aiguilles d'une montre jusqu'√† la but√©e.

    |img_PIR_TTE|

**C√¢blage**

|wiring_pir|

**Code**

.. note::

    * Ouvrez le fichier ``2.10_detect_human_movement.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite.

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    pir_sensor = machine.Pin(14, machine.Pin.IN)

    def motion_detected(pin):
        print("Somebody here!")

    pir_sensor.irq(trigger=machine.Pin.IRQ_RISING, handler=motion_detected)

Apr√®s l'ex√©cution du programme, si le module PIR d√©tecte la pr√©sence de quelqu'un √† proximit√©, la console Shell affichera "Quelqu'un est l√† !"

**En savoir plus**

Le PIR est un capteur tr√®s sensible. Pour l'adapter √† l'environnement d'utilisation, il n√©cessite des ajustements. Positionnez la face avec les deux potentiom√®tres face √† vous, tournez les deux potentiom√®tres dans le sens inverse des aiguilles d'une montre jusqu'√† la but√©e et placez le cavalier sur le Pin L et le Pin central.

.. note::

    * Ouvrez le fichier ``2.10_pir_adjustment.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite.

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    pir_sensor = machine.Pin(14, machine.Pin.IN)

    global timer_delay
    timer_delay = utime.ticks_ms()
    print("start")

    def pir_in_high_level(pin):
        global timer_delay    
        pir_sensor.irq(trigger=machine.Pin.IRQ_FALLING, handler=pir_in_low_level)    
        intervals = utime.ticks_diff(utime.ticks_ms(), timer_delay)
        timer_delay = utime.ticks_ms()
        print("the dormancy duration is " + str(intervals) + "ms")

    def pir_in_low_level(pin):
        global timer_delay    
        pir_sensor.irq(trigger=machine.Pin.IRQ_RISING, handler=pir_in_high_level) 
        intervals2 = utime.ticks_diff(utime.ticks_ms(), timer_delay)
        timer_delay = utime.ticks_ms()        
        print("the duration of work is " + str(intervals2) + "ms")

    pir_sensor.irq(trigger=machine.Pin.IRQ_RISING, handler=pir_in_high_level) 

Analysons maintenant la m√©thode de r√©glage √† travers les r√©sultats exp√©rimentaux.

|img_pir_back|

1. Mode de d√©clenchement

    Regardons les broches avec le cavalier √† l'angle.
    Cela permet au PIR d'entrer en mode de d√©clenchement r√©p√©titif ou non r√©p√©titif.

    Actuellement, notre cavalier connecte la broche centrale et la broche L, pla√ßant ainsi le PIR en mode de d√©clenchement non r√©p√©titif.
    Dans ce mode, lorsque le PIR d√©tecte un mouvement, il enverra un signal haut pendant environ 2,8 secondes √† la carte de contr√¥le principale.
    On peut voir dans les donn√©es imprim√©es que la dur√©e de fonctionnement est toujours autour de 2800 ms.

    Ensuite, modifions la position du cavalier inf√©rieur et connectons-le √† la broche centrale et √† la broche H pour mettre le PIR en mode de d√©clenchement r√©p√©titif.
    Dans ce mode, lorsque le PIR d√©tecte le mouvement (notez qu'il s'agit de mouvement, pas de stationnaire devant le capteur), tant que l'organisme continue √† bouger dans la zone de d√©tection, le PIR continuera d'envoyer un signal haut √† la carte de contr√¥le principale.
    On peut voir dans les donn√©es imprim√©es que la dur√©e de fonctionnement est une valeur variable.

#. R√©glage du d√©lai

    Le potentiom√®tre de gauche ajuste l'intervalle entre deux d√©tections.
    
    Actuellement, il est tourn√© dans le sens inverse des aiguilles d'une montre jusqu'√† la but√©e, ce qui fait que le PIR entre dans un mode de sommeil d'environ 5 secondes apr√®s avoir envoy√© le signal haut. Pendant ce temps, le PIR ne d√©tectera plus de rayonnement infrarouge dans la zone cible.
    On peut voir dans les donn√©es imprim√©es que la dur√©e de sommeil est toujours sup√©rieure ou √©gale √† 5000 ms.

    Si nous tournons le potentiom√®tre dans le sens des aiguilles d'une montre, le temps de sommeil augmentera √©galement. Lorsqu'il est tourn√© compl√®tement dans le sens des aiguilles d'une montre, le temps de sommeil peut atteindre jusqu'√† 300 secondes.

#. R√©glage de la distance

    Le potentiom√®tre central sert √† ajuster la port√©e de d√©tection du PIR.

    Tournez le potentiom√®tre **dans le sens des aiguilles d'une montre** pour augmenter la port√©e de d√©tection, avec une distance maximale d'environ 0 √† 7 m√®tres.
    En le tournant **dans le sens inverse des aiguilles d'une montre**, la port√©e de d√©tection diminue, avec une distance minimale d'environ 0 √† 3 m√®tres.
