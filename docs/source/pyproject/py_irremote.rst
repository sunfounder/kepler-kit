.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez vos probl√®mes apr√®s-vente et vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_irremote:

6.4 T√©l√©commande IR
================================

Dans l'√©lectronique grand public, les t√©l√©commandes sont utilis√©es pour contr√¥ler des appareils tels que les t√©l√©visions et les lecteurs DVD.
Elles permettent aussi de piloter des dispositifs hors de port√©e, comme des climatiseurs centraux.

Le r√©cepteur IR est un composant dot√© d'une cellule photo√©lectrique calibr√©e pour recevoir la lumi√®re infrarouge. 
Il est presque toujours utilis√© pour la d√©tection de t√©l√©commande - chaque t√©l√©viseur et lecteur DVD en a un √† l'avant pour capter le signal IR de la t√©l√©commande.
√Ä l'int√©rieur de la t√©l√©commande se trouve une LED IR correspondante, qui √©met des impulsions IR pour indiquer au t√©l√©viseur de s'allumer, s'√©teindre ou changer de cha√Æne.

* :ref:`cpn_ir_receiver`

**Composants requis**

Pour ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.


.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_ir_receiver`
        - 1
        - |link_receiver_buy|

**Sch√©ma**

|sch_irrecv|

**C√¢blage**


|wiring_irrecv|


**Code**

.. note::

    * Ouvrez le fichier ``6.4_ir_remote_control.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`. 
    
    * Vous devez utiliser les biblioth√®ques dans le dossier ``ir_rx``, assurez-vous qu'elles ont √©t√© charg√©es sur le Pico. Pour un tutoriel d√©taill√©, reportez-vous √† :ref:`add_libraries_py`.


.. code-block:: python

    import time
    from machine import Pin, freq
    from ir_rx.print_error import print_error
    from ir_rx.nec import NEC_8

    pin_ir = Pin(17, Pin.IN)

    def decodeKeyValue(data):
        if data == 0x16:
            return "0"
        if data == 0x0C:
            return "1"
        if data == 0x18:
            return "2"
        if data == 0x5E:
            return "3"
        if data == 0x08:
            return "4"
        if data == 0x1C:
            return "5"
        if data == 0x5A:
            return "6"
        if data == 0x42:
            return "7"
        if data == 0x52:
            return "8"
        if data == 0x4A:
            return "9"
        if data == 0x09:
            return "+"
        if data == 0x15:
            return "-"
        if data == 0x7:
            return "EQ"
        if data == 0x0D:
            return "U/SD"
        if data == 0x19:
            return "CYCLE"
        if data == 0x44:
            return "PLAY/PAUSE"
        if data == 0x43:
            return "FORWARD"
        if data == 0x40:
            return "BACKWARD"
        if data == 0x45:
            return "POWER"
        if data == 0x47:
            return "MUTE"
        if data == 0x46:
            return "MODE" 
        return "ERROR"

    # Fonction de rappel utilisateur
    def callback(data, addr, ctrl):
        if data < 0:  # Le protocole NEC envoie des codes r√©p√©titifs.
            pass
        else:
            print(decodeKeyValue(data))

    ir = NEC_8(pin_ir, callback)  # Instancier le r√©cepteur
    ir.error_function(print_error)  # Afficher les informations de d√©bogage

    try:
        while True:
            pass
    except KeyboardInterrupt:
        ir.close()


La nouvelle t√©l√©commande a un morceau de plastique √† son extr√©mit√© pour isoler la pile √† l'int√©rieur. Vous devez retirer cette pi√®ce pour alimenter la t√©l√©commande lorsque vous l'utilisez.
Une fois le programme en cours d'ex√©cution, lorsque vous appuyez sur la t√©l√©commande, le terminal affichera la touche que vous avez press√©e.

**Comment √ßa fonctionne ?**

Ce programme peut sembler un peu complexe, mais il ex√©cute en fait les fonctions de base du r√©cepteur IR avec seulement quelques lignes de code.

.. code-block:: python

    import time
    from machine import Pin, freq
    from ir_rx.nec import NEC_8

    pin_ir = Pin(17, Pin.IN)

    # Fonction de rappel utilisateur
    def callback(data, addr, ctrl):
        if data < 0:  # Le protocole NEC envoie des codes r√©p√©titifs.
            pass
        else:
            print(decodeKeyValue(data))

    ir = NEC_8(pin_ir, callback)  # Instancier le r√©cepteur

Ici, un objet ``ir`` est instanci√©, capable de lire les signaux acquis par le r√©cepteur IR √† tout moment.

Le r√©sultat sera enregistr√© dans ``data`` de la fonction de rappel.

* `Callback Function - Wikipedia <https://en.wikipedia.org/wiki/Callback_(computer_programming)>`_

Si le r√©cepteur IR re√ßoit des valeurs en double (par exemple, en maintenant une touche enfonc√©e), alors ``data < 0`` et ces donn√©es doivent √™tre filtr√©es.

Sinon, ``data`` contiendra une valeur utilisable, qui sera d√©cod√©e par la fonction ``decodeKeyValue(data)``.

.. code-block:: python

    def decodeKeyValue(data):
        if data == 0x16:
            return "0"
        if data == 0x0C:
            return "1"
        if data == 0x18:
            return "2"
        if data == 0x5E:
            return "3"
        if data == 0x08:
            return "4"
        if data == 0x1C:
            return "5"
        if data == 0x5A:
            return "6"
        if data == 0x42:
            return "7"
        if data == 0x52:
            return "8"
        if data == 0x4A:
            return "9"
        if data == 0x09:
            return "+"
        if data == 0x15:
            return "-"
        if data == 0x7:
            return "EQ"
        if data == 0x0D:
            return "U/SD"
        if data == 0x19:
            return "CYCLE"
        if data == 0x44:
            return "PLAY/PAUSE"
        if data == 0x43:
            return "FORWARD"
        if data == 0x40:
            return "BACKWARD"
        if data == 0x45:
            return "POWER"
        if data == 0x47:
            return "MUTE"
        if data == 0x46:
            return "MODE" 
        return "ERROR"

Si vous appuyez sur la touche **1**, le r√©cepteur IR √©met une valeur comme ``0x0C``, qui doit √™tre d√©cod√©e pour correspondre √† la touche sp√©cifique.

Ensuite, quelques fonctions de d√©bogage sont incluses. Elles sont importantes, mais non essentielles pour l'effet recherch√©, donc nous les incluons simplement dans le programme.

.. code-block:: python

    from ir_rx.print_error import print_error

    ir.error_function(print_error) # Afficher les informations de d√©bogage

Enfin, nous utilisons une boucle vide comme programme principal, avec un try-except pour quitter proprement et fermer l'objet ``ir``.

.. code-block:: python

    try:
        while True:
            pass
    except KeyboardInterrupt:
        ir.close()



* `Try Statement - Python Docs <https://docs.python.org/3/reference/compound_stmts.html?#the-try-statement>`_