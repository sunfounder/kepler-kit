.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder des passionn√©s de Raspberry Pi, Arduino & ESP32 sur Facebook ! Approfondissez vos connaissances en mati√®re de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour d√©velopper vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_somato_controller:


7.11 Contr√¥leur Somatosensoriel
==================================

Si vous regardez beaucoup de films de robots, vous avez probablement vu ce genre de sc√®nes.
Le protagoniste tourne son poignet et le robot g√©ant suit ; le protagoniste serre son poing, et le robot imite, ce qui est tr√®s impressionnant.

L'utilisation de cette technologie est d√©j√† courante dans les universit√©s et les instituts de recherche, et l'arriv√©e de la 5G va consid√©rablement √©tendre ses domaines d'application. 
La chirurgie √† distance avec le robot chirurgical "da Vinci" en est un exemple typique.

Un syst√®me robotique de ce type est g√©n√©ralement compos√© de deux modules : un module de capture des mouvements humains et un module d'actionnement de bras robotique (certains sc√©narios incluent √©galement un module de communication de donn√©es).

Le MPU6050 est utilis√© ici pour impl√©menter la capture des mouvements humains (en le fixant sur un gant) et le servo est utilis√© pour repr√©senter le mouvement du bras robotique.

**Composants Requis**

Dans ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_mpu6050`
        - 1
        - 
    *   - 6
        - :ref:`cpn_servo`
        - 1
        - |link_servo_buy|

**Sch√©ma**

|sch_somato|

Le MPU6050 calcule l'angle d'attitude en fonction des valeurs d'acc√©l√©ration dans chaque direction.

Le programme contr√¥lera le servo pour effectuer l'angle de d√©viation correspondant au changement de l'angle d'attitude.

**C√¢blage**

|wiring_somatosensory_controller| 

**Code**

.. note::

    * Ouvrez le fichier ``7.11_somatosensory_controller.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.
    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite.

    * Pour des tutoriels d√©taill√©s, veuillez consulter :ref:`open_run_code_py`.
    * Vous devez utiliser les fichiers ``imu.py`` et ``vector3d.py``, assurez-vous qu'ils sont bien t√©l√©charg√©s sur le Pico W, pour un tutoriel d√©taill√©, consultez :ref:`add_libraries_py`.

.. code-block:: python

    from imu import MPU6050
    from machine import I2C, Pin
    import time
    import math

    # Initialiser la communication I2C pour l'acc√©l√©rom√®tre MPU6050
    i2c = I2C(1, sda=Pin(6), scl=Pin(7), freq=400000)
    mpu = MPU6050(i2c)

    # Initialiser le PWM pour le servo sur la broche 16 avec une fr√©quence de 50Hz
    servo = machine.PWM(machine.Pin(16))
    servo.freq(50)

    # Fonction pour mapper une valeur d'une plage √† une autre
    def interval_mapping(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    # Fonction pour calculer la distance euclidienne entre deux points
    def dist(a, b):
        return math.sqrt((a * a) + (b * b))

    # Fonction pour calculer la rotation autour de l'axe y
    def get_y_rotation(x, y, z):
        radians = math.atan2(x, dist(y, z))
        return -math.degrees(radians)

    # Fonction pour calculer la rotation autour de l'axe x
    def get_x_rotation(x, y, z):
        radians = math.atan2(y, dist(x, z))
        return math.degrees(radians)

    # Fonction pour contr√¥ler le servo en fonction de l'angle
    # Mappe l'angle (0-180) au cycle de travail PWM pour le contr√¥le du servo
    def servo_write(pin, angle):
        pulse_width = interval_mapping(angle, 0, 180, 0.5, 2.5)  # Mapper l'angle √† une largeur d'impulsion en ms (0,5 ms √† 2,5 ms)
        duty = int(interval_mapping(pulse_width, 0, 20, 0, 65535))  # Convertir la largeur d'impulsion en cycle de travail PWM (0-65535)
        pin.duty_u16(duty)  # R√©gler le cycle de travail pour le PWM du servo

    # D√©finir le nombre de lectures √† moyenner pour un mouvement plus fluide
    times = 25

    # Boucle principale
    while True:
        total = 0
        # Prendre plusieurs lectures pour moyenner l'angle pour plus de fluidit√©
        for i in range(times):
            angle = get_y_rotation(mpu.accel.x, mpu.accel.y, mpu.accel.z)  # Obtenir la valeur de rotation de l'axe y √† partir de l'acc√©l√©rom√®tre
            total += angle  # Accumuler les lectures

        average_angle = int(total / times)  # Calculer l'angle moyen
        # Mapper l'angle moyen (-90 √† 90) √† la plage de mouvement du servo (0 √† 180 degr√©s)
        servo_write(servo, interval_mapping(average_angle, -90, 90, 0, 180))

        time.sleep(0.1)  # Ajouter un petit d√©lai pour r√©duire les vibrations dans le mouvement du servo

D√®s que le programme est ex√©cut√©, le servo pivotera √† gauche et √† droite lorsque vous inclinerez le MPU6050 (ou tournerez votre poignet s'il est fix√© sur un gant).
