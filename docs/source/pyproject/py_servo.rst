.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino & ESP32 sur Facebook ! Plongez dans le monde du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_servo:

3.7 Servomoteur Oscillant
=================================

Dans ce kit, en plus de la LED et du buzzer passif, il y a √©galement un dispositif contr√¥l√© par signal PWM, le Servomoteur.

Le servomoteur est un dispositif de positionnement (angle), adapt√© aux syst√®mes de contr√¥le n√©cessitant des changements constants d'angle tout en pouvant le maintenir. Il est largement utilis√© dans les jouets t√©l√©command√©s haut de gamme, comme les avions, mod√®les de sous-marins, et robots t√©l√©command√©s.

Maintenant, essayons de faire osciller le servomoteur !

* :ref:`cpn_servo`

**Composants Requis**

Dans ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_servo`
        - 1
        - |link_servo_buy|

**Sch√©ma**

|sch_servo|

**C√¢blage**

|wiring_servo|

* Le fil orange est le signal et est connect√© √† GP15.
* Le fil rouge est le VCC et est connect√© √† VBUS (5V).
* Le fil marron est la masse (GND) et est connect√© √† GND.

.. 1. Fixez le bras du servomoteur sur l'axe de sortie. Si n√©cessaire, fixez-le avec des vis.
.. #. Connectez **VBUS** (et non 3V3) et GND du Pico W au bus d'alimentation de la breadboard.
.. #. Connectez le fil rouge du servomoteur au bus d'alimentation positif avec un cavalier.
.. #. Connectez le fil jaune du servomoteur √† la broche GP15 avec un fil de connexion.
.. #. Connectez le fil marron du servomoteur au bus d'alimentation n√©gatif avec un fil de connexion.

**Code**

.. note::

    * Ouvrez le fichier ``3.7_swinging_servo.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite.

    * Pour des tutoriels d√©taill√©s, veuillez consulter :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    servo = machine.PWM(machine.Pin(15))
    servo.freq(50)

    def interval_mapping(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    def servo_write(pin,angle):
        pulse_width=interval_mapping(angle, 0, 180, 0.5,2.5)
        duty=int(interval_mapping(pulse_width, 0, 20, 0,65535))
        pin.duty_u16(duty)

    while True:
        for angle in range(180):
            servo_write(servo,angle)
            utime.sleep_ms(20)
        for angle in range(180,-1,-1):
            servo_write(servo,angle)
            utime.sleep_ms(20)


Lorsque le programme est en cours d'ex√©cution, vous verrez le bras du servomoteur osciller d'avant en arri√®re de 0¬∞ √† 180¬∞.

Le programme continuera de fonctionner gr√¢ce √† la boucle ``while True``, il faudra appuyer sur le bouton Arr√™ter pour mettre fin au programme.

**Comment √ßa marche ?**

Nous avons d√©fini la fonction ``servo_write()`` pour faire fonctionner le servomoteur.

Cette fonction a deux param√®tres :

* ``pin``, la broche GPIO qui contr√¥le le servomoteur.
* ``Angle``, l'angle de sortie de l'axe.

Dans cette fonction, ``interval_mapping()`` est appel√© pour mapper la plage d'angle de 0 ~ 180 √† la plage de largeur d'impulsion de 0.5 ~ 2.5ms.

.. code-block:: python

    pulse_width=interval_mapping(angle, 0, 180, 0.5,2.5)

Pourquoi 0.5~2.5 ? Cela est d√©termin√© par le mode de fonctionnement du servomoteur.

:ref:`cpn_servo`

Ensuite, la largeur d'impulsion est convertie de la p√©riode au rapport cyclique. Comme ``duty_u16()`` ne peut pas accepter de d√©cimales (la valeur ne peut pas √™tre de type float), nous avons utilis√© ``int()`` pour forcer la conversion en type entier.

.. code-block:: python

    duty=int(interval_mapping(pulse_width, 0, 20, 0,65535))



Enfin, nous √©crivons la valeur du rapport cyclique dans ``duty_u16()``.
