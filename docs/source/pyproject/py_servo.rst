.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el fascinante mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas posventa y desaf√≠os t√©cnicos con ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones Exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones en temporadas festivas.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.

.. _py_servo:

3.7 Movimiento Oscilante del Servo
======================================

En este kit, adem√°s de un LED y un zumbador pasivo, tambi√©n hay un dispositivo controlado mediante una se√±al PWM: el servo.

El servo es un dispositivo de control de posici√≥n (√°ngulo), ideal para sistemas que requieren cambios constantes de √°ngulo que se mantengan estables. Se utiliza ampliamente en juguetes de control remoto de alta gama, como aviones, modelos de submarinos y robots de control remoto.

¬°Ahora intentemos hacer que el servo oscile!

* :ref:`cpn_servo`

**Componentes Necesarios**

En este proyecto, necesitaremos los siguientes componentes.

Es muy conveniente adquirir un kit completo; aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPONENTE	
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_servo`
        - 1
        - |link_servo_buy|

**Esquem√°tico**

|sch_servo|

**Conexiones**

|wiring_servo|

* El cable naranja es la se√±al y se conecta a GP15.
* El cable rojo es VCC y se conecta a VBUS (5V).
* El cable marr√≥n es GND y se conecta a GND.

.. 1. Inserta el Brazo del Servo en el eje de salida del Servo. Si es necesario, f√≠jalo con tornillos.
.. #. Conecta **VBUS** (no 3V3) y GND del Pico W al bus de alimentaci√≥n de la breadboard.
.. #. Conecta el cable rojo del servo al bus positivo de alimentaci√≥n con un puente.
.. #. Conecta el cable amarillo del servo al pin GP15 con un puente.
.. #. Conecta el cable marr√≥n del servo al bus negativo de alimentaci√≥n con un puente.

**C√≥digo**

.. note::

    * Abre el archivo ``3.7_swinging_servo.py`` en la ruta de ``kepler-kit-main/micropython`` o copia este c√≥digo en Thonny, luego haz clic en "Run Current Script" o simplemente presiona F5 para ejecutarlo.

    * No olvides seleccionar el int√©rprete "MicroPython (Raspberry Pi Pico)" en la esquina inferior derecha.

    * Para tutoriales detallados, consulta :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    servo = machine.PWM(machine.Pin(15))
    servo.freq(50)

    def interval_mapping(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    def servo_write(pin, angle):
        pulse_width = interval_mapping(angle, 0, 180, 0.5, 2.5)
        duty = int(interval_mapping(pulse_width, 0, 20, 0, 65535))
        pin.duty_u16(duty)

    while True:
        for angle in range(180):
            servo_write(servo, angle)
            utime.sleep_ms(20)
        for angle in range(180, -1, -1):
            servo_write(servo, angle)
            utime.sleep_ms(20)

Cuando el programa se ejecute, veremos el Brazo del Servo oscilar de un lado a otro, entre los √°ngulos de 0¬∞ a 180¬∞.

El programa se ejecutar√° de manera continua debido al bucle ``while True``; para detenerlo, es necesario presionar el bot√≥n de detenci√≥n.

**¬øC√≥mo funciona?**

Definimos la funci√≥n ``servo_write()`` para controlar el movimiento del servo.

Esta funci√≥n tiene dos par√°metros:

* ``pin``, el pin GPIO que controla el servo.
* ``angle``, el √°ngulo de salida del eje.

En esta funci√≥n, se llama a ``interval_mapping()`` para mapear el rango de √°ngulos de 0 a 180 en el rango de ancho de pulso de 0.5 a 2.5ms.

.. code-block:: python

    pulse_width = interval_mapping(angle, 0, 180, 0.5, 2.5)

¬øPor qu√© el rango es 0.5~2.5? Esto est√° determinado por el modo de funcionamiento del Servo.

:ref:`cpn_servo`

Luego, convertimos el ancho de pulso a per√≠odo de duty. Dado que ``duty_u16()`` no acepta valores decimales (el valor no puede ser de tipo float), usamos ``int()`` para forzar la conversi√≥n de duty a un tipo int.

.. code-block:: python

    duty = int(interval_mapping(pulse_width, 0, 20, 0, 65535))

Finalmente, escribimos el valor de duty en ``duty_u16()``.
