.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino & ESP32 Enthusiasts sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux d√©monstrations exclusives.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et concours** : Participez √† des concours et des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_neopixel:

3.3 Bande LED RGB
======================

Le WS2812 est une source lumineuse LED √† contr√¥le intelligent o√π le circuit de contr√¥le et la puce RGB sont int√©gr√©s dans un bo√Ætier de composants 5050. 
Il comprend en interne un verrouillage de donn√©es num√©riques et un circuit de conduite d'amplification de signal. 
Il dispose √©galement d'un oscillateur interne de pr√©cision et d'une partie de contr√¥le de courant constant programmable, 
garantissant efficacement la coh√©rence de la couleur de chaque point lumineux.

Le protocole de transfert de donn√©es utilise un mode de communication NZR unique. 
Apr√®s la r√©initialisation de l'alimentation du pixel, le port DIN re√ßoit les donn√©es du contr√¥leur. Le premier pixel collecte les donn√©es initiales de 24 bits puis les envoie au verrouillage de donn√©es interne, tandis que les autres donn√©es, remodel√©es par le circuit interne d'amplification du signal, sont envoy√©es au pixel suivant via le port DO. Apr√®s la transmission de chaque pixel, le signal est r√©duit de 24 bits. 
Les pixels adoptent une technologie de transmission de remodelage automatique, ce qui permet de rendre le nombre de pixels en cascade illimit√© tant que la vitesse de transmission du signal est maintenue.


* :ref:`cpn_ws2812`

**Composants requis**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_ws2812`
        - 1
        - |link_ws2812_buy|

**Sch√©ma**

|sch_ws2812|

**C√¢blage**

|wiring_ws2812|

.. warning::
    Une chose √† surveiller est le courant.

    Bien que la bande LED avec n'importe quel nombre de LED puisse √™tre utilis√©e avec Pico W, la puissance de son pin VBUS est limit√©e.
    Ici, nous utiliserons huit LED, ce qui est s√ªr.
    Mais si vous souhaitez utiliser plus de LED, il faudra ajouter une alimentation s√©par√©e.

**Code**

.. note::

    * Ouvrez le fichier ``3.3_rgb_led_strip.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.
    
    * Vous devez utiliser la biblioth√®que appel√©e ``ws2812.py``, v√©rifiez si elle a √©t√© t√©l√©charg√©e sur Pico W. Pour un tutoriel d√©taill√©, consultez :ref:`add_libraries_py`.

.. code-block:: python

    import machine 
    from ws2812 import WS2812

    ws = WS2812(machine.Pin(0),8)

    ws[0] = [64,154,227]
    ws[1] = [128,0,128]
    ws[2] = [50,150,50]
    ws[3] = [255,30,30]
    ws[4] = [0,128,255]
    ws[5] = [99,199,0]
    ws[6] = [128,128,128]
    ws[7] = [255,100,0]
    ws.write()


Choisissons quelques couleurs pr√©f√©r√©es et affichons-les sur la bande LED RGB !

**Comment √ßa marche ?**

Dans la biblioth√®que ws2812, nous avons int√©gr√© les fonctions associ√©es dans la classe WS2812.

Vous pouvez utiliser la bande LED RGB avec l'instruction suivante.

.. code-block:: python

    from ws2812 import WS2812

D√©clarez un objet de type WS2812, nomm√© "ws", qui est connect√© √† "pin", avec "number" LED RGB sur la bande WS2812.

.. code-block:: python

    ws = WS2812(pin,number)

ws est un objet tableau, chaque √©l√©ment correspond √† une LED RGB sur la bande WS2812, par exemple, ws[0] est la premi√®re et ws[7] est la huiti√®me.

Nous pouvons attribuer des valeurs de couleur √† chaque LED RGB, ces valeurs doivent √™tre des couleurs 24 bits (repr√©sent√©es par six chiffres hexad√©cimaux) ou une liste de trois valeurs RGB sur 8 bits.

Par exemple, la valeur pour le rouge est "0xFF0000" ou "[255,0,0]".

.. code-block:: python

    ws[i] = color value

Ensuite, utilisez cette instruction pour √©crire la couleur sur la bande LED et l'allumer.

.. code-block:: python

    ws.write()

Vous pouvez √©galement utiliser directement l'instruction suivante pour faire en sorte que toutes les LED s'allument avec la m√™me couleur.

.. code-block:: python

    ws.write_all(color value)


**En savoir plus**

Nous pouvons g√©n√©rer al√©atoirement des couleurs et cr√©er une lumi√®re fluide et color√©e.

.. note::

    * Ouvrez le fichier ``3.3_rgb_led_strip_2.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine 
    from ws2812 import WS2812
    import utime
    import urandom

    ws = WS2812(machine.Pin(0),8)

    def flowing_light():
        for i in range(7,0,-1):
            ws[i] = ws[i-1]
        ws[0] = int(urandom.uniform(0, 0xFFFFFF))  
        ws.write()
        utime.sleep_ms(80)

    while True:
        flowing_light()
        print(ws[0])