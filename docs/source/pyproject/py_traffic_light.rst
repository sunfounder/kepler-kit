.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder pour les passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions et concours festifs** : Participez aux concours et aux promotions de f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_traffic_light:


7.6 Feu de circulation
=================================


Le `Traffic Light <https://en.wikipedia.org/wiki/Traffic_light>`_ est un dispositif de signalisation install√© aux intersections, passages pour pi√©tons et autres endroits pour r√©guler la circulation.

Les signaux de circulation sont normalis√©s par la `Convention de Vienne sur la signalisation routi√®re <https://fr.wikipedia.org/wiki/Convention_de_Vienne_sur_la_signalisation_routi%C3%A8re>`_. Ils accordent la priorit√© aux usagers en alternant des LEDs de trois couleurs standardis√©es.

* **Feu rouge** : La circulation doit s'arr√™ter devant un feu rouge clignotant, √©quivalent √† un panneau stop.
* **Feu jaune** : Un signal d'avertissement indique un passage imminent au rouge. Les feux jaunes sont interpr√©t√©s diff√©remment selon les pays (r√©gions).
* **Feu vert** : Autorise la circulation dans la direction indiqu√©e.

Dans ce projet, nous allons utiliser trois LEDs de diff√©rentes couleurs pour simuler les changements de feux de circulation et un afficheur 7 segments √† 4 chiffres pour afficher la dur√©e de chaque √©tat du feu.

**Composants requis**

Pour ce projet, nous aurons besoin des composants suivants.

Il est bien s√ªr plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.


.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 7 (220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_4_dit_7_segment`
        - 1
        - 
    *   - 7
        - :ref:`cpn_74hc595`
        - 1
        - |link_74hc595_buy|
    *   - 8
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|


**Sch√©ma**


|sch_traffic_light|


* Ce circuit est bas√© sur le :ref:`py_74hc_4dig` avec l'ajout de 3 LEDs.
* Les 3 LEDs rouges, jaunes et vertes sont connect√©es respectivement aux GP7~GP9.

**C√¢blage**


|wiring_traffic_light| 


**Code**

.. note::

    * Ouvrez le fichier ``7.6_traffic_light.py`` situ√© sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import time
    from machine import Timer

    # D√©finir la dur√©e pour chaque couleur de feu en secondes [Vert, Jaune, Rouge]
    lightTime = [30, 5, 30]

    # Codes de l'afficheur 7 segments pour les chiffres 0-9, utilisant des valeurs hexad√©cimales pour repr√©senter les segments LED
    SEGCODE = [0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f]

    # Initialiser les broches pour la communication avec le registre √† d√©calage (74HC595)
    sdi = machine.Pin(18, machine.Pin.OUT)   # Entr√©e de donn√©es s√©rie
    rclk = machine.Pin(19, machine.Pin.OUT)  # Horloge de registre (Latch)
    srclk = machine.Pin(20, machine.Pin.OUT) # Horloge de registre √† d√©calage

    # Initialiser la liste pour stocker les broches de contr√¥le des 4 chiffres de l'afficheur 7 segments
    placePin = []
    pin = [10, 13, 12, 11]  # Num√©ros de broches pour l'afficheur 4 chiffres
    for i in range(4):
        placePin.append(None)  # R√©server un espace dans la liste
        placePin[i] = machine.Pin(pin[i], machine.Pin.OUT)  # Initialiser les broches en sortie

    # Fonction pour s√©lectionner quel chiffre (0-3) afficher en contr√¥lant les broches d'anode commune
    def pickDigit(digit):
        for i in range(4):
            placePin[i].value(1)  # √âteindre tous les chiffres
        placePin[digit].value(0)  # Allumer le chiffre s√©lectionn√©

    # Fonction pour effacer l'afficheur en envoyant '0x00' au registre √† d√©calage
    def clearDisplay():
        hc595_shift(0x00)

    # Fonction pour envoyer des donn√©es au registre √† d√©calage (74HC595)
    def hc595_shift(dat):
        rclk.low()  # Abaisser la latch pour pr√©parer le d√©calage de donn√©es
        time.sleep_us(200)  # Petit d√©lai pour la stabilit√© du timing
        for bit in range(7, -1, -1):  # Parcourir chaque bit (MSB d'abord)
            srclk.low()  # Pr√©parer pour envoyer le bit suivant
            time.sleep_us(200)
            value = 1 & (dat >> bit)  # Extraire le bit actuel des donn√©es
            sdi.value(value)  # R√©gler la ligne de donn√©es sur la valeur du bit actuel
            time.sleep_us(200)
            srclk.high()  # Pulse l'horloge de d√©calage pour enregistrer le bit
            time.sleep_us(200)
        time.sleep_us(200)
        rclk.high()  # Pulse l'horloge de registre pour d√©placer les donn√©es vers la sortie

    # Fonction pour afficher un nombre sur l'afficheur 7 segments
    # Cette fonction d√©compose le nombre en ses chiffres individuels et les affiche
    def display(num):
        pickDigit(0)  # S√©lectionner l'unit√©
        hc595_shift(SEGCODE[num % 10])  # Afficher l'unit√©

        pickDigit(1)  # S√©lectionner la dizaine
        hc595_shift(SEGCODE[num % 100 // 10])  # Afficher la dizaine

        pickDigit(2)  # S√©lectionner la centaine
        hc595_shift(SEGCODE[num % 1000 // 100])  # Afficher la centaine

        pickDigit(3)  # S√©lectionner le millier
        hc595_shift(SEGCODE[num % 10000 // 1000])  # Afficher le millier

    # Configuration des LEDs du feu de circulation (Rouge, Jaune, Vert)
    # Les LEDs sont connect√©es aux broches 9 (Vert), 8 (Jaune) et 7 (Rouge)
    pin = [7, 8, 9]  # Num√©ros de broches pour les LEDs
    led = []
    for i in range(3):
        led.append(None)  # R√©server un espace dans la liste
        led[i] = machine.Pin(pin[i], machine.Pin.OUT)  # Initialiser chaque broche en sortie pour les LEDs

    # Fonction pour allumer la LED correcte en fonction de l'√©tat actuel
    # 0 = Vert, 1 = Jaune, 2 = Rouge
    def lightup(state):
        for i in range(3):
            led[i].value(0)  # √âteindre toutes les LEDs
        led[state].value(1)  # Allumer la LED s√©lectionn√©e (Vert, Jaune ou Rouge)

    # Variables li√©es au timer
    counter = 0  # Compteur pour le temps restant
    color_state = 0  # √âtat actuel du feu de circulation (0 = Vert, 1 = Jaune, 2 = Rouge)

    # Fonction de rappel d'interruption du timer pour mettre √† jour l'√©tat du feu de circulation et le compteur
    def time_count(ev):
        global counter, color_state
        counter -= 1  # R√©duire le compteur de 1 seconde
        if counter <= 0:  # Si le compteur atteint z√©ro, passer √† la couleur suivante
            color_state = (color_state + 1) % 3  # Cycle entre Vert, Jaune et Rouge
            counter = lightTime[color_state]  # R√©initialiser le compteur en fonction de la dur√©e de la nouvelle couleur

    # Initialiser un timer pour appeler la fonction time_count toutes les 1 seconde (1000ms)
    tim = Timer(period=1000, mode=Timer.PERIODIC, callback=time_count)

    # Boucle principale pour mettre √† jour l'afficheur 7 segments et les LEDs du feu de circulation
    while True:
        display(counter)  # Mettre √† jour l'afficheur avec le temps restant
        lightup(color_state)  # Mettre √† jour les LEDs du feu de circulation en fonction de la couleur actuelle


Lorsque le code est ex√©cut√©, la LED verte reste allum√©e pendant 30 secondes, la LED jaune reste allum√©e pendant 5 secondes, et la LED rouge reste allum√©e pendant 30 secondes.
