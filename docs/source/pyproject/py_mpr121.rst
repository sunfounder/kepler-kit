.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _py_mpr121:

4.3 Elektroden-Tastatur
================================

Der MPR121 ist eine hervorragende Option, wenn Sie eine Vielzahl von Ber√ºhrungsschaltern in Ihr Projekt integrieren m√∂chten. Er verf√ºgt √ºber Elektroden, die mit Leitern erweitert werden k√∂nnen. 
Wenn Sie die Elektroden an einer Banane befestigen, k√∂nnen Sie diese in einen Ber√ºhrungsschalter verwandeln.

* :ref:`cpn_mpr121`

**Erforderliche Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Bauteile.

Es ist durchaus praktisch, gleich ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Bezeichnung
        - ARTIKEL IM KIT
        - LINK
    *   - Kepler-Kit
        - 450+
        - |link_kepler_kit|

Sie k√∂nnen die Komponenten auch einzeln √ºber die unten stehenden Links beziehen.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - KOMPONENTE	
        - ANZAHL
        - LINK
    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Micro-USB-Kabel
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Mehrere
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_mpr121`
        - 1
        - 

**Schaltplan**

|sch_mpr121|

**Verdrahtung**

|wiring_mpr121|

**Code**

.. note::

    * √ñffnen Sie die Datei ``4.3_electrode_keyboard.py`` im Verzeichnis ``kepler-kit-main/micropython`` oder kopieren Sie diesen Code in Thonny. Anschlie√üend klicken Sie auf "Aktuelles Skript ausf√ºhren" oder dr√ºcken einfach F5.

    * Vergessen Sie nicht, den "MicroPython (Raspberry Pi Pico)"-Interpreter in der rechten unteren Ecke auszuw√§hlen.

    * F√ºr detaillierte Anleitungen verweisen wir auf :ref:`open_run_code_py`.

    * Sie ben√∂tigen die Bibliothek ``mpr121.py``. Pr√ºfen Sie, ob diese bereits auf dem Pico W hochgeladen wurde. Eine ausf√ºhrliche Anleitung finden Sie unter :ref:`add_libraries_py`.

.. code-block:: python

    from mpr121 import MPR121
    from machine import Pin, I2C
    import time

    i2c = I2C(1, sda=Pin(6), scl=Pin(7))
    mpr = MPR121(i2c)

    # √úberpr√ºfen aller Tasten
    while True:
        value = mpr.get_all_states()
        if len(value) != 0:
            print(value)
        time.sleep_ms(100)

Nachdem das Programm ausgef√ºhrt wurde, k√∂nnen Sie die zw√∂lf Elektroden am MPR121 ber√ºhren, und die ber√ºhrten Elektroden werden ausgegeben.

Sie k√∂nnen die Elektroden erweitern, um andere Leiter wie Obst, Draht, Folie usw. anzuschlie√üen. Dies er√∂ffnet Ihnen weitere M√∂glichkeiten zur Ausl√∂sung dieser Elektroden.

**Funktionsweise?**

In der mpr121-Bibliothek haben wir die Funktionalit√§t in die Klasse ``MPR121`` integriert.

.. code-block:: python

    from mpr121 import MPR121

Der MPR121 ist ein I2C-Modul, f√ºr dessen Initialisierung ein Satz I2C-Pins definiert werden muss. Zu diesem Zeitpunkt werden die Anfangszust√§nde der Elektroden des Moduls aufgezeichnet. Falls die Elektroden erweitert werden, muss das Beispiel erneut ausgef√ºhrt werden, um die Anfangswerte zur√ºckzusetzen.

.. code-block:: python

    from machine import Pin, I2C
    i2c = I2C(1, sda=Pin(6), scl=Pin(7))
    mpr = MPR121(i2c)

* `Inter-Integrated Circuit - Wikipedia <https://de.wikipedia.org/wiki/I%C2%B2C>`_

Verwenden Sie dann ``mpr.get_all_states()`` um zu lesen, ob die Elektroden ausgel√∂st werden. Wenn die Elektroden 2 und 3 ausgel√∂st werden, wird der Wert ``[2, 3]`` erzeugt.

.. code-block::

    while True:
        value = mpr.get_all_states()
        if len(value) ! = 0:
            print(value)
        time.sleep_ms(100)

Sie k√∂nnen auch ``mpr.is_touched(electrode)`` verwenden, um eine bestimmte Elektrode zu √ºberpr√ºfen. Wenn sie ausgel√∂st wird, gibt die Methode ``True`` zur√ºck, andernfalls ``False``.

.. code-block:: python

    while True:
        value = mpr.is_touched(0)
        print(value)
        time.sleep_ms(100)
