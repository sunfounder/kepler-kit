.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez vos probl√®mes apr√®s-vente et vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_mpr121:

4.3 Clavier √† √©lectrodes
================================

Le MPR121 est un excellent choix si vous souhaitez ajouter un grand nombre d'interrupteurs tactiles √† votre projet. Il dispose d'√©lectrodes qui peuvent √™tre √©tendues avec des conducteurs. 
En connectant les √©lectrodes √† une banane, par exemple, vous pouvez transformer cette banane en interrupteur tactile.

* :ref:`cpn_mpr121`

**Composants requis**

Pour ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_mpr121`
        - 1
        - 

**Sch√©ma**

|sch_mpr121|

**C√¢blage**

|wiring_mpr121|

**Code**

.. note::

    * Ouvrez le fichier ``4.3_electrode_keyboard.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite.

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.
    
    * Vous devez utiliser la biblioth√®que appel√©e ``mpr121.py``, veuillez v√©rifier si elle a √©t√© t√©l√©charg√©e sur Pico W. Pour un tutoriel d√©taill√©, consultez :ref:`add_libraries_py`.

.. code-block:: python

    from mpr121 import MPR121
    from machine import Pin, I2C
    import time

    i2c = I2C(1, sda=Pin(6), scl=Pin(7))
    mpr = MPR121(i2c)

    # v√©rifiez toutes les touches
    while True:
        value = mpr.get_all_states()
        if len(value) != 0:
            print(value)
        time.sleep_ms(100)

Une fois le programme lanc√©, vous pouvez toucher les douze √©lectrodes du MPR121 avec votre main, et les √©lectrodes touch√©es seront affich√©es.

Vous pouvez √©tendre les √©lectrodes pour connecter d'autres conducteurs tels que des fruits, des fils, du papier d'aluminium, etc. Cela vous offrira plus de possibilit√©s pour d√©clencher ces √©lectrodes.

**Comment √ßa marche ?**

Dans la biblioth√®que mpr121, nous avons int√©gr√© les fonctionnalit√©s dans la classe ``MPR121``.

.. code-block:: python

    from mpr121 import MPR121

Le MPR121 est un module I2C qui n√©cessite un ensemble de broches I2C pour initialiser l'objet ``MPR121``. √Ä ce stade, l'√©tat des √©lectrodes du module sera enregistr√© comme valeurs initiales. Si les √©lectrodes sont √©tendues, l'exemple doit √™tre relanc√© pour r√©initialiser ces valeurs initiales.

.. code-block:: python

    from machine import Pin, I2C
    i2c = I2C(1, sda=Pin(6), scl=Pin(7))
    mpr = MPR121(i2c)

* `Inter-Integrated Circuit - Wikipedia <https://en.wikipedia.org/wiki/I2C>`_

Ensuite, utilisez ``mpr.get_all_states()`` pour lire si les √©lectrodes sont d√©clench√©es. Si les √©lectrodes 2 et 3 sont activ√©es, la valeur ``[2, 3]`` sera g√©n√©r√©e.


.. code-block::

    while True:
        value = mpr.get_all_states()
        if len(value) ! = 0:
            print(value)
        time.sleep_ms(100)

Vous pouvez √©galement utiliser ``mpr.is_touched(electrode)`` pour d√©tecter une √©lectrode sp√©cifique. Lorsqu'elle est d√©clench√©e, elle renvoie ``True``, sinon elle renvoie ``False``.

.. code-block:: python

    while True:
        value = mpr.is_touched(0)
        print(value)
        time.sleep_ms(100)