.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas posventa y desaf√≠os t√©cnicos con ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones Exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones durante festividades.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.

.. _py_mpr121:

4.3 Teclado de Electrodos
================================

El MPR121 es una excelente opci√≥n si deseas agregar una gran cantidad de 
interruptores t√°ctiles a tu proyecto. Este m√≥dulo cuenta con electrodos 
que pueden extenderse mediante conductores. Por ejemplo, si conectas los 
electrodos a un pl√°tano, puedes convertirlo en un interruptor t√°ctil.

* :ref:`cpn_mpr121`

**Componentes Necesarios**

Para este proyecto, necesitaremos los siguientes componentes. 

Es muy conveniente adquirir un kit completo; aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPONENTE	
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_mpr121`
        - 1
        - 

**Esquema**

|sch_mpr121|

**Conexiones**

|wiring_mpr121|

**C√≥digo**

.. note::

    * Abre el archivo ``4.3_electrode_keyboard.py`` en la ruta de ``kepler-kit-main/micropython`` o copia este c√≥digo en Thonny, luego haz clic en "Run Current Script" o simplemente presiona F5 para ejecutarlo.

    * No olvides seleccionar el int√©rprete "MicroPython (Raspberry Pi Pico)" en la esquina inferior derecha.

    * Para tutoriales detallados, consulta :ref:`open_run_code_py`.

    * Aqu√≠ necesitas usar la biblioteca llamada ``mpr121.py``. Verifica si ha sido cargada en Pico W. Para un tutorial detallado, consulta :ref:`add_libraries_py`.

.. code-block:: python

    from mpr121 import MPR121
    from machine import Pin, I2C
    import time

    i2c = I2C(1, sda=Pin(6), scl=Pin(7))
    mpr = MPR121(i2c)

    # comprobar todas las teclas
    while True:
        value = mpr.get_all_states()
        if len(value) != 0:
            print(value)
        time.sleep_ms(100)

Una vez que el programa est√© en ejecuci√≥n, puedes tocar los doce electrodos en el MPR121 con la mano, y los electrodos tocados se imprimir√°n en pantalla.

Puedes extender los electrodos conectando otros conductores como frutas, cables, l√°minas de aluminio, etc. Esto te permitir√° nuevas formas de activar los electrodos.

**¬øC√≥mo funciona?**

En la biblioteca mpr121, hemos integrado la funcionalidad en la clase ``MPR121``.

.. code-block:: python

    from mpr121 import MPR121

MPR121 es un m√≥dulo I2C que requiere un conjunto de pines I2C para inicializar el objeto ``MPR121``. En este punto, el estado de los electrodos del m√≥dulo se registrar√° como valores iniciales. Si los electrodos se extienden, ser√° necesario volver a ejecutar el ejemplo para restablecer los valores iniciales.

.. code-block:: python

    from machine import Pin, I2C
    i2c = I2C(1, sda=Pin(6), scl=Pin(7))
    mpr = MPR121(i2c)

* `Inter-Integrated Circuit - Wikipedia <https://en.wikipedia.org/wiki/I2C>`_

Luego usa ``mpr.get_all_states()`` para leer si los electrodos est√°n activados. Si los electrodos 2 y 3 est√°n activados, se generar√° el valor ``[2, 3]``.

.. code-block::

    while True:
        value = mpr.get_all_states()
        if len(value) ! = 0:
            print(value)
        time.sleep_ms(100)

Tambi√©n puedes usar ``mpr.is_touched(electrode)`` para detectar un electrodo espec√≠fico. Cuando se activa, devuelve ``True``; de lo contrario, devuelve ``False``.

.. code-block:: python

    while True:
        value = mpr.is_touched(0)
        print(value)
        time.sleep_ms(100)