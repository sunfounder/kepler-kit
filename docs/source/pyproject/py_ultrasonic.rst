.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder pour les passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et relevez les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions et concours festifs** : Participez aux concours et aux promotions de f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_ultrasonic:

6.1 Mesure de la distance
======================================

Le module de capteur ultrasonique fonctionne selon le principe des syst√®mes sonar et radar pour d√©terminer la distance d'un objet.

* :ref:`cpn_ultrasonic`

**Composants requis**

Pour ce projet, nous aurons besoin des composants suivants.

Il est bien s√ªr plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.


.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_ultrasonic`
        - 1
        - |link_ultrasonic_buy|


**Sch√©ma**

|sch_ultrasonic|

**C√¢blage**

|wiring_ultrasonic|

**Code**

.. note::

    * Ouvrez le fichier ``6.1_measuring_distance.py`` situ√© sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import time

    TRIG = machine.Pin(17,machine.Pin.OUT)
    ECHO = machine.Pin(16,machine.Pin.IN)

    def distance():
        TRIG.low()
        time.sleep_us(2)
        TRIG.high()
        time.sleep_us(10)
        TRIG.low()
        while not ECHO.value():
            pass
        time1 = time.ticks_us()
        while ECHO.value():
            pass
        time2 = time.ticks_us()
        during = time.ticks_diff(time2,time1)
        return during * 340 / 2 / 10000

    while True:
        dis = distance()
        print ('Distance: %.2f' % dis)
        time.sleep_ms(300)

Une fois le programme lanc√©, la console affichera la distance d√©tect√©e par le capteur ultrasonique par rapport √† l'obstacle situ√© en face.

**Comment √ßa marche ?**

Les capteurs ultrasoniques produisent des ondes sonores de haute fr√©quence (ultrasons) √©mises par la sonde √©mettrice. Lorsque cette onde ultrasonique rencontre un objet, elle est r√©fl√©chie sous forme d'√©cho, d√©tect√© par la sonde r√©ceptrice. En calculant le temps √©coul√© entre l'√©mission et la r√©ception, on peut d√©terminer la distance.
Sur cette base, la fonction ``distance()`` peut √™tre d√©finie.

.. code-block:: python

    def distance():
        TRIG.low()
        time.sleep_us(2)
        TRIG.high()
        time.sleep_us(10)
        TRIG.low()
        while not ECHO.value():
            pass
        time1 = time.ticks_us()
        while ECHO.value():
            pass
        time2 = time.ticks_us()
        during = time.ticks_diff(time2,time1)
        return during * 340 / 2 / 10000

* Parmi ces lignes, les premi√®res servent √† transmettre une onde ultrasonique de 10 ¬µs.

.. code-block:: python

    TRIG.low()
    time.sleep_us(2)
    TRIG.high()
    time.sleep_us(10)
    TRIG.low()

* Ensuite, le programme se met en pause et enregistre l'heure actuelle apr√®s l'√©mission de l'onde ultrasonique.

.. code-block:: python

        while not ECHO.value():
            pass
        time1 = time.ticks_us()

* Par la suite, le programme se suspend √† nouveau. Apr√®s avoir re√ßu l'√©cho, l'heure actuelle est enregistr√©e une seconde fois.

.. code-block:: python

        while ECHO.value():
            pass
        time2 = time.ticks_us()

* Enfin, en fonction de la diff√©rence de temps entre les deux enregistrements, la vitesse du son (340 m/s) est multipli√©e par le temps pour obtenir le double de la distance entre le module ultrasonique et l'obstacle (c'est-√†-dire un aller-retour des ondes ultrasoniques entre le module et l'obstacle). En convertissant les unit√©s en centim√®tres, nous obtenons la valeur de retour souhait√©e.

.. code-block:: python

        during = time.ticks_diff(time2,time1)
        return during * 340 / 2 / 10000

Notez que le capteur ultrasonique met en pause le programme lorsqu'il fonctionne, ce qui peut entra√Æner des ralentissements lorsqu'on √©crit des projets plus complexes.

