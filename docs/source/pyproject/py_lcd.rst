.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Assistance d'experts** : R√©solvez vos probl√®mes apr√®s-vente et vos d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_lcd:

3.4 Afficheur √† Cristaux Liquides (LCD)
=============================================

Le LCD1602 est un afficheur √† cristaux liquides de type caract√®re, capable 
d'afficher 32 caract√®res (16*2) simultan√©ment.

Comme nous le savons tous, bien que les √©crans LCD et d'autres affichages 
enrichissent grandement l'interaction homme-machine, ils partagent une 
faiblesse commune. Lorsqu'ils sont connect√©s √† un contr√¥leur, plusieurs 
E/S seront occup√©es, ce qui peut limiter les autres fonctionnalit√©s du 
contr√¥leur. C'est pourquoi le LCD1602 avec un bus I2C a √©t√© d√©velopp√© pour 
r√©soudre ce probl√®me.

* :ref:`cpn_i2c_lcd`
* `Inter-Integrated Circuit - Wikipedia <https://en.wikipedia.org/wiki/I2C>`_


|pin_i2c|

Nous utiliserons ici l'interface I2C0 pour contr√¥ler le LCD1602 et afficher du texte.


**Composants requis**

Pour ce projet, nous aurons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_i2c_lcd`
        - 1
        - |link_i2clcd1602_buy|

**Sch√©ma**

|sch_lcd|

**C√¢blage**

|wiring_lcd|

**Code**

.. note::

    * Ouvrez le fichier ``3.4_liquid_crystal_display.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Run Current Script" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`. 
    
    * Vous devez utiliser la biblioth√®que appel√©e ``lcd1602.py``, assurez-vous qu'elle a √©t√© t√©l√©charg√©e sur le Pico W. Pour un tutoriel d√©taill√©, reportez-vous √† :ref:`add_libraries_py`.


.. code-block:: python

    from machine import I2C, Pin
    from lcd1602 import LCD
    import time

    # Initialiser la communication I2C;
    i2c = I2C(1, sda=Pin(6), scl=Pin(7), freq=400000)

    # Cr√©er un objet LCD pour interagir avec l'afficheur LCD1602
    lcd = LCD(i2c)

    # Afficher le premier message sur le LCD
    # Utiliser '\n' pour cr√©er une nouvelle ligne.
    string = "SunFounder\n    LCD Tutorial"
    lcd.message(string)
    # Attendre 2 secondes
    time.sleep(2)
    # Effacer l'√©cran
    lcd.clear()

    # Afficher le deuxi√®me message sur le LCD
    string = "Hello\n  World!"
    lcd.message(string)
    # Attendre 5 secondes
    time.sleep(5)
    # Effacer l'√©cran avant de quitter
    lcd.clear()

Apr√®s l'ex√©cution du programme, vous verrez appara√Ætre deux lignes de texte sur le LCD √† tour de r√¥le, puis elles dispara√Ætront.

.. note:: Lorsque le code est en cours d'ex√©cution, si l'√©cran est vide, vous pouvez ajuster le potentiom√®tre √† l'arri√®re pour augmenter le contraste.

**Comment √ßa fonctionne ?**

#. Configuration de la communication I2C

   Le module ``machine`` est utilis√© pour configurer la communication I2C. Les broches SDA (donn√©es s√©rie) et SCL (horloge s√©rie) sont d√©finies (broches 20 et 21 respectivement), avec une fr√©quence I2C de 400kHz.

   .. code-block:: python
      
      from machine import I2C, Pin
      i2c = I2C(1, sda=Pin(6), scl=Pin(7), freq=400000)

#. Initialisation de l'afficheur LCD

   La classe ``LCD`` du module ``lcd1602`` est instanci√©e. Cette classe g√®re la communication avec l'afficheur LCD via I2C. Un objet ``LCD`` est cr√©√© en utilisant l'objet ``i2c``.

   Pour plus d'informations sur l'utilisation de la biblioth√®que ``lcd1602``, veuillez vous r√©f√©rer √† ``lcd1602.py``.

   .. code-block:: python
      
      from lcd1602 import LCD
      lcd = LCD(i2c)

#. Affichage de messages sur le LCD

   La m√©thode ``message`` de l'objet ``LCD`` est utilis√©e pour afficher du texte √† l'√©cran. Le caract√®re ``\n`` permet de cr√©er une nouvelle ligne sur le LCD. La fonction ``time.sleep()`` suspend l'ex√©cution pour un nombre de secondes sp√©cifi√©.

   .. code-block:: python
      
      string = "SunFounder\n    LCD Tutorial"
      lcd.message(string)
      time.sleep(2)
      lcd.clear()

#. Effacement de l'√©cran

   La m√©thode ``clear`` de l'objet ``LCD`` est appel√©e pour effacer le texte affich√© √† l'√©cran.

   .. code-block:: python
      
      lcd.clear()

#. Affichage d'un deuxi√®me message

   Un nouveau message est affich√©, suivi d'un d√©lai avant d'effacer √† nouveau l'√©cran.

   .. code-block:: python
      
      string = "Hello\n  World!"
      lcd.message(string)
      time.sleep(5)
      lcd.clear()

