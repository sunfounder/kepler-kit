.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _py_fade:

2.3 Abklingende LED
========================

Bislang haben wir lediglich zwei Arten von Ausgangssignalen verwendet: hohes und niedriges Signalniveau, auch als EIN und AUS bezeichnet. Das nennen wir digitalen Ausgang.
In der Praxis arbeiten jedoch viele Ger√§te nicht ausschlie√ülich mit diesen zwei Zust√§nden, sondern ben√∂tigen differenziertere Steuerungen, wie etwa die Geschwindigkeitsregelung eines Motors oder die Helligkeitsanpassung einer Schreibtischlampe.
Fr√ºher wurden daf√ºr Schieberegler zur Widerstandseinstellung genutzt, was allerdings als unzuverl√§ssig und ineffizient gilt.
Deshalb hat sich die Pulsweitenmodulation (PWM) als praktikable L√∂sung f√ºr solche komplexen Anforderungen etabliert.

Ein Puls ist im Kontext digitaler Ausg√§nge ein Signal, das sowohl ein hohes als auch ein niedriges Niveau enth√§lt. Die Breite dieser Pulse kann durch Ver√§nderung der Schaltfrequenz zwischen EIN und AUS angepasst werden.

Innerhalb einer kurzen Zeitspanne ‚Äì etwa 20 Millisekunden, die der visuellen Speicherzeit der meisten Menschen entspricht ‚Äì l√§sst sich eine LED ein- und wieder ausschalten, ohne dass uns das Auge den Wechsel als solchen wahrnimmt. Allerdings erscheint die Helligkeit der LED dann etwas reduziert.
W√§hrend dieser Phase gilt: Je l√§nger die LED leuchtet, desto heller erscheint sie.
Mit anderen Worten, je breiter der Puls im gegebenen Zyklus ist, desto gr√∂√üer ist die vom Mikrocontroller ausgegebene elektrische Signalst√§rke.
Das ist der Mechanismus, mit dem PWM die Helligkeit der LED (oder die Geschwindigkeit des Motors) steuert.

* `Pulsweitenmodulation ‚Äì Wikipedia <https://de.wikipedia.org/wiki/Pulsweitenmodulation>`_

Beim Einsatz von PWM mit dem Pico W gibt es einige Besonderheiten zu beachten. Betrachten wir hierzu folgendes Bild:

|pin_pwm|

Der Pico W bietet f√ºr jeden GPIO-Pin Unterst√ºtzung f√ºr PWM, allerdings sind nur 16 unabh√§ngige PWM-Ausg√§nge (anstatt 30) verf√ºgbar. Diese sind zwischen GP0 und GP15 auf der linken Seite verteilt, und die PWM-Ausgabe der rechten GPIO-Pins ist identisch mit der der linken.

Es ist ratsam, im Code nicht denselben PWM-Kanal f√ºr unterschiedliche Anwendungen zu nutzen. So sind beispielsweise GP0 und GP16 beide PWM_0A.

Nachdem wir nun das n√∂tige Verst√§ndnis haben, wollen wir den Effekt der abklingenden LED erzielen.

* :ref:`cpn_led`

**Erforderliche Bauteile**

F√ºr dieses Projekt ben√∂tigen wir die nachstehend aufgef√ºhrten Bauteile.

Ein komplettes Set ist definitiv praktisch; hier ist der entsprechende Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name
        - Bestandteile des Sets
        - Link
    *   - Kepler Set
        - 450+
        - |link_kepler_kit|

Alternativ k√∂nnen die Komponenten auch einzeln erworben werden.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - Bauteil
        - Anzahl
        - Link

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Micro-USB-Kabel
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Mehrere
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 1 (220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|


**Schaltplan**

|sch_led|

Dieses Projekt verwendet die gleiche Schaltung wie das erste Projekt :ref:`py_led`, jedoch unterscheidet sich die Art des Signals. W√§hrend das erste Projekt digitale Hoch- und Tiefpegel (0&1) direkt von GP15 ausgibt, um die LEDs ein- oder auszuschalten, wird in diesem Projekt ein PWM-Signal von GP15 zur Helligkeitssteuerung der LED verwendet.

**Verdrahtung**

|wiring_led|

**Code**

.. note::

    * √ñffnen Sie die Datei ``2.3_fading_led.py`` im Verzeichnis ``kepler-kit-main/micropython`` oder kopieren Sie diesen Code in Thonny und klicken Sie dann auf "Aktuelles Skript ausf√ºhren" oder dr√ºcken Sie einfach F5.

    * Vergessen Sie nicht, den Interpreter "MicroPython (Raspberry Pi Pico)" in der rechten unteren Ecke auszuw√§hlen.

    * F√ºr detaillierte Anleitungen siehe :ref:`open_run_code_py`.


.. code-block:: python

    import machine
    import utime

    led = machine.PWM(machine.Pin(15))
    led.freq(1000)

    for brightness in range(0,65535,50):
        led.duty_u16(brightness)
        utime.sleep_ms(10)
    led.duty_u16(0)

Mit dem Ausf√ºhren des Codes wird die LED allm√§hlich heller.

**Funktionsweise**

Hier √§ndern wir die Helligkeit der LED, indem wir den Tastgrad des PWM-Ausgangs von GP15 variieren. Werfen wir einen Blick auf diese Codezeilen.

.. code-block:: python
    :emphasize-lines: 4,5,8

    import machine
    import utime

    led = machine.PWM(machine.Pin(15))
    led.freq(1000)

    for brightness in range(0,65535,50):
        led.duty_u16(brightness)
        utime.sleep_ms(10)
    led.duty_u16(0)

* ``led = machine.PWM(machine.Pin(15))`` definiert den Pin GP15 als PWM-Ausgang.

* Mit der Zeile ``led.freq(1000)`` wird die PWM-Frequenz eingestellt, in diesem Fall auf 1000 Hz, was bedeutet, dass ein Zyklus 1 ms (1/1000) dauert.

* ``led.duty_u16()`` legt den Tastgrad fest, der als 16-Bit-Ganzzahl (2^16=65536) repr√§sentiert ist. Eine 0 steht f√ºr einen Tastgrad von 0%, d.h. der Pin bleibt w√§hrend des gesamten Zyklus auf niedrigem Pegel. Der Wert 65535 entspricht einem Tastgrad von 100%, was bedeutet, dass der Ausgang durchgehend auf hohem Pegel ist und das Ergebnis '1' ist. Bei einem Wert von 32768 ist der Ausgang zur H√§lfte der Zeit auf hohem Pegel, wodurch die LED nur halb so hell leuchtet.
