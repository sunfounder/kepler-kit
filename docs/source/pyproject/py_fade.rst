.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete junto a otros entusiastas en el mundo de Raspberry Pi, Arduino y ESP32.

    **¬øPor qu√© unirte?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Accede anticipadamente a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones especiales.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _py_fade:

2.3 Atenuaci√≥n del LED
===========================

Hasta ahora, solo hemos utilizado dos se√±ales de salida: nivel alto y nivel bajo (tambi√©n conocidos como ENCENDIDO y APAGADO), lo cual se denomina salida digital.
Sin embargo, en muchos dispositivos del mundo real no basta con solo ENCENDER/APAGAR para su funcionamiento; por ejemplo, ajustar la velocidad de un motor o la intensidad de una l√°mpara.
Para lograr esto, antes se utilizaban resistencias variables, pero eran poco fiables y poco eficientes.
Aqu√≠ entra en juego la Modulaci√≥n por Ancho de Pulso (PWM), una soluci√≥n pr√°ctica para estos problemas.

Un pulso es una salida digital que contiene un nivel alto y un nivel bajo. El ancho del pulso se ajusta variando la velocidad de ENCENDIDO/APAGADO de los pines.

Si en un breve periodo (por ejemplo, 20 ms, que es el tiempo de persistencia visual de la mayor√≠a de las personas), encendemos, apagamos y volvemos a encender un LED, no percibiremos el apagado, sino que veremos una ligera reducci√≥n en su brillo.
Cuanto m√°s tiempo est√© encendido el LED dentro de ese per√≠odo, mayor ser√° su brillo.
En otras palabras, en cada ciclo, cuanto mayor es el ancho del pulso, mayor es la "intensidad de se√±al" de salida del microcontrolador.
As√≠ es como PWM controla el brillo de un LED (o la velocidad de un motor).

* `Pulse-width modulation - Wikipedia <https://en.wikipedia.org/wiki/Pulse-width_modulation>`_

Es importante tener en cuenta algunos detalles al utilizar PWM en el Pico W. Observemos esta imagen:

|pin_pwm|

El Pico W admite PWM en cada pin GPIO, aunque en realidad dispone de 16 salidas PWM independientes (en lugar de 30), distribuidas entre GP0 a GP15 a la izquierda, y el PWM de los pines GPIO de la derecha es id√©ntico al de la izquierda.

Es fundamental evitar configurar el mismo canal PWM para diferentes prop√≥sitos en el c√≥digo. Por ejemplo, GP0 y GP16 comparten PWM_0A.

Vamos a intentar crear el efecto de atenuaci√≥n en un LED despu√©s de comprender esta informaci√≥n.

* :ref:`cpn_led`

**Componentes Requeridos**

En este proyecto, necesitamos los siguientes componentes.

Es conveniente adquirir un kit completo; aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N.¬∫
        - COMPONENTE
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 1(220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|

**Esquema**

|sch_led|

Este proyecto usa el mismo circuito que el primer proyecto :ref:`py_led`, pero con un tipo de se√±al diferente. El primer proyecto usaba niveles digitales alto y bajo (0 y 1) directamente desde GP15 para encender o apagar los LEDs; aqu√≠ se usa PWM en GP15 para controlar el brillo del LED.

**Conexi√≥n**

|wiring_led|

**C√≥digo**

.. note::

    * Abre el archivo ``2.3_fading_led.py`` en la ruta ``kepler-kit-main/micropython`` o copia este c√≥digo en Thonny, luego haz clic en "Run Current Script" o simplemente presiona F5 para ejecutarlo.

    * No olvides seleccionar el int√©rprete "MicroPython (Raspberry Pi Pico)" en la esquina inferior derecha.

    * Para tutoriales detallados, consulta :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    led = machine.PWM(machine.Pin(15))
    led.freq(1000)

    for brightness in range(0,65535,50):
        led.duty_u16(brightness)
        utime.sleep_ms(10)
    led.duty_u16(0)


El LED se volver√° gradualmente m√°s brillante conforme se ejecuta el c√≥digo.

**¬øC√≥mo funciona?**

Aqu√≠, variamos el brillo del LED ajustando el ciclo de trabajo de la salida PWM en GP15. Observemos estas l√≠neas:

.. code-block:: python
    :emphasize-lines: 4,5,8

    import machine
    import utime

    led = machine.PWM(machine.Pin(15))
    led.freq(1000)

    for brightness in range(0,65535,50):
        led.duty_u16(brightness)
        utime.sleep_ms(10)
    led.duty_u16(0)

* ``led = machine.PWM(machine.Pin(15))`` configura el pin GP15 como salida PWM.

* La l√≠nea ``led.freq(1000)`` establece la frecuencia PWM a 1000 Hz, es decir, 1 ms (1/1000) es un ciclo.

* La l√≠nea ``led.duty_u16()`` establece el ciclo de trabajo, que es un valor de 16 bits (2^16=65536). Un valor de 0 indica un ciclo de trabajo del 0%, lo que significa que el LED est√° apagado en cada ciclo. El valor 65535 indica un ciclo de trabajo del 100%, por lo que el LED estar√° completamente encendido. Un valor de 32768 representar√≠a un 50% de ciclo de trabajo, y el LED estar√° a media intensidad.
