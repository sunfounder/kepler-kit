.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder des passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans le monde du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_fade:

2.3 Variation progressive de la LED
===================================

Jusqu'√† pr√©sent, nous avons seulement utilis√© deux signaux de sortie : niveau 
haut et niveau bas (aussi appel√©s ON et OFF), ce que l'on appelle une sortie 
num√©rique. Cependant, dans de nombreux cas pratiques, les dispositifs ne 
fonctionnent pas uniquement en mode ON/OFF, par exemple pour ajuster la vitesse 
d'un moteur ou la luminosit√© d'une lampe de bureau. Pour atteindre cet objectif, 
on utilisait autrefois un curseur pour ajuster la r√©sistance, mais cette m√©thode 
est peu fiable et inefficace. Ainsi, la modulation par largeur d'impulsion (PWM) 
est apparue comme une solution viable pour r√©soudre ces probl√®mes complexes.

Une impulsion est une sortie num√©rique comprenant un niveau haut et un niveau 
bas. La largeur d'impulsion de ces broches peut √™tre ajust√©e en modifiant la 
vitesse de passage entre ON et OFF.

Lorsque nous faisons clignoter rapidement une LED (par exemple, toutes les 20ms, 
ce qui correspond √† la p√©riode de r√©tention visuelle pour la plupart des gens), en l'allumant, en l'√©teignant, puis en la rallumant, nous ne verrons pas qu'elle s'√©teint. Cependant, la luminosit√© de la lumi√®re sera l√©g√®rement plus faible. Pendant cette p√©riode, plus la LED reste allum√©e, plus elle para√Æt lumineuse. Autrement dit, pendant le cycle, plus l'impulsion est large, plus le "signal √©lectrique" √©mis par le microcontr√¥leur est fort. C'est ainsi que la PWM contr√¥le la luminosit√© des LED (ou la vitesse d'un moteur).

* `Pulse-width modulation - Wikipedia <https://en.wikipedia.org/wiki/Pulse-width_modulation>`_

Il y a quelques points importants √† prendre en compte lorsque le Pico W utilise la PWM. Jetons un coup d'≈ìil √† cette image.

|pin_pwm|

Le Pico W prend en charge la PWM sur chaque broche GPIO, mais il existe en r√©alit√© 16 sorties PWM ind√©pendantes (et non 30), r√©parties entre les broches GP0 √† GP15 sur la gauche, et la sortie PWM des GPIO de droite est identique √† celle de gauche.

Il est essentiel d'√©viter d'assigner le m√™me canal PWM √† des usages diff√©rents dans un programme. Par exemple, GP0 et GP16 sont tous deux PWM_0A.

Essayons maintenant de r√©aliser l'effet de variation progressive de la luminosit√© de la LED apr√®s avoir compris ces concepts.

* :ref:`cpn_led`

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants :

Il est tr√®s pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kepler Kit
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous :

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 1 (220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|

**Sch√©ma**

|sch_led|

Ce projet utilise le m√™me circuit que le premier projet :ref:`py_led`, mais le type de signal est diff√©rent. Dans le premier projet, on √©mettait des niveaux haut et bas (0 & 1) num√©riques directement depuis GP15 pour allumer ou √©teindre les LED. Dans ce projet, nous utilisons un signal PWM sur GP15 pour contr√¥ler la luminosit√© de la LED.

**C√¢blage**

|wiring_led|

**Code**

.. note::

    * Ouvrez le fichier ``2.3_fading_led.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Ex√©cuter le script actuel" ou appuyez simplement sur F5 pour l'ex√©cuter.
    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite.
    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import utime

    led = machine.PWM(machine.Pin(15))
    led.freq(1000)

    for brightness in range(0,65535,50):
        led.duty_u16(brightness)
        utime.sleep_ms(10)
    led.duty_u16(0)


La LED deviendra progressivement plus lumineuse √† mesure que le code s'ex√©cute.

**Comment √ßa marche ?**

Ici, nous changeons la luminosit√© de la LED en modifiant le cycle de travail de la sortie PWM de GP15. Examinons ces lignes de code.

.. code-block:: python
    :emphasize-lines: 4,5,8

    import machine
    import utime

    led = machine.PWM(machine.Pin(15))
    led.freq(1000)

    for brightness in range(0,65535,50):
        led.duty_u16(brightness)
        utime.sleep_ms(10)
    led.duty_u16(0)

* ``led = machine.PWM(machine.Pin(15))`` configure la broche GP15 pour la sortie PWM.
* La ligne ``led.freq(1000)`` fixe la fr√©quence PWM √† 1000 Hz, ce qui signifie que chaque cycle dure 1 ms (1/1000).
* La ligne ``led.duty_u16()`` d√©finit le cycle de travail, qui est un entier 16 bits (2^16=65536). Un 0 indique un cycle de travail de 0 %, ce qui signifie que chaque cycle a 0 % de temps de signal haut, c'est-√†-dire que toutes les impulsions sont d√©sactiv√©es. La valeur 65535 indique un cycle de travail de 100 %, ce qui signifie que l'impulsion enti√®re est activ√©e, donnant '1'. Avec une valeur de 32768, la LED s'allume √† moiti√©, ce qui fait qu'elle est moiti√© moins brillante par rapport √† un allumage complet.
