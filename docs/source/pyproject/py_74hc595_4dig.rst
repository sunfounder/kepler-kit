.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans le monde des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-achat et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions sp√©ciales durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_74hc_4dig:

5.3 Compteur de Temps
================================

L'afficheur 7 segments √† 4 chiffres est compos√© de quatre afficheurs 7 segments fonctionnant ensemble.

L'afficheur 7 segments √† 4 chiffres fonctionne de mani√®re ind√©pendante. Il utilise le principe de la persistance 
r√©tinienne pour afficher rapidement les caract√®res de chaque segment en boucle afin de former des cha√Ænes continues.

Par exemple, lorsque "1234" est affich√©, "1" s'affiche sur le premier segment 7, et "234" ne s'affiche pas. Apr√®s un 
certain temps, le deuxi√®me segment 7 affiche "2", tandis que les 1er, 3e et 4e segments sont √©teints, et ainsi de suite,
les quatre chiffres s'affichent √† tour de r√¥le. Ce processus est tr√®s court (environ 5 ms), et gr√¢ce √† l'effet de r√©manence 
optique et au principe de persistance visuelle, nous pouvons voir les quatre caract√®res simultan√©ment.

**Composants Requis**

Pour ce projet, nous avons besoin des composants suivants :

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kepler Kit
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment avec les liens ci-dessous :

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 4(220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_4_dit_7_segment`
        - 1
        - 
    *   - 7
        - :ref:`cpn_74hc595`
        - 1
        - |link_74hc595_buy|

**Sch√©ma**

|sch_4dig|

Ici, le principe de c√¢blage est essentiellement le m√™me que pour :ref:`py_74hc_led`, la seule diff√©rence √©tant que Q0-Q7 sont connect√©s aux broches a ~ g de l'afficheur 7 segments √† 4 chiffres.

Ensuite, G10 ~ G13 s√©lectionnera quel segment 7 doit fonctionner.

**C√¢blage**

|wiring_4dig|

**Code**

.. note::

    * Ouvrez le fichier ``5.3_time_counter.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Ex√©cuter le script actuel" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite.

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import time

    SEGCODE = [0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f]

    sdi = machine.Pin(18,machine.Pin.OUT)
    rclk = machine.Pin(19,machine.Pin.OUT)
    srclk = machine.Pin(20,machine.Pin.OUT)

    placePin = []
    pin = [10,13,12,11]
    for i in range(4):
        placePin.append(None)
        placePin[i] = machine.Pin(pin[i], machine.Pin.OUT)

    timerStart=time.ticks_ms()

    def timer1():
        return int((time.ticks_ms()-timerStart)/1000)

    def pickDigit(digit):
        for i in range(4):
            placePin[i].value(1)
        placePin[digit].value(0)

    def clearDisplay():
        hc595_shift(0x00)

    def hc595_shift(dat):
        rclk.low()
        time.sleep_us(200)
        for bit in range(7, -1, -1):
            srclk.low()
            time.sleep_us(200)
            value = 1 & (dat >> bit)
            sdi.value(value)
            time.sleep_us(200)
            srclk.high()
            time.sleep_us(200)
        time.sleep_us(200)
        rclk.high()
        time.sleep_us(200)

    while True:
        count = timer1()
        #print(count)
        
        pickDigit(0)
        hc595_shift(SEGCODE[count%10])

        pickDigit(1)
        hc595_shift(SEGCODE[count%100//10])
        
        pickDigit(2)
        hc595_shift(SEGCODE[count%1000//100])
        
        pickDigit(3)
        hc595_shift(SEGCODE[count%10000//1000])     

Apr√®s avoir ex√©cut√© le programme, vous verrez l'afficheur 7 segments √† 4 chiffres se transformer en compteur, augmentant de 1 chaque seconde.

**Comment √ßa fonctionne ?**

L'√©criture des signaux sur chaque segment 7 se fait de la m√™me mani√®re que pour :ref:`py_74hc_7seg`, en utilisant la fonction ``hc595_shift()``.
Le point central de l'afficheur 7 segments √† 4 chiffres est de s√©lectionner chaque segment individuellement. Le code associ√© est le suivant.

.. code-block:: python

    placePin = []
    pin = [13,12,11,10]
    for i in range(4):
        placePin.append(None)
        placePin[i] = machine.Pin(pin[i], machine.Pin.OUT)

    def pickDigit(digit):
        for i in range(4):
            placePin[i].value(1)
        placePin[digit].value(0)

    while True:
        
        hc595_shift(SEGCODE[count%10])
        pickDigit(0)

        hc595_shift(SEGCODE[count%100//10])
        pickDigit(1)
        
        hc595_shift(SEGCODE[count%1000//100])
        pickDigit(2)    
        
        hc595_shift(SEGCODE[count%10000//1000])
        pickDigit(3)   

Ici, quatre broches (GP10, GP11, GP12, GP13) contr√¥lent chaque chiffre de l'afficheur 7 segments √† 4 chiffres individuellement.
Lorsque l'√©tat de ces broches est ``0``, l'afficheur correspondant est actif ; lorsque l'√©tat est ``1``, l'afficheur est inactif.

La fonction ``pickDigit(digit)`` d√©sactive les quatre chiffres puis active un chiffre sp√©cifique individuellement.
Ensuite, ``hc595_shift()`` est utilis√© pour √©crire le code 8 bits correspondant sur l'afficheur 7 segments.

L'afficheur 7 segments √† 4 chiffres doit √™tre activ√© en continu et en alternance pour que nous puissions voir l'affichage des quatre chiffres, ce qui signifie que le programme principal ne peut pas ajouter facilement du code qui affecterait le minutage.
Cependant, nous devons ajouter une fonction de chronom√©trage √† cet exemple, et si nous ajoutons un ``sleep(1)``, nous saurons qu'il a quatre chiffres.
Nous verrons alors l'illusion d'un affichage simultan√© des quatre chiffres, r√©v√©lant qu'un seul segment est allum√© √† la fois.
L'utilisation de la fonction ``time.ticks_ms()`` de la biblioth√®que ``time`` est une excellente m√©thode pour cela.

.. code-block:: python

    import time

    timerStart=time.ticks_ms()

    def timer1():
        return int((time.ticks_ms()-timerStart)/1000)

    while True:
        count = timer1()


La fonction ``time.ticks_ms()`` r√©cup√®re un temps (non explicite), et nous enregistrons la premi√®re valeur obtenue sous ``timerStart``.
Ensuite, lorsque le temps est requis, la fonction ``time.ticks_ms()`` est appel√©e de nouveau, et la valeur est soustraite de ``timerStart`` pour obtenir la dur√©e d'ex√©cution du programme (en millisecondes).

Enfin, convertissez et affichez cette valeur sur l'afficheur 7 segments √† 4 chiffres, et c'est termin√©.

* `Time - MicroPython Docs <https://docs.micropython.org/en/latest/library/time.html>`_
