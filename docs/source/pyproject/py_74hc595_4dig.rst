.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de Raspberry Pi, Arduino y ESP32 de SunFounder en Facebook. Profundiza en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros apasionados.

    **¬øPor qu√© unirte?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? ¬°Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo!

.. _py_74hc_4dig:

5.3 Contador de Tiempo
================================

El display de 7 segmentos de 4 d√≠gitos est√° compuesto por cuatro displays de 7 
segmentos que trabajan juntos.

Cada d√≠gito funciona de manera independiente, utilizando el principio de 
persistencia visual para mostrar r√°pidamente los caracteres de cada segmento 
de forma secuencial, formando as√≠ una cadena continua.

Por ejemplo, cuando en el display se muestra "1234", se visualiza primero "1" 
en el primer d√≠gito, mientras que "234" no aparece. Despu√©s de un breve intervalo, 
el segundo d√≠gito muestra "2" mientras que el 1¬∞, 3¬∞ y 4¬∞ permanecen apagados. 
As√≠, los cuatro d√≠gitos se muestran en secuencia. Este proceso es muy corto 
(normalmente 5 ms), y gracias al efecto de postimagen y a la persistencia de 
la visi√≥n, podemos ver los cuatro caracteres al mismo tiempo.

**Componentes Requeridos**

En este proyecto, necesitaremos los siguientes componentes.

Comprar un kit completo es muy conveniente; aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - √çTEMS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes adquirirlos por separado desde los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N.¬∫
        - COMPONENTE
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 4 (220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_4_dit_7_segment`
        - 1
        - 
    *   - 7
        - :ref:`cpn_74hc595`
        - 1
        - |link_74hc595_buy|

**Esquema**

|sch_4dig|

Aqu√≠ el principio de cableado es b√°sicamente el mismo que en :ref:`py_74hc_led`, la √∫nica diferencia es que Q0-Q7 est√°n conectados a los pines a ~ g del display de 7 segmentos de 4 d√≠gitos.

Luego, G10 ~ G13 seleccionar√°n qu√© d√≠gito del display de 7 segmentos estar√° activo.

**Cableado**

|wiring_4dig|

**C√≥digo**

.. note::

    * Abre el archivo ``5.3_time_counter.py`` en la ruta ``kepler-kit-main/micropython`` o copia este c√≥digo en Thonny, luego haz clic en "Run Current Script" o presiona F5 para ejecutarlo.

    * No olvides seleccionar el int√©rprete "MicroPython (Raspberry Pi Pico)" en la esquina inferior derecha.

    * Para tutoriales detallados, consulta :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import time

    SEGCODE = [0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f]

    sdi = machine.Pin(18,machine.Pin.OUT)
    rclk = machine.Pin(19,machine.Pin.OUT)
    srclk = machine.Pin(20,machine.Pin.OUT)

    placePin = []
    pin = [10,13,12,11]
    for i in range(4):
        placePin.append(None)
        placePin[i] = machine.Pin(pin[i], machine.Pin.OUT)

    timerStart=time.ticks_ms()

    def timer1():
        return int((time.ticks_ms()-timerStart)/1000)

    def pickDigit(digit):
        for i in range(4):
            placePin[i].value(1)
        placePin[digit].value(0)

    def clearDisplay():
        hc595_shift(0x00)

    def hc595_shift(dat):
        rclk.low()
        time.sleep_us(200)
        for bit in range(7, -1, -1):
            srclk.low()
            time.sleep_us(200)
            value = 1 & (dat >> bit)
            sdi.value(value)
            time.sleep_us(200)
            srclk.high()
            time.sleep_us(200)
        time.sleep_us(200)
        rclk.high()
        time.sleep_us(200)

    while True:
        count = timer1()
        #print(count)
        
        pickDigit(0)
        hc595_shift(SEGCODE[count%10])

        pickDigit(1)
        hc595_shift(SEGCODE[count%100//10])
        
        pickDigit(2)
        hc595_shift(SEGCODE[count%1000//100])
        
        pickDigit(3)
        hc595_shift(SEGCODE[count%10000//1000])     

Despu√©s de ejecutar el programa, ver√°s el display de 7 segmentos de 4 d√≠gitos funcionando como un contador que aumenta en 1 cada segundo.

**¬øC√≥mo funciona?**

La escritura de se√±ales en cada d√≠gito del display de 7 segmentos se realiza de la misma manera que en :ref:`py_74hc_7seg`, utilizando la funci√≥n ``hc595_shift()``.
El punto clave del display de 7 segmentos de 4 d√≠gitos es activar selectivamente cada d√≠gito. El c√≥digo relacionado con esto es el siguiente.

.. code-block:: python

    placePin = []
    pin = [13,12,11,10]
    for i in range(4):
        placePin.append(None)
        placePin[i] = machine.Pin(pin[i], machine.Pin.OUT)

    def pickDigit(digit):
        for i in range(4):
            placePin[i].value(1)
        placePin[digit].value(0)

    while True:
        
        hc595_shift(SEGCODE[count%10])
        pickDigit(0)

        hc595_shift(SEGCODE[count%100//10])
        pickDigit(1)
        
        hc595_shift(SEGCODE[count%1000//100])
        pickDigit(2)    
        
        hc595_shift(SEGCODE[count%10000//1000])
        pickDigit(3)   

Aqu√≠, se utilizan cuatro pines (GP10, GP11, GP12, GP13) para controlar cada d√≠gito del display de 7 segmentos de manera individual.
Cuando el estado de estos pines es ``0``, el d√≠gito correspondiente est√° activo; cuando el estado es ``1``, est√° inactivo.

La funci√≥n ``pickDigit(digit)`` se utiliza para desactivar los cuatro d√≠gitos y luego activar un d√≠gito espec√≠fico.
Despu√©s, se usa ``hc595_shift()`` para escribir el c√≥digo de 8 bits correspondiente al d√≠gito seleccionado del display de 7 segmentos.

El display de 7 segmentos de 4 d√≠gitos necesita activarse continuamente en turnos para que podamos ver los cuatro d√≠gitos. Esto significa que el programa principal no puede agregar f√°cilmente c√≥digo que altere el tiempo de activaci√≥n.
Sin embargo, necesitamos agregar una funci√≥n de temporizaci√≥n a este ejemplo, y si a√±adimos un ``sleep(1)``, ver√≠amos que tiene cuatro d√≠gitos.
Ver√≠amos entonces que, en realidad, solo un d√≠gito se ilumina a la vez.
La funci√≥n ``time.ticks_ms()`` en la biblioteca ``time`` es una excelente manera de lograr esto.

.. code-block:: python

    import time

    timerStart=time.ticks_ms()

    def timer1():
        return int((time.ticks_ms()-timerStart)/1000)

    while True:
        count = timer1()


La funci√≥n ``time.ticks_ms()`` obtiene un tiempo (no expl√≠cito), y registramos el primer valor como ``timerStart``.
Despu√©s, cuando se necesita el tiempo, se llama nuevamente a ``time.ticks_ms()``, y el valor se resta de ``timerStart`` para obtener el tiempo que el programa lleva en ejecuci√≥n (en milisegundos).

Finalmente, convierte y muestra este valor de tiempo en el display de 7 segmentos de 4 d√≠gitos, y listo.

* `Time - MicroPython Docs <https://docs.micropython.org/en/latest/library/time.html>`_