.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions sp√©ciales durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_dht11:

6.2 Temp√©rature - Humidit√©
=======================================

L'humidit√© et la temp√©rature sont √©troitement li√©es, tant en termes de 
quantit√©s physiques qu'en impact sur la vie quotidienne. La temp√©rature 
et l'humidit√© de l'environnement humain influencent directement la r√©gulation 
thermique et le transfert de chaleur du corps humain. Cela peut √©galement 
affecter l'activit√© mentale et l'√©tat d'esprit, influen√ßant ainsi l'efficacit√© 
de nos √©tudes et de notre travail.

La temp√©rature est l'une des sept grandeurs physiques fondamentales du Syst√®me 
international d'unit√©s, utilis√©e pour mesurer le degr√© de chaleur ou de froid 
d'un objet. Le degr√© Celsius est l'une des √©chelles de temp√©rature les plus 
couramment utilis√©es dans le monde, exprim√©e par le symbole "‚ÑÉ".

L'humidit√© est la concentration de vapeur d'eau pr√©sente dans l'air. L'humidit√© 
relative de l'air est g√©n√©ralement utilis√©e au quotidien et est exprim√©e en %RH. 
L'humidit√© relative est √©troitement li√©e √† la temp√©rature. Pour un volume de gaz 
scell√© donn√©, plus la temp√©rature est √©lev√©e, plus l'humidit√© relative est faible ; 
et plus la temp√©rature est basse, plus l'humidit√© relative est √©lev√©e.

|img_Dht11|

Un capteur num√©rique de base pour la temp√©rature et l'humidit√©, le **DHT11**, est inclus dans ce kit. Il utilise un capteur capacitif d'humidit√© et une thermistance pour mesurer l'air ambiant et transmet un signal num√©rique via les broches de donn√©es (aucune broche d'entr√©e analogique n'est requise).

* :ref:`cpn_dht11`

**Composants Requis**

Pour ce projet, nous avons besoin des composants suivants : 

Il est plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kepler Kit	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous :

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_dht11`
        - 1
        - |link_dht22_buy|

**Sch√©ma**

|sch_dht11|

**C√¢blage**

|wiring_dht11|

**Code**

.. note::

    * Ouvrez le fichier ``6.2_temperature_humidity.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Ex√©cuter le script actuel" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite. 

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`. 
    
    * Vous devez utiliser la biblioth√®que appel√©e ``dht.py``, v√©rifiez si elle a √©t√© t√©l√©charg√©e sur le Pico W. Pour un tutoriel d√©taill√©, r√©f√©rez-vous √† :ref:`add_libraries_py`.

.. code-block:: python

    from machine import Pin
    import utime as time
    from dht import DHT11, InvalidPulseCount

    pin = Pin(16, Pin.IN)
    sensor = DHT11(pin)
    time.sleep(5)  # d√©lai initial

    while True:
        try:
            sensor.measure()
            string = "Temperature:{}\nHumidity: {}".format(sensor.temperature, sensor.humidity)
            print(string)
            time.sleep(4)

        except InvalidPulseCount as e:
            print('Bad pulse count - retrying ...')




Apr√®s l'ex√©cution du code, vous verrez le Shell afficher en continu la temp√©rature et l'humidit√©, et √† mesure que le programme fonctionne de mani√®re stable, ces deux valeurs deviendront de plus en plus pr√©cises.

**Comment √ßa marche ?**

Dans la biblioth√®que dht, les fonctionnalit√©s pertinentes ont √©t√© int√©gr√©es dans la classe ``DHT11``.

.. code-block:: python

    from dht import DHT11, InvalidPulseCount

Initialisez l'objet ``DHT11``. Ce dispositif ne n√©cessite qu'une entr√©e num√©rique pour √™tre utilis√©.

.. code-block:: python

    pin = Pin(16, Pin.IN)
    sensor = DHT11(pin)

Utilisez ``sensor.measure()`` pour lire la temp√©rature et l'humidit√© actuelles, 
qui seront stock√©es dans ``sensor.temperature`` et ``sensor.humidity``. Elles 
sont ensuite imprim√©es √† l'√©cran. Enfin, le taux d'√©chantillonnage du DHT11 est 
de 1HZ, il faut donc un ``time.sleep(1)`` dans la boucle.

.. code-block:: python

    while True:
        try:
            sensor.measure()
            string = "Temperature:{}\nHumidity: {}".format(sensor.temperature, sensor.humidity)
            print(string)
            time.sleep(4)

        except InvalidPulseCount as e:
            print('Bad pulse count - retrying ...')
