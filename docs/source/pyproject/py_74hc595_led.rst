.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans le monde des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions sp√©ciales durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_74hc_led:

5.1 Microcircuit - 74HC595
===========================

Un circuit int√©gr√© (Integrated Circuit) est un dispositif √©lectronique miniature, repr√©sent√© par la lettre "IC" dans les circuits.

Un processus sp√©cifique est utilis√© pour interconnecter les transistors, r√©sistances, condensateurs, inducteurs et autres composants et circuits n√©cessaires dans un dispositif, fabriqu√© sur une ou plusieurs petites plaquettes semi-conductrices ou substrats di√©lectriques, puis encapsul√© dans un bo√Ætier. Cela devient une microstructure dot√©e des fonctions n√©cessaires au circuit ; tous les composants sont structur√©s comme un ensemble, permettant aux composants √©lectroniques de franchir un grand pas vers la miniaturisation, la faible consommation d'√©nergie, l'intelligence et une haute fiabilit√©.

Les inventeurs des circuits int√©gr√©s sont Jack Kilby (circuits int√©gr√©s √† base de germanium (Ge)) et Robert Norton Noyce (circuits int√©gr√©s √† base de silicium (Si)).

Ce kit est √©quip√© d'un circuit int√©gr√©, le 74HC595, qui permet de r√©duire consid√©rablement l'utilisation des broches GPIO.
Il peut remplacer 8 broches pour la sortie de signaux num√©riques en √©crivant un nombre binaire de 8 bits.

* `Binary number - Wikipedia <https://en.wikipedia.org/wiki/Binary_number>`_

* :ref:`74HC595`

**Composants Requis**

Pour ce projet, nous avons besoin des composants suivants :

Il est plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kepler Kit
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous :

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 8(220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 8
        - |link_led_buy|
    *   - 7
        - :ref:`cpn_74hc595`
        - 1
        - |link_74hc595_buy|

**Sch√©ma**

|sch_74hc_led|

* Lorsque MR (broche 10) est au niveau haut et OE (broche 13) est au niveau bas, les donn√©es sont entr√©es au front montant de SHcp et se dirigent vers le registre m√©moire par le m√™me front montant de SHcp.
* Si les deux horloges sont connect√©es ensemble, le registre de d√©calage est toujours une impulsion avant le registre m√©moire.
* Le registre m√©moire comprend une entr√©e de d√©calage s√©rie (Ds), une sortie s√©rie (Q) et un bouton de r√©initialisation asynchrone (niveau bas).
* Le registre m√©moire √©met un bus avec un parall√©lisme de 8 bits et dans trois √©tats. 
* Lorsque OE est activ√© (niveau bas), les donn√©es du registre m√©moire sont envoy√©es sur le bus (Q0 ~ Q7).

**C√¢blage**

.. Le 74HC595 est un circuit int√©gr√© √† 16 broches avec une encoche semi-circulaire sur un c√¥t√© (g√©n√©ralement √† gauche de l'√©tiquette). Avec l'encoche orient√©e vers le haut, ses broches sont affich√©es dans le sch√©ma ci-dessous.


.. R√©f√©rez-vous au sch√©ma ci-dessous pour construire le circuit.

|wiring_74hc_led|

.. 1. Connectez 3V3 et GND du Pico W au bus d'alimentation de la breadboard.
.. #. Ins√©rez le 74HC595 au-dessus de la coupure centrale de la breadboard.
.. #. Connectez la broche GP0 du Pico W √† la broche DS (broche 14) du 74HC595 avec un fil de connexion.
.. #. Connectez la broche GP1 du Pico W √† la broche STcp (broche 12) du 74HC595.
.. #. Connectez la broche GP2 du Pico W √† la broche SHcp (broche 11) du 74HC595.
.. #. Connectez la broche VCC (broche 16) et MR (broche 10) du 74HC595 au bus d'alimentation positif.
.. #. Connectez la broche GND (broche 8) et CE (broche 13) du 74HC595 au bus d'alimentation n√©gatif.
.. #. Ins√©rez 8 LED sur la breadboard, et leurs anodes sont respectivement connect√©es aux broches Q0~Q7 (15, 1, 2, 3, 4, 5, 6, 7) du 74HC595.
.. #. Connectez les cathodes des LED avec une r√©sistance de 220Œ© en s√©rie au bus d'alimentation n√©gatif.

**Code**

.. note::

    * Ouvrez le fichier ``5.1_microchip_74hc595.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Ex√©cuter le script actuel" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite.

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import time

    sdi = machine.Pin(0,machine.Pin.OUT)
    rclk = machine.Pin(1,machine.Pin.OUT)
    srclk = machine.Pin(2,machine.Pin.OUT)

    def hc595_shift(dat): 
        rclk.low()
        time.sleep_ms(5)
        for bit in range(7, -1, -1):
            srclk.low()
            time.sleep_ms(5)
            value = 1 & (dat >> bit)
            sdi.value(value)
            time.sleep_ms(5)
            srclk.high()
            time.sleep_ms(5)
        time.sleep_ms(5)
        rclk.high()
        time.sleep_ms(5)

    num = 0

    for i in range(16):
        if i < 8:
            num = (num<<1) + 1
        elif i>=8:
            num = (num & 0b01111111)<<1
        hc595_shift(num)
        print("{:0>8b}".format(num))
        time.sleep_ms(200)

Lorsque le programme est en cours d'ex√©cution, ``num`` sera √©crit dans la puce 74HC595 sous forme de nombre binaire √† huit bits pour contr√¥ler l'allumage et l'extinction des 8 LED.
Nous pouvons voir la valeur actuelle de ``num`` dans le shell.

**Comment √ßa fonctionne ?**

``hc595_shift()`` fait en sorte que le 74HC595 √©mette 8 signaux num√©riques. Il envoie le dernier bit du nombre binaire √† Q0, et le premier bit √† Q7. En d'autres termes, √©crire le nombre binaire ‚Äú00000001‚Äù fera que Q0 √©mette un niveau haut et Q1~Q7 un niveau bas.
