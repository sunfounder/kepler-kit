.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de Raspberry Pi, Arduino y ESP32 de SunFounder en Facebook. Profundiza en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones especiales.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _py_74hc_led:

5.1 Microchip - 74HC595
===========================

Un circuito integrado (IC) es un dispositivo electr√≥nico en miniatura que agrupa componentes como transistores, resistencias, condensadores, inductores y otros, fabricados en una o varias obleas de semiconductores o sustratos diel√©ctricos. Estos componentes se interconectan para formar una estructura con las funciones necesarias, avanzando la tecnolog√≠a de componentes electr√≥nicos hacia la miniaturizaci√≥n, bajo consumo, inteligencia y alta fiabilidad.

Los inventores de los circuitos integrados son Jack Kilby (basado en germanio (Ge)) y Robert Noyce (basado en silicio (Si)).

Este kit incluye el circuito integrado 74HC595, que permite ahorrar considerablemente el uso de pines GPIO. Espec√≠ficamente, permite reemplazar 8 pines 
para la salida de se√±ales digitales escribiendo un n√∫mero binario de 8 bits.

* `Binary number - Wikipedia <https://en.wikipedia.org/wiki/Binary_number>`_

* :ref:`74HC595`

**Componentes Requeridos**

En este proyecto, necesitamos los siguientes componentes.

Es muy conveniente comprar un kit completo; aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N.¬∫
        - COMPONENTE	
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 8 (220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 8
        - |link_led_buy|
    *   - 7
        - :ref:`cpn_74hc595`
        - 1
        - |link_74hc595_buy|

**Esquema**

|sch_74hc_led|

* Cuando MR (pin10) est√° en nivel alto y OE (pin13) en nivel bajo, los datos se ingresan en el flanco ascendente de SHcp y pasan al registro de memoria. 
* Si los dos relojes est√°n conectados juntos, el registro de desplazamiento siempre est√° un pulso antes que el registro de memoria.
* En el registro de memoria hay un pin de entrada de desplazamiento en serie (Ds), un pin de salida en serie (Q) y un bot√≥n de reinicio asincr√≥nico (nivel bajo).
* El registro de memoria saca una salida de bus paralelo de 8 bits en tres estados. 
* Cuando OE est√° habilitado (nivel bajo), los datos en el registro de memoria se env√≠an al bus (Q0 ~ Q7).

**Conexi√≥n**

.. El 74HC595 es un CI de 16 pines con una muesca semicircular en un lado (normalmente en el lado izquierdo de la etiqueta). Con la muesca hacia arriba, sus pines est√°n dispuestos seg√∫n el diagrama a continuaci√≥n.

.. Consulta el diagrama para construir el circuito.

|wiring_74hc_led|

.. 1. Conecta 3V3 y GND del Pico W a las l√≠neas de alimentaci√≥n de la breadboard.
.. #. Inserta el 74HC595 cruzando la brecha central de la breadboard.
.. #. Conecta el pin GP0 del Pico W al pin DS (pin 14) del 74HC595 con un cable de puente.
.. #. Conecta el pin GP1 del Pico W al pin STcp (pin 12) del 74HC595.
.. #. Conecta el pin GP2 del Pico W al pin SHcp (pin 11) del 74HC595.
.. #. Conecta el pin VCC (pin 16) y el pin MR (pin 10) del 74HC595 a la l√≠nea de alimentaci√≥n positiva.
.. #. Conecta el pin GND (pin 8) y el pin CE (pin 13) del 74HC595 a la l√≠nea de alimentaci√≥n negativa.
.. #. Inserta 8 LEDs en la breadboard, y conecta los pines de √°nodo a los pines Q0~Q1 (15, 1, 2, 3, 4, 5, 6, 7) del 74HC595.
.. #. Conecta los c√°todos de los LEDs con una resistencia de 220Œ© en serie a la l√≠nea de alimentaci√≥n negativa.

**C√≥digo**

.. note::

    * Abre el archivo ``5.1_microchip_74hc595.py`` en la ruta ``kepler-kit-main/micropython`` o copia este c√≥digo en Thonny, luego haz clic en "Run Current Script" o presiona F5 para ejecutarlo.

    * No olvides seleccionar el int√©rprete "MicroPython (Raspberry Pi Pico)" en la esquina inferior derecha. 

    * Para tutoriales detallados, consulta :ref:`open_run_code_py`.

.. code-block:: python

    import machine
    import time

    sdi = machine.Pin(0,machine.Pin.OUT)
    rclk = machine.Pin(1,machine.Pin.OUT)
    srclk = machine.Pin(2,machine.Pin.OUT)

    def hc595_shift(dat): 
        rclk.low()
        time.sleep_ms(5)
        for bit in range(7, -1, -1):
            srclk.low()
            time.sleep_ms(5)
            value = 1 & (dat >> bit)
            sdi.value(value)
            time.sleep_ms(5)
            srclk.high()
            time.sleep_ms(5)
        time.sleep_ms(5)
        rclk.high()
        time.sleep_ms(5)

    num = 0

    for i in range(16):
        if i < 8:
            num = (num<<1) + 1
        elif i>=8:
            num = (num & 0b01111111)<<1
        hc595_shift(num)
        print("{:0>8b}".format(num))
        time.sleep_ms(200)

Cuando el programa se est√° ejecutando, ``num`` se escribe en el chip 74HC595 como un n√∫mero binario de ocho bits para controlar el encendido y apagado de los 8 LEDs. Podemos ver el valor actual de ``num`` en el shell.


**¬øC√≥mo funciona?**

``hc595_shift()`` hace que el 74HC595 emita 8 se√±ales digitales. Emite el √∫ltimo bit del n√∫mero binario a Q0, y el primer bit a Q7. En otras palabras, escribir el n√∫mero binario ‚Äú00000001‚Äù har√° que Q0 emita un nivel alto y Q1~Q7 emitan nivel bajo.
