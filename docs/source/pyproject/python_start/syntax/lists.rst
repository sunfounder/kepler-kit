.. note::

    Bonjour, bienvenue dans la communautÃ© des passionnÃ©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profondÃ©ment dans le monde des Raspberry Pi, Arduino et ESP32 avec d'autres passionnÃ©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : RÃ©solvez les problÃ¨mes post-achat et les dÃ©fis techniques avec l'aide de notre communautÃ© et de notre Ã©quipe.
    - **Apprendre et partager** : Ã‰changez des astuces et des tutoriels pour amÃ©liorer vos compÃ©tences.
    - **Avant-premiÃ¨res exclusives** : BÃ©nÃ©ficiez d'un accÃ¨s anticipÃ© aux annonces de nouveaux produits et aux avant-premiÃ¨res.
    - **RÃ©ductions spÃ©ciales** : Profitez de rÃ©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez Ã  des concours et promotions spÃ©ciales durant les fÃªtes.

    ðŸ‘‰ PrÃªt Ã  explorer et crÃ©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous dÃ¨s aujourd'hui !

.. _syntax_list:

Listes
===================

Les listes sont utilisÃ©es pour stocker plusieurs Ã©lÃ©ments dans une seule variable et sont crÃ©Ã©es Ã  l'aide de crochets :

.. code-block:: python

    B_list = ["Blossom", "Bubbles","Buttercup"]
    print(B_list)

Les Ã©lÃ©ments de la liste sont modifiables, ordonnÃ©s et peuvent contenir des valeurs en double.
Les Ã©lÃ©ments sont indexÃ©s, le premier ayant l'index [0], le second [1], et ainsi de suite.

.. code-block:: python

    C_list = ["Red", "Blue", "Green", "Blue"]
    print(C_list)            # doublon
    print(C_list[0]) 
    print(C_list[1])         # ordonnÃ©
    C_list[2] = "Purple"     # modifiable
    print(C_list)

>>> %Run -c $EDITOR_CONTENT
['Red', 'Blue', 'Green', 'Blue']
Red
Blue
['Red', 'Blue', 'Purple', 'Blue']

Une liste peut contenir diffÃ©rents types de donnÃ©es :

.. code-block:: python

    A_list = ["Banana", 255, False, 3.14]
    print(A_list)

>>> %Run -c $EDITOR_CONTENT
['Banana', 255, False, 3.14]


Longueur de la Liste
------------------------
Pour dÃ©terminer le nombre d'Ã©lÃ©ments dans une liste, utilisez la fonction len().

.. code-block:: python

    A_list = ["Banana", 255, False, 3.14]
    print(len(A_list))

>>> %Run -c $EDITOR_CONTENT
4

VÃ©rifier les Ã©lÃ©ments de la liste
---------------------------------------

Afficher le deuxiÃ¨me Ã©lÃ©ment de la liste :

.. code-block:: python

    A_list = ["Banana", 255, False, 3.14]
    print(A_list[1])

>>> %Run -c $EDITOR_CONTENT
[255]

Print the last one item of the list:

.. code-block:: python

    A_list = ["Banana", 255, False, 3.14]
    print(A_list[-1])

>>> %Run -c $EDITOR_CONTENT
[3.14]

Print the second, third item:

.. code-block:: python

    A_list = ["Banana", 255, False, 3.14]
    print(A_list[1:3])

>>> %Run -c $EDITOR_CONTENT
[255, False]


Modifier les Ã©lÃ©ments de la liste
---------------------------------------
Changer le deuxiÃ¨me et le troisiÃ¨me Ã©lÃ©ment :

.. code-block:: python

    A_list = ["Banana", 255, False, 3.14]
    A_list[1:3] = [True,"Orange"] 
    print(A_list)

>>> %Run -c $EDITOR_CONTENT
['Banana', True, 'Orange', 3.14]

Changer la deuxiÃ¨me valeur en la remplaÃ§ant par deux valeurs :

.. code-block:: python

    A_list = ["Banana", 255, False, 3.14]
    A_list[1:2] = [True,"Orange"] 
    print(A_list)

>>> %Run -c $EDITOR_CONTENT
['Banana', True, 'Orange', False, 3.14]


Ajouter des Ã©lÃ©ments Ã  la liste
--------------------------------------

Utiliser la mÃ©thode append() pour ajouter un Ã©lÃ©ment :

.. code-block:: python

    C_list = ["Red", "Blue", "Green"]
    C_list.append("Orange")
    print(C_list)

>>> %Run -c $EDITOR_CONTENT
['Red', 'Blue', 'Green', 'Orange']

Insert an item as the second position:

.. code-block:: python

    C_list = ["Red", "Blue", "Green"]
    C_list.insert(1, "Orange")
    print(C_list)

>>> %Run -c $EDITOR_CONTENT
['Red', 'Orange', 'Blue', 'Green']



Supprimer des Ã©lÃ©ments de la liste
------------------------------------------

La mÃ©thode remove() supprime l'Ã©lÃ©ment spÃ©cifiÃ©.

.. code-block:: python

    C_list = ["Red", "Blue", "Green"]
    C_list.remove("Blue")
    print(C_list)

>>> %Run -c $EDITOR_CONTENT
['Red', 'Green']

La mÃ©thode pop() supprime l'index spÃ©cifiÃ©. Si vous ne prÃ©cisez pas l'index, la mÃ©thode pop() supprime le dernier Ã©lÃ©ment.

.. code-block:: python

    A_list = ["Banana", 255, False, 3.14, True,"Orange"]
    A_list.pop(1)
    print(A_list)
    A_list.pop()
    print(A_list)

>>> %Run -c $EDITOR_CONTENT
255
['Banana', False, 3.14, True, 'Orange']
'Orange'
['Banana', False, 3.14, True]

Le mot-clÃ© ``del`` supprime Ã©galement l'index spÃ©cifiÃ© :

.. code-block:: python

    C_list = ["Red", "Blue", "Green"]
    del C_list[1]
    print(C_list)

>>> %Run -c $EDITOR_CONTENT
['Red', 'Green']

La mÃ©thode clear() vide la liste. La liste reste, mais elle est sans contenu.

.. code-block:: python

    C_list = ["Red", "Blue", "Green"]
    C_list.clear()
    print(C_list)

>>> %Run -c $EDITOR_CONTENT
[]