.. note::

    Bonjour, bienvenue dans la communautÃ© des passionnÃ©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profondÃ©ment dans le monde des Raspberry Pi, Arduino et ESP32 avec d'autres passionnÃ©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : RÃ©solvez les problÃ¨mes post-achat et les dÃ©fis techniques avec l'aide de notre communautÃ© et de notre Ã©quipe.
    - **Apprendre et partager** : Ã‰changez des astuces et des tutoriels pour amÃ©liorer vos compÃ©tences.
    - **Avant-premiÃ¨res exclusives** : BÃ©nÃ©ficiez d'un accÃ¨s anticipÃ© aux annonces de nouveaux produits et aux avant-premiÃ¨res.
    - **RÃ©ductions spÃ©ciales** : Profitez de rÃ©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez Ã  des concours et promotions spÃ©ciales durant les fÃªtes.

    ðŸ‘‰ PrÃªt Ã  explorer et crÃ©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous dÃ¨s aujourd'hui !

.. _syntax_forloop:

Boucles For
===============

La boucle ``for`` peut parcourir n'importe quelle sÃ©quence d'Ã©lÃ©ments, comme une liste ou une chaÃ®ne de caractÃ¨res.

Le format de la syntaxe de la boucle for est le suivant :

.. code-block:: python

    for val in sequence:
        Body of for


Ici, ``val`` est une variable qui reÃ§oit la valeur de chaque Ã©lÃ©ment de la sÃ©quence Ã  chaque itÃ©ration.

La boucle continue jusqu'Ã  ce que le dernier Ã©lÃ©ment de la sÃ©quence soit atteint. Utilisez l'indentation pour sÃ©parer le corps de la boucle ``for`` du reste du code.


**Organigramme de la boucle for**

.. image:: img/for_loop.png

.. code-block:: python

    numbers = [1, 2, 3, 4]
    sum = 0

    for val in numbers:
        sum = sum+val
        
    print("The sum is", sum)

>>> %Run -c $EDITOR_CONTENT
La somme est 10

L'instruction break
-------------------------

Avec l'instruction break, nous pouvons arrÃªter la boucle avant qu'elle ne parcoure tous les Ã©lÃ©ments :

.. code-block:: python

    numbers = [1, 2, 3, 4]
    sum = 0

    for val in numbers:
        sum = sum+val
        if sum == 6:
            break
    print("The sum is", sum)

>>> %Run -c $EDITOR_CONTENT
The sum is 6

L'instruction continue
--------------------------------------------

Avec l'instruction ``continue``, nous pouvons arrÃªter l'itÃ©ration en cours de la boucle et passer Ã  la suivante :

.. code-block:: python

    numbers = [1, 2, 3, 4]

    for val in numbers:
        if val == 3:
            continue
        print(val)

>>> %Run -c $EDITOR_CONTENT
1
2
4

La fonction range()
--------------------------------------------

Nous pouvons utiliser la fonction range() pour gÃ©nÃ©rer une sÃ©quence de nombres. range(6) produira des nombres entre 0 et 5 (6 nombres).

Il est Ã©galement possible de dÃ©finir un point de dÃ©part, un point d'arrÃªt et une taille de pas comme range(start, stop, step_size). Si non prÃ©cisÃ©e, la taille du pas par dÃ©faut est de 1.

En quelque sorte, l'objet range est "paresseux" car lorsqu'on le crÃ©e, il ne gÃ©nÃ¨re pas tous les nombres qu'il "contient". Cependant, ce n'est pas un itÃ©rateur car il prend en charge les opÃ©rations in, len et ``__getitem__``.

Cette fonction ne stocke pas toutes les valeurs en mÃ©moire ; ce serait inefficace. Elle se souvient du dÃ©but, de la fin, de la taille du pas et gÃ©nÃ¨re le prochain nombre au fur et Ã  mesure.

Pour forcer cette fonction Ã  afficher tous les Ã©lÃ©ments, nous pouvons utiliser la fonction list().

.. code-block:: python

    print(range(6))

    print(list(range(6)))

    print(list(range(2, 6)))

    print(list(range(2, 10, 2)))

>>> %Run -c $EDITOR_CONTENT
range(0, 6)
[0, 1, 2, 3, 4, 5]
[2, 3, 4, 5]
[2, 4, 6, 8]

Nous pouvons utiliser ``range()`` dans une boucle ``for`` pour parcourir une sÃ©quence de nombres. Elle peut Ãªtre combinÃ©e avec la fonction len() pour utiliser l'indice et parcourir la sÃ©quence.

.. code-block:: python

    fruits = ['pear', 'apple', 'grape']

    for i in range(len(fruits)):
        print("I like", fruits[i])
        
>>> %Run -c $EDITOR_CONTENT
I like pear
I like apple
I like grape


Else dans une boucle For
--------------------------------

La boucle ``for`` peut Ã©galement comporter un bloc ``else`` optionnel. Si les Ã©lÃ©ments de la sÃ©quence utilisÃ©e pour la boucle sont Ã©puisÃ©s, la partie ``else`` est exÃ©cutÃ©e.

Le mot-clÃ© ``break`` peut Ãªtre utilisÃ© pour arrÃªter la boucle ``for``. Dans ce cas, la partie ``else`` sera ignorÃ©e.

Par consÃ©quent, si aucune interruption ne se produit, la partie ``else`` de la boucle ``for`` sera exÃ©cutÃ©e.

.. code-block:: python

    for val in range(5):
        print(val)
    else:
        print("Finished")

>>> %Run -c $EDITOR_CONTENT
0
1
2
3
4
Finished

Le bloc else ne sera PAS exÃ©cutÃ© si la boucle est interrompue par une instruction break.

.. code-block:: python


    for val in range(5):
        if val == 2: break
        print(val)
    else:
        print("Finished")

>>> %Run -c $EDITOR_CONTENT
0
1

