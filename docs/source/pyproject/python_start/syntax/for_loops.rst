.. note::

    Â¡Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. SumÃ©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **Â¿Por quÃ© unirse?**

    - **Soporte de expertos**: Resuelve problemas postventa y desafÃ­os tÃ©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Preestrenos exclusivos**: ObtÃ©n acceso anticipado a anuncios de nuevos productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos mÃ¡s recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones de temporada.

    ðŸ‘‰ Â¿Listo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y Ãºnete hoy mismo.

.. _syntax_forloop:

Bucles For
===============

El bucle ``for`` puede recorrer cualquier secuencia de elementos, como una lista o una cadena.

La sintaxis del bucle for es la siguiente:

.. code-block:: python

    for val in sequence:
        Body of for


AquÃ­, ``val`` es una variable que obtiene el valor de cada elemento en la secuencia en cada iteraciÃ³n.

El bucle continÃºa hasta que alcanzamos el Ãºltimo elemento de la secuencia. Usa sangrÃ­a para separar el cuerpo del bucle ``for`` del resto del cÃ³digo.

**Diagrama de flujo del bucle for**

.. image:: img/for_loop.png




.. code-block:: python

    numbers = [1, 2, 3, 4]
    sum = 0

    for val in numbers:
        sum = sum+val
        
    print("The sum is", sum)

>>> %Run -c $EDITOR_CONTENT
The sum is 10

La instrucciÃ³n break
-------------------------

Con la instrucciÃ³n break podemos detener el bucle antes de que haya recorrido todos los elementos:

.. code-block:: python

    numbers = [1, 2, 3, 4]
    sum = 0

    for val in numbers:
        sum = sum+val
        if sum == 6:
            break
    print("The sum is", sum)

>>> %Run -c $EDITOR_CONTENT
The sum is 6

La instrucciÃ³n continue
--------------------------------------------

Con la instrucciÃ³n ``continue`` podemos detener la iteraciÃ³n actual del bucle y continuar con la siguiente:

.. code-block:: python

    numbers = [1, 2, 3, 4]

    for val in numbers:
        if val == 3:
            continue
        print(val)

>>> %Run -c $EDITOR_CONTENT
1
2
4

La funciÃ³n range()
--------------------------------------------

Podemos usar la funciÃ³n range() para generar una secuencia de nÃºmeros. range(6) producirÃ¡ nÃºmeros del 0 al 5 (6 nÃºmeros).

TambiÃ©n podemos definir el inicio, fin y tamaÃ±o de paso como range(start, stop, step_size). Si no se proporciona, step_size por defecto es 1.

En el contexto de range, el objeto es "perezoso" porque al crear el objeto, no genera cada nÃºmero que "contiene". Sin embargo, esto no es un iterador, ya que admite operaciones como in, len y ``__getitem__``.

Esta funciÃ³n no almacena todos los valores en memoria; serÃ­a ineficiente. En su lugar, recuerda el inicio, el final y el tamaÃ±o del paso para generar el siguiente nÃºmero a medida que avanza.

Para forzar a esta funciÃ³n a que muestre todos los elementos, podemos usar la funciÃ³n list().

.. code-block:: python

    print(range(6))

    print(list(range(6)))

    print(list(range(2, 6)))

    print(list(range(2, 10, 2)))

>>> %Run -c $EDITOR_CONTENT
range(0, 6)
[0, 1, 2, 3, 4, 5]
[2, 3, 4, 5]
[2, 4, 6, 8]

Podemos usar ``range()`` en un bucle ``for`` para iterar sobre una secuencia de nÃºmeros. Se puede combinar con la funciÃ³n len() para usar el Ã­ndice al recorrer la secuencia.

.. code-block:: python

    fruits = ['pear', 'apple', 'grape']

    for i in range(len(fruits)):
        print("I like", fruits[i])
        
>>> %Run -c $EDITOR_CONTENT
I like pear
I like apple
I like grape

Else en el bucle For
--------------------------------

El bucle ``for`` tambiÃ©n puede tener un bloque opcional ``else``. Si se agotan los elementos en la secuencia del bucle, se ejecuta la parte ``else``.

La palabra clave ``break`` puede usarse para detener el bucle ``for``. En este caso, la parte ``else`` serÃ¡ ignorada.

Por lo tanto, si no se produce ninguna interrupciÃ³n, la parte ``else`` del bucle ``for`` se ejecutarÃ¡.

.. code-block:: python

    for val in range(5):
        print(val)
    else:
        print("Finished")

>>> %Run -c $EDITOR_CONTENT
0
1
2
3
4
Finished

El bloque else NO se ejecutarÃ¡ si el bucle se detiene mediante una instrucciÃ³n break.

.. code-block:: python


    for val in range(5):
        if val == 2: break
        print(val)
    else:
        print("Finished")

>>> %Run -c $EDITOR_CONTENT
0
1

