.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans le monde des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-achat et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions sp√©ciales durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Fonctions
==============

En MicroPython, une fonction est un ensemble de d√©clarations li√©es qui ex√©cutent une t√¢che sp√©cifique.

Les fonctions aident √† diviser notre programme en blocs modulaires plus petits. √Ä mesure que notre projet devient plus vaste, les fonctions le rendent plus organis√© et plus facile √† g√©rer.

De plus, elles √©vitent les duplications et rendent le code r√©utilisable.

Cr√©er une Fonction
----------------------

.. code-block::

    def function_name(parameters): 
        """docstring"""
        statement(s)

* Une fonction est d√©finie √† l'aide du mot-cl√© ``def``

* Un nom de fonction pour identifier la fonction de mani√®re unique. La r√®gle de nommage des fonctions est la m√™me que pour les variables, et suit les r√®gles suivantes :
    
   * Peut uniquement contenir des chiffres, des lettres et des underscores.
   * Le premier caract√®re doit √™tre une lettre ou un underscore.
   * Sensible √† la casse.

* Les param√®tres (arguments) par lesquels nous transmettons des valeurs √† une fonction. Ils sont optionnels.

* Les deux-points (:) marquent la fin de l'en-t√™te de la fonction.

* Une docstring optionnelle, utilis√©e pour d√©crire la fonction ; on utilise g√©n√©ralement des guillemets triples pour que la docstring puisse s'√©tendre sur plusieurs lignes.

* Une ou plusieurs instructions MicroPython valides qui constituent le corps de la fonction. Les instructions doivent avoir le m√™me niveau d'indentation (g√©n√©ralement 4 espaces).

* Chaque fonction a besoin d'au moins une instruction, mais si pour une raison quelconque il y a une fonction sans instruction, utilisez l'instruction pass pour √©viter les erreurs.

* Une instruction ``return`` optionnelle pour renvoyer une valeur depuis la fonction.


Appeler une Fonction
------------------------

Pour appeler une fonction, ajoutez des parenth√®ses apr√®s le nom de la fonction.

.. code-block:: python

    def my_function():
        print("Your first function")

    my_function()

>>> %Run -c $EDITOR_CONTENT
Your first function

L'instruction return
-----------------------

L'instruction return est utilis√©e pour quitter une fonction et revenir √† l'endroit o√π elle a √©t√© appel√©e.

**Syntaxe de return**

.. code-block:: python

    return [expression_list]

L'instruction peut contenir une expression qui est √©valu√©e et renvoie une valeur. S'il n'y a pas d'expression dans l'instruction, ou si l'instruction ``return`` elle-m√™me n'existe pas dans la fonction, la fonction renverra un objet ``None``.

.. code-block:: python

    def my_function():
            print("Your first function")

    print(my_function())

>>> %Run -c $EDITOR_CONTENT
Your first function
None

Ici, ``None`` est la valeur de retour, car l'instruction ``return`` n'est pas utilis√©e.

Arguments
-------------

Les informations peuvent √™tre transmises √† la fonction sous forme d'arguments.

Sp√©cifiez les arguments entre parenth√®ses apr√®s le nom de la fonction. Vous pouvez ajouter autant d'arguments que n√©cessaire, il suffit de les s√©parer par des virgules.

.. code-block:: python

    def welcome(name, msg):
        """This is a welcome function for
        the person with the provided message"""
        print("Hello", name + ', ' + msg)

    welcome("Lily", "Welcome to China!")

>>> %Run -c $EDITOR_CONTENT
Bonjour Lily, Bienvenue en Chine !

Nombre d'Arguments
*************************

Par d√©faut, une fonction doit √™tre appel√©e avec le bon nombre d'arguments. Cela signifie que si votre fonction attend 2 param√®tres, vous devez appeler la fonction avec 2 arguments, ni plus, ni moins.

.. code-block:: python

    def welcome(name, msg):
        """This is a welcome function for
        the person with the provided message"""
        print("Hello", name + ', ' + msg)

    welcome("Lily", "Welcome to China!")

Ici, la fonction bienvenue() a 2 param√®tres.

Comme nous avons appel√© cette fonction avec deux arguments, elle s'ex√©cute sans erreurs.

Si elle est appel√©e avec un nombre diff√©rent d'arguments, l'interpr√©teur affichera un message d'erreur.

Voici des appels √† cette fonction avec un seul et aucun argument, ainsi que leurs messages d'erreur respectifs.

.. code-block::

    welcome("Lily")ÔºÉOnly one argument

>>> %Run -c $EDITOR_CONTENT
Traceback (most recent call last):
  File "<stdin>", line 6, in <module>
TypeError: function takes 2 positional arguments but 1 were given

.. code-block::

    welcome()ÔºÉNo arguments

>>> %Run -c $EDITOR_CONTENT
Traceback (most recent call last):
  File "<stdin>", line 6, in <module>
TypeError: function takes 2 positional arguments but 0 were given


Arguments par D√©faut
*************************

En MicroPython, nous pouvons utiliser l'op√©rateur d'affectation (=) pour fournir une valeur par d√©faut √† un param√®tre.

Si nous appelons la fonction sans argument, elle utilisera la valeur par d√©faut.

.. code-block:: python

    def welcome(name, msg = "Welcome to China!"):
        """This is a welcome function for
        the person with the provided message"""
        print("Hello", name + ', ' + msg)
    welcome("Lily")

>>> %Run -c $EDITOR_CONTENT
Hello Lily, Welcome to China!

Dans cette fonction, le param√®tre ``nom`` n'a pas de valeur par d√©faut et est obligatoire lors de l'appel.

En revanche, la valeur par d√©faut du param√®tre ``msg`` est "Bienvenue en Chine !". Il est donc optionnel lors de l'appel. Si une valeur est fournie, elle remplacera la valeur par d√©faut.

Un nombre quelconque de param√®tres dans la fonction peut avoir une valeur par d√©faut. Cependant, d√®s qu'il y a un argument par d√©faut, tous les arguments √† sa droite doivent √©galement avoir des valeurs par d√©faut.

Cela signifie que les arguments non par d√©faut ne peuvent pas suivre les arguments par d√©faut.

Par exemple, si nous d√©finissons l'en-t√™te de fonction ci-dessus comme :

.. code-block:: python

    def welcome(name = "Lily", msg):

We will receive the following error message:

>>> %Run -c $EDITOR_CONTENT
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
SyntaxError: non-default argument follows default argument

Arguments Nommes
**************************

Lorsque nous appelons une fonction avec certaines valeurs, ces valeurs seront attribu√©es aux arguments en fonction de leur position.

Par exemple, dans la fonction bienvenue() ci-dessus, lorsque nous l'avons appel√©e comme bienvenue("Lily", "Bienvenue en Chine"), la valeur "Lily" est affect√©e au param√®tre ``nom`` et de m√™me "Bienvenue en Chine" au param√®tre ``msg``.

MicroPython permet d'appeler des fonctions avec des arguments nomm√©s. Lorsque nous appelons la fonction de cette mani√®re, l'ordre (position) des arguments peut √™tre modifi√©.

.. code-block:: python

    # keyword arguments
    welcome(name = "Lily",msg = "Welcome to China!")

    # keyword arguments (out of order)
    welcome(msg = "Welcome to ChinaÔºÅ",name = "Lily") 

    #1 positional, 1 keyword argument
    welcome("Lily", msg = "Welcome to China!")

Comme nous pouvons le voir, nous pouvons m√©langer des arguments positionnels et nomm√©s lors des appels de fonctions. Mais il faut se rappeler que les arguments nomm√©s doivent venir apr√®s les arguments positionnels.

Avoir un argument positionnel apr√®s un argument nomm√© entra√Ænera une erreur.

Par exemple, si l'appel de fonction est le suivant :

.. code-block:: python

    welcome(name="Lily","Welcome to China!")

Will result in an error:

>>> %Run -c $EDITOR_CONTENT
Traceback (most recent call last):
  File "<stdin>", line 5, in <module>
SyntaxError: non-keyword arg after keyword arg

Arguments Arbitraires
**************************

Parfois, vous ne connaissez pas √† l'avance le nombre d'arguments qui seront pass√©s √† la fonction.

Dans la d√©finition de la fonction, nous pouvons ajouter un ast√©risque (*) avant le nom du param√®tre.

.. code-block:: python

    def welcome(*names):
        """This function welcomes all the person
        in the name tuple"""
        #names is a tuple with arguments
        for name in names:
            print("Welcome to China!", name)
            
    welcome("Lily","John","Wendy")

>>> %Run -c $EDITOR_CONTENT
Welcome to China! Lily
Welcome to China! John
Welcome to China! Wendy

Ici, nous avons appel√© la fonction avec plusieurs arguments. Ces arguments sont regroup√©s dans un tuple avant d'√™tre transmis √† la fonction.

Dans la fonction, nous utilisons une boucle for pour r√©cup√©rer tous les arguments.

R√©cursion
----------------
En Python, nous savons qu'une fonction peut en appeler d'autres. Il est m√™me possible pour une fonction de s'appeler elle-m√™me. Ces types de constructions sont appel√©s fonctions r√©cursives.

Cela permet de parcourir des donn√©es pour obtenir un r√©sultat.

Le d√©veloppeur doit √™tre tr√®s prudent avec la r√©cursion, car il est facile d'√©crire une fonction qui ne se termine jamais ou qui utilise trop de m√©moire ou de puissance de traitement. Cependant, lorsqu'elle est correctement √©crite, la r√©cursion peut √™tre une approche tr√®s efficace et √©l√©gante sur le plan math√©matique.

.. code-block:: python

    def rec_func(i):
        if(i > 0):
            result = i + rec_func(i - 1)
            print(result)
        else:
            result = 0
        return result

    rec_func(6)

>>> %Run -c $EDITOR_CONTENT
1
3
6
10
15
21

Dans cet exemple, fonction_rec() est une fonction que nous avons d√©finie pour s'appeler elle-m√™me ("r√©cursion"). Nous utilisons la variable ``i`` comme donn√©e, et elle d√©cr√©mente (-1) √† chaque fois que nous faisons une r√©cursion. Lorsque la condition n'est plus sup√©rieure √† 0 (c'est-√†-dire 0), la r√©cursion se termine.

Pour les nouveaux d√©veloppeurs, il peut √™tre difficile de comprendre comment cela fonctionne, et le meilleur moyen est de tester et de modifier le code.

**Avantages de la R√©cursion**

* Les fonctions r√©cursives rendent le code propre et √©l√©gant.
* Une t√¢che complexe peut √™tre d√©compos√©e en sous-probl√®mes plus simples gr√¢ce √† la r√©cursion.
* La g√©n√©ration de s√©quences est plus facile avec la r√©cursion qu'avec des boucles imbriqu√©es.


**Inconv√©nients de la R√©cursion**

* Parfois, la logique derri√®re la r√©cursion est difficile √† suivre.
* Les appels r√©cursifs sont co√ªteux (inefficaces) car ils consomment beaucoup de m√©moire et de temps.
* Les fonctions r√©cursives sont difficiles √† d√©boguer.

