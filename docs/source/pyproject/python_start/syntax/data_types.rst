.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans le monde des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-achat et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions sp√©ciales durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Types de Donn√©es
=========================

Types de Donn√©es Int√©gr√©s
-------------------------------
MicroPython dispose des types de donn√©es suivants :

* Type Texte : str
* Types Num√©riques : int, float, complex
* Types S√©quentiels : list, tuple, range
* Type de Mappage : dict
* Types d‚ÄôEnsembles : set, frozenset
* Type Bool√©en : bool
* Types Binaires : bytes, bytearray, memoryview

Obtenir le Type de Donn√©e
-----------------------------
Vous pouvez obtenir le type de donn√©e de n'importe quel objet en utilisant la fonction ``type()`` :

.. code-block:: python

    a = 6.8
    print(type(a))

>>> %Run -c $EDITOR_CONTENT
<class 'float'>

D√©finir le Type de Donn√©e
--------------------------------
En MicroPython, il n'est pas n√©cessaire de d√©finir sp√©cifiquement le type de donn√©e. Il est d√©termin√© automatiquement lors de l'affectation d'une valeur √† la variable.

.. code-block:: python

    x = "welcome"
    y = 45
    z = ["apple", "banana", "cherry"]

    print(type(x))
    print(type(y))
    print(type(z))

>>> %Run -c $EDITOR_CONTENT
<class 'str'>
<class 'int'>
<class 'list'>
>>> 

D√©finir un Type de Donn√©e Sp√©cifique
---------------------------------------------

Si vous souhaitez sp√©cifier un type de donn√©e, vous pouvez utiliser les fonctions de constructeur suivantes :

.. list-table:: 
    :widths: 25 10
    :header-rows: 1

    *   - Exemple
        - Type de Donn√©e
    *   - x = int(20)
        - int
    *   - x = float(20.5)
        - float
    *   - x = complex(1j)
        - complex
    *   - x = str("Hello World")
        - str
    *   - x = list(("apple", "banana", "cherry"))
        - list
    *   - x = tuple(("apple", "banana", "cherry"))
        - tuple
    *   - x = range(6)
        - range
    *   - x = dict(name="John", age=36)
        - dict
    *   - x = set(("apple", "banana", "cherry"))
        - set
    *   - x = frozenset(("apple", "banana", "cherry"))
        - frozenset
    *   - x = bool(5)
        - bool
    *   - x = bytes(5)
        - bytes
    *   - x = bytearray(5)
        - bytearray
    *   - x = memoryview(bytes(5))
        - memoryview

Vous pouvez en imprimer certains pour voir le r√©sultat.

.. code-block:: python

    a = float(20.5)
    b = list(("apple", "banana", "cherry"))
    c = bool(5)

    print(a)
    print(b)
    print(c)

>>> %Run -c $EDITOR_CONTENT
20.5
['apple', 'banana', 'cherry']
True
>>> 

Conversion de Type
-----------------------
Vous pouvez convertir d'un type √† un autre avec les m√©thodes int(), float(), et complex() :
Le casting en Python se fait donc en utilisant des fonctions de constructeur :

* int() - construit un nombre entier √† partir d'un litt√©ral entier, d'un litt√©ral flottant (en supprimant les d√©cimales) ou d'un litt√©ral cha√Æne (si la cha√Æne repr√©sente un nombre entier)
* float() - construit un nombre flottant √† partir d'un litt√©ral entier, d'un litt√©ral flottant ou d'un litt√©ral cha√Æne (si la cha√Æne repr√©sente un flottant ou un entier)
* str() - construit une cha√Æne de caract√®res √† partir d'une grande vari√©t√© de types de donn√©es, y compris les cha√Ænes, les litt√©raux entiers et les litt√©raux flottants

.. code-block:: python

    a = float("5")
    b = int(3.7)
    c = str(6.0)

    print(a)
    print(b)
    print(c)

Remarque : Vous ne pouvez pas convertir des nombres complexes en un autre type num√©rique.
