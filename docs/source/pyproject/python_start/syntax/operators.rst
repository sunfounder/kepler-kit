.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans le monde des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-achat et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions sp√©ciales durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

Op√©rateurs
============
Operators are used to perform operations on variables and values.

* :ref:`Op√©rateurs Arithm√©tiques`

* :ref:`Op√©rateurs d'Affectation`

* :ref:`Op√©rateurs de Comparaison`

* :ref:`Op√©rateurs Logiques`

* :ref:`Op√©rateurs d'Identit√©`

* :ref:`Op√©rateurs d'Appartenance`

* :ref:`Op√©rateurs Binaires`

Op√©rateurs Arithm√©tiques
------------------------------
Vous pouvez utiliser des op√©rateurs arithm√©tiques pour effectuer des op√©rations math√©matiques courantes.

.. list-table:: 
    :widths: 10 30
    :header-rows: 1

    *   - Op√©rateur
        - Nom
    *   - ``+``
        - Addition
    *   - ``-``
        - Soustraction
    *   - ``*``
        - Multiplication
    *   - ``/``
        - Division
    *   - ``%``
        - Modulo
    *   - ``**``
        - Exponentiation
    *   - ``//``
        - Division enti√®re

.. code-block:: python

    x = 5
    y = 3

    a = x + y
    b = x - y
    c = x * y
    d = x / y
    e = x % y
    f = x ** y
    g = x // y

    print(a)
    print(b)
    print(c)
    print(d)
    print(e)
    print(f)
    print(g)

>>> %Run -c $EDITOR_CONTENT
8
2
15
1.666667
2
125
1
8
2
15
>>> 

Op√©rateurs d'Affectation
-------------------------------

Les op√©rateurs d'affectation permettent d'assigner des valeurs √† des variables.

.. list-table:: 
    :widths: 10 30 30
    :header-rows: 1

    *   - Op√©rateur
        - Exemple
        - √âquivaut √†
    *   - ``=``
        - a = 6
        - a =6
    *   - ``+=``
        - a += 6
        - a = a + 6
    *   - ``-=``
        - a -= 6
        - a = a - 6
    *   - ``*=``
        - a \*= 6
        - a = a * 6
    *   - ``/=``
        - a /= 6
        - a = a / 6
    *   - ``%=``
        - a %= 6
        - a = a % 6
    *   - ``**=``
        - a \*\*= 6
        - a = a ** 6
    *   - ``//=`` 
        - a //= 6
        - a = a // 6
    *   - ``&=``
        - a &= 6
        - a = a & 6
    *   - ``|=``
        - a \|= 6
        - a = a | 6
    *   - ``^=``
        - a ^= 6
        - a = a ^ 6
    *   - ``>>=``
        - a >>= 6
        - a = a \>\> 6
    *   - ``<<=``
        - a <<= 6
        - a = a << 6



.. code-block:: python

    a = 6

    a *= 6
    print(a)

>>> %Run test.py
36
>>> 

Op√©rateurs de Comparaison
--------------------------------
Les op√©rateurs de comparaison sont utilis√©s pour comparer deux valeurs.

.. list-table:: 
    :widths: 10 30
    :header-rows: 1

    *   - Op√©rateur
        - Nom
    *   - ``==``
        - √âgal √†
    *   - ``!=``
        - Diff√©rent de
    *   - ``<``
        - Inf√©rieur √†
    *   - ``>``
        - Sup√©rieur √†
    *   - ``>=``
        - Sup√©rieur ou √©gal √†
    *   - ``<=``
        - Inf√©rieur ou √©gal √†

.. code-block:: python

    a = 6
    b = 8

    print(a>b)

>>> %Run test.py
False
>>> 

Renvoie **False**, car **a** est inf√©rieur √† **b**.

Op√©rateurs Logiques
-----------------------

Les op√©rateurs logiques sont utilis√©s pour combiner des d√©clarations conditionnelles.

.. list-table:: 
    :widths: 10 30
    :header-rows: 1

    *   - Op√©rateur
        - Description
    *   - ``and``
        - Retourne True si les deux d√©clarations sont vraies
    *   - ``or``
        - Retourne True si l'une des d√©clarations est vraie
    *   - ``not``
        - Inverse le r√©sultat, retourne False si le r√©sultat est vrai

.. code-block:: python

    a = 6
    print(a > 2 and a < 8)

>>> %Run -c $EDITOR_CONTENT
True
>>> 

Op√©rateurs d'Identit√©
----------------------------

Les op√©rateurs d'identit√© sont utilis√©s pour comparer les objets, non pas pour voir s'ils sont √©gaux, mais pour v√©rifier s'ils sont exactement le m√™me objet, avec la m√™me localisation en m√©moire.

.. list-table:: 
    :widths: 10 30
    :header-rows: 1

    *   - Op√©rateur
        - Description
    *   - ``is``
        - Retourne True si les deux variables sont le m√™me objet
    *   - ``is not``
        - Retourne True si les deux variables ne sont pas le m√™me objet

.. code-block:: python

    a = ["hello", "welcome"]
    b = ["hello", "welcome"]
    c = a

    print(a is c)
    # retourne True car c est le m√™me objet que a

    print(a is b)
    # retourne False car a n'est pas le m√™me objet que b, m√™me s'ils ont le m√™me contenu

    print(a == b)
    # retourne True car a est √©gal √† b

>>> %Run -c $EDITOR_CONTENT
True
False
True
>>> 

Op√©rateurs d'Appartenance
------------------------------
Les op√©rateurs d'appartenance sont utilis√©s pour v√©rifier si une s√©quence est pr√©sente dans un objet.

.. list-table:: 
    :widths: 10 30
    :header-rows: 1

    *   - Op√©rateur
        - Description
    *   - ``in``
        - Retourne True si une s√©quence avec la valeur sp√©cifi√©e est pr√©sente dans l'objet
    *   - ``not in``
        - Retourne True si une s√©quence avec la valeur sp√©cifi√©e n'est pas pr√©sente dans l'objet

.. code-block:: python

    a = ["hello", "welcome", "Goodmorning"]

    print("welcome" in a)

>>> %Run -c $EDITOR_CONTENT
True
>>> 

Op√©rateurs Binaires
------------------------

Les op√©rateurs binaires sont utilis√©s pour comparer des nombres (binaires).

.. list-table:: 
    :widths: 10 20 50
    :header-rows: 1

    *   - Op√©rateur
        - Nom
        - Description
    *   - ``&``
        - ET (AND)
        - D√©finit chaque bit √† 1 si les deux bits sont 1
    *   - ``|``
        - OU (OR)
        - D√©finit chaque bit √† 1 si l'un des deux bits est 1
    *   - ``^``
        - XOR
        - D√©finit chaque bit √† 1 si un seul des deux bits est 1
    *   - ``~``
        - NON (NOT)
        - Inverse tous les bits
    *   - ``<<``
        - D√©calage √† gauche avec remplissage de z√©ro
        - D√©cale √† gauche en ajoutant des z√©ros √† droite et laisse tomber les bits les plus √† gauche
    *   - ``>>``
        - D√©calage √† droite sign√©
        - D√©cale √† droite en ajoutant des copies du bit le plus √† gauche et laisse tomber les bits les plus √† droite

.. code-block:: python

    num = 2

    print(num & 1)
    print(num | 1)
    print(num << 1)

>>> %Run -c $EDITOR_CONTENT
0
3
4
>>>