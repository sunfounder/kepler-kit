.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans le monde des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions sp√©ciales durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_74hc_788bs:

5.4 Graphismes 8x8 Pixels
=============================

La matrice LED est un affichage matriciel √† points basse r√©solution. Elle utilise un ensemble de diodes √©lectroluminescentes comme pixels pour cr√©er des motifs visuels.

Elles sont suffisamment lumineuses pour √™tre visibles en plein soleil, et vous pouvez les voir sur certains magasins, panneaux publicitaires, enseignes, et √©crans de messages variables (comme ceux des transports publics).

Dans ce kit, nous utilisons une matrice 8x8 √† points avec 16 broches. Les anodes sont connect√©es en lignes et les cathodes en colonnes (au niveau du circuit), ce qui permet de contr√¥ler ces 64 LEDs.

Pour allumer la premi√®re LED, il faut fournir un niveau haut pour la ligne 1 et un niveau bas pour la colonne 1. Pour allumer la deuxi√®me LED, il faut fournir un niveau haut pour la ligne 1, un niveau bas pour la colonne 2, et ainsi de suite. En contr√¥lant le courant √† travers chaque paire de lignes et de colonnes, chaque LED peut √™tre contr√¥l√©e individuellement pour afficher des caract√®res ou des images.

* :ref:`cpn_dot_matrix`
* :ref:`cpn_74hc595`

**Composants Requis**

Pour ce projet, nous avons besoin des composants suivants : 

Il est plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kepler Kit
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous :

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_dot_matrix`
        - 1
        - 
    *   - 6
        - :ref:`cpn_74hc595`
        - 2
        - |link_74hc595_buy|

**Sch√©ma**

|sch_ledmatrix|

La matrice de points 8x8 est contr√¥l√©e par deux puces 74HC595, l'une contr√¥lant les lignes et l'autre les colonnes, tandis que ces deux puces partagent G18~G20, ce qui permet de r√©duire consid√©rablement les ports I/O de la carte Pico W.

Le Pico W doit sortir un nombre binaire de 16 bits √† la fois, les 8 premiers bits sont envoy√©s au 74HC595 qui contr√¥le les lignes, et les 8 derniers bits sont envoy√©s au 74HC595 qui contr√¥le les colonnes, permettant ainsi √† la matrice de points d'afficher un motif sp√©cifique.

Q7': Broche de sortie en s√©rie, connect√©e √† DS d'un autre 74HC595 pour connecter plusieurs 74HC595 en s√©rie.

**C√¢blage**

Construisez le circuit. Comme le c√¢blage est complexe, faisons-le √©tape par √©tape.

**√âtape 1 :** Ins√©rez d'abord le Pico W, la matrice de points LED et les deux puces 74HC595 dans la 
breadboard. Connectez le 3.3V et le GND du Pico W aux trous sur les deux c√¥t√©s de la carte, puis 
connectez les broches 16 et 10 des deux puces 74HC595 √† VCC, les broches 13 et 8 √† GND.

.. note::
   Dans l'image Fritzing ci-dessus, le c√¥t√© avec l'√©tiquette est en bas.

|wiring_ledmatrix_4|

**√âtape 2 :** Connectez la broche 11 des deux 74HC595 ensemble, puis √† GP20 ; ensuite, 
la broche 12 des deux puces √† GP19 ; ensuite, la broche 14 du 74HC595 sur le c√¥t√© gauche 
√† GP18 et la broche 9 √† la broche 14 du second 74HC595.

|wiring_ledmatrix_3|

**√âtape 3 :** Le 74HC595 sur le c√¥t√© droit contr√¥le les colonnes de la matrice LED. 
Voir le tableau ci-dessous pour le mapping. Par cons√©quent, les broches Q0-Q7 du 74HC595 
sont mapp√©es respectivement avec les broches 13, 3, 4, 10, 6, 11, 15 et 16.

+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+
| **74HC595**        | **Q0** | **Q1** | **Q2** | **Q3** | **Q4** | **Q5** | **Q6** | **Q7** |
+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+
| **LED Dot Matrix** | **13** | **3**  | **4**  | **10** | **6**  | **11** | **15** | **16** |
+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+

|wiring_ledmatrix_2|

**√âtape 4 :** Connectez maintenant les LIGNES de la matrice LED. Le 74HC595 sur 
le c√¥t√© gauche contr√¥le les LIGNES de la matrice LED. Voir le tableau ci-dessous 
pour le mapping. Nous voyons que les broches Q0-Q7 du 74HC595 sur la gauche sont 
mapp√©es respectivement avec les broches 9, 14, 8, 12, 1, 7, 2 et 5.

+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+
| **74HC595**        | **Q0** | **Q1** | **Q2** | **Q3** | **Q4** | **Q5** | **Q6** | **Q7** |
+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+
| **LED Dot Matrix** | **9**  | **14** | **8**  | **12** | **1**  | **7**  | **2**  | **5**  |
+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+

|wiring_ledmatrix_1|

**Code**

.. note::

    * Ouvrez le fichier ``5.4_8x8_pixel_graphics.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Ex√©cuter le script actuel" ou appuyez simplement sur F5 pour l'ex√©cuter.

    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite.

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.


.. code-block:: python

    import machine
    import time

    sdi = machine.Pin(18,machine.Pin.OUT)
    rclk = machine.Pin(19,machine.Pin.OUT)
    srclk = machine.Pin(20,machine.Pin.OUT)


    glyph = [0xFF,0xBB,0xD7,0xEF,0xD7,0xBB,0xFF,0xFF]

    # D√©placer les donn√©es vers 74HC595
    def hc595_in(dat):
        for bit in range(7,-1, -1):
            srclk.low()
            time.sleep_us(30)
            sdi.value(1 & (dat >> bit))
            time.sleep_us(30)
            srclk.high()

    def hc595_out():
        rclk.high()
        time.sleep_us(200)
        rclk.low()

    while True:
        for i in range(0,8):
            hc595_in(glyph[i])
            hc595_in(0x80>>i)
            hc595_out()

Une fois le programme en cours d'ex√©cution, vous verrez un graphique **x** affich√© sur la matrice de points 8x8.

**Comment √ßa fonctionne ?**

Ici, nous utilisons deux 74HC595 pour fournir des signaux aux lignes et colonnes de la matrice de points.
La m√©thode pour fournir les signaux est la m√™me que ``hc595_shift(dat)`` des chapitres pr√©c√©dents, mais ici nous devons √©crire un nombre binaire de 16 bits √† la fois.
Nous avons donc scind√© ``hc595_shift(dat)`` en deux fonctions : ``hc595_in(dat)`` et ``hc595_out()``.

.. code-block:: python

    def hc595_in(dat):
        for bit in range(7,-1, -1):
            srclk.low()
            time.sleep_us(30)
            sdi.value(1 & (dat >> bit))
            time.sleep_us(30)
            srclk.high()

    def hc595_out():
        rclk.high()
        time.sleep_us(200)
        rclk.low()

Ensuite, appelez ``hc595_in(dat)`` deux fois dans la boucle principale, √©crivez deux nombres binaires de 8 bits et appelez ``hc595_out()`` pour afficher un motif.

Cependant, puisque les LEDs de la matrice partagent des p√¥les communs, le contr√¥le de plusieurs lignes/colonnes simultan√©ment peut causer des interf√©rences (par exemple, si vous allumez (1,1) et (2,2) en m√™me temps, (1,2) et (2,1) seront √©galement allum√©s involontairement).
Il est donc n√©cessaire d'activer une colonne (ou une ligne) √† la fois, de parcourir les 8 cycles, et d'utiliser le principe de l'image r√©siduelle pour que l'≈ìil humain fusionne 8 motifs et obtienne un motif de 8x8 pixels.

.. code-block:: python

    while True:
        for i in range(0,8):
            hc595_in(glyph[i])
            hc595_in(0x80>>i)
            hc595_out()

Dans cet exemple, la fonction principale contient une boucle ``for``, et lorsque ``i`` est √©gal √† 1, seule la premi√®re ligne est activ√©e (la puce de contr√¥le obtient la valeur ``0x80``) et l'image de la premi√®re ligne est √©crite. 
Lorsque ``i`` est √©gal √† 2, la deuxi√®me ligne est activ√©e (la puce de contr√¥le obtient la valeur ``0x40``) et l'image de la deuxi√®me ligne est √©crite. Et ainsi de suite, pour compl√©ter les 8 sorties.

Incidemment, comme l'affichage √† 4 chiffres et 7 segments, il doit maintenir le taux de rafra√Æchissement pour √©viter que l'≈ìil humain ne per√ßoive un scintillement. Par cons√©quent, il est pr√©f√©rable d'√©viter les ``sleep()`` suppl√©mentaires dans la boucle principale.

**Pour en savoir plus**

Essayez de remplacer ``glyph`` par les tableaux suivants et voyez ce que cela donne !

.. code-block:: python

    glyph1 = [0xFF,0xEF,0xC7,0xAB,0xEF,0xEF,0xEF,0xFF]
    glyph2 = [0xFF,0xEF,0xEF,0xEF,0xAB,0xC7,0xEF,0xFF]
    glyph3 = [0xFF,0xEF,0xDF,0x81,0xDF,0xEF,0xFF,0xFF]
    glyph4 = [0xFF,0xF7,0xFB,0x81,0xFB,0xF7,0xFF,0xFF]
    glyph5 = [0xFF,0xBB,0xD7,0xEF,0xD7,0xBB,0xFF,0xFF]
    glyph6 = [0xFF,0xFF,0xF7,0xEB,0xDF,0xBF,0xFF,0xFF]

Ou bien, essayez de dessiner vos propres graphiques.
