.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete junto a otros entusiastas en el mundo de Raspberry Pi, Arduino y ESP32.

    **¬øPor qu√© unirte?**

    - **Soporte Experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances Exclusivos**: Accede anticipadamente a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones y Sorteos Festivos**: Participa en sorteos y promociones especiales.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _py_bubble_level:

7.12 Nivel de Burbuja Digital
=============================

Un `bubble Level <https://en.wikipedia.org/wiki/Spirit_level>`_ es un instrumento dise√±ado para indicar si una superficie est√° horizontal (nivelada) o vertical (aplomada). Existen diferentes tipos de niveles de burbuja utilizados por carpinteros, alba√±iles, top√≥grafos, y trabajadores en diversas √°reas de la construcci√≥n y el metal. Tambi√©n se usa en fotograf√≠a y videograf√≠a para medir la inclinaci√≥n.

Aqu√≠ creamos un nivel de burbuja digital utilizando el MPU6050 y una matriz LED 8x8. Al inclinar el MPU6050, la ‚Äúburbuja‚Äù en la matriz LED se desviar√° en la misma direcci√≥n.

**Componentes Requeridos**

En este proyecto, necesitamos los siguientes componentes.

Es conveniente adquirir un kit completo; aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N.¬∫
        - COMPONENTE
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_dot_matrix`
        - 1
        - 
    *   - 6
        - :ref:`cpn_74hc595`
        - 2
        - |link_74hc595_buy|
    *   - 7
        - :ref:`cpn_mpu6050`
        - 1
        - 

**Esquema**

|sch_bubble_level|

El MPU6050 obtiene los valores de aceleraci√≥n en cada direcci√≥n y calcula el √°ngulo de inclinaci√≥n.

El programa dibuja un punto de 2x2 en la matriz LED utilizando datos de los dos chips 74HC595. 

A medida que el √°ngulo de inclinaci√≥n cambia, el programa env√≠a diferentes datos a los chips 74HC595 y cambia la posici√≥n del punto, creando un efecto de burbuja.

**Conexi√≥n**

|wiring_digital_bubble_level|

**C√≥digo**

.. note::

    * Abre el archivo ``7.12_digital_bubble_level.py`` en la ruta ``kepler-kit-main/micropython`` o copia este c√≥digo en Thonny, luego haz clic en "Run Current Script" o simplemente presiona F5 para ejecutarlo.
    * No olvides seleccionar el int√©rprete "MicroPython (Raspberry Pi Pico)" en la esquina inferior derecha.

    * Para tutoriales detallados, consulta :ref:`open_run_code_py`.
    * Aqu√≠ necesitas las bibliotecas ``imu.py`` y ``vector3d.py``; verifica si han sido cargadas en Pico W. Para un tutorial detallado, consulta :ref:`add_libraries_py`.

.. code-block:: python

    import machine
    from machine import I2C, Pin
    import time
    import math
    from imu import MPU6050

    # Inicializar comunicaci√≥n I2C con el sensor MPU6050
    i2c = I2C(1, sda=Pin(6), scl=Pin(7), freq=400000)
    mpu = MPU6050(i2c)

    # Funci√≥n para calcular la distancia entre dos puntos
    def dist(a, b):
        return math.sqrt((a * a) + (b * b))

    # Funci√≥n para calcular la rotaci√≥n en el eje y
    def get_y_rotation(x, y, z):
        radians = math.atan2(x, dist(y, z))
        return -math.degrees(radians)

    # Funci√≥n para calcular la rotaci√≥n en el eje x
    def get_x_rotation(x, y, z):
        radians = math.atan2(y, dist(x, z))
        return math.degrees(radians)

    # Funci√≥n para obtener los √°ngulos actuales del sensor MPU6050
    def get_angle():
        y_angle = get_y_rotation(mpu.accel.x, mpu.accel.y, mpu.accel.z)
        x_angle = get_x_rotation(mpu.accel.x, mpu.accel.y, mpu.accel.z)
        return x_angle, y_angle

    # Inicializar los pines del registro de desplazamiento para controlar la matriz LED
    sdi = machine.Pin(18, machine.Pin.OUT)
    rclk = machine.Pin(19, machine.Pin.OUT)
    srclk = machine.Pin(20, machine.Pin.OUT)

    # Funci√≥n para desplazar datos en el registro de desplazamiento
    def hc595_in(dat):
        for bit in range(7, -1, -1):
            srclk.low()
            time.sleep_us(30)
            sdi.value(1 & (dat >> bit))
            time.sleep_us(30)
            srclk.high()

    # Funci√≥n para sacar los datos del registro de desplazamiento a la matriz LED
    def hc595_out():
        rclk.high()
        time.sleep_us(200)
        rclk.low()

    # Funci√≥n para mostrar un glifo (matriz 8x8) en la matriz LED
    def display(glyph):
        for i in range(0, 8):
            hc595_in(glyph[i])
            hc595_in(0x80 >> i)
            hc595_out()

    # Convierte una matriz 2D en un glifo que se puede mostrar en la matriz LED
    def matrix_2_glyph(matrix):
        glyph = [0 for i in range(8)]
        for i in range(8):
            for j in range(8):
                glyph[i] += matrix[i][j] << j
        return glyph

    # Limita un valor entre un m√≠nimo y un m√°ximo especificado
    def clamp_number(val, min_val, max_val):
        return min_val if val < min_val else max_val if val > max_val else val

    # Mapea un valor de un rango a otro
    def interval_mapping(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    # Calcula la posici√≥n de la burbuja en la matriz seg√∫n las lecturas del MPU6050
    sensitivity = 4  # Sensibilidad del movimiento de la burbuja
    matrix_range = 7  # Tama√±o de la matriz es 8x8, as√≠ que el rango es 0-7
    point_range = matrix_range - 1  # La posici√≥n de la burbuja debe estar entre 0 y 6

    # Funci√≥n para calcular la posici√≥n de la burbuja basada en los datos del sensor
    def bubble_position():
        y, x = get_angle()  # Obtener los √°ngulos actuales de rotaci√≥n
        x = int(clamp_number(interval_mapping(x, 90, -90, 0 - sensitivity, point_range + sensitivity), 0, point_range))
        y = int(clamp_number(interval_mapping(y, -90, 90, point_range + sensitivity, 0 - sensitivity), 0, point_range))
        return [x, y]

    # Coloca la burbuja (representada apagando LEDs 2x2) en la matriz
    def drop_bubble(matrix, bubble):
        matrix[bubble[0]][bubble[1]] = 0
        matrix[bubble[0] + 1][bubble[1]] = 0
        matrix[bubble[0]][bubble[1] + 1] = 0
        matrix[bubble[0] + 1][bubble[1] + 1] = 0
        return matrix

    # Bucle principal
    while True:
        matrix = [[1 for i in range(8)] for j in range(8)]  # Crear una matriz vac√≠a (todos los LEDs encendidos)
        bubble = bubble_position()  # Obtener la posici√≥n actual de la burbuja seg√∫n los datos del sensor
        matrix = drop_bubble(matrix, bubble)  # Colocar la burbuja en la matriz
        display(matrix_2_glyph(matrix))  # Mostrar la matriz en la pantalla LED
        time.sleep(0.1)  # A√±adir un peque√±o retraso para ralentizar las actualizaciones

Una vez que el programa est√© en ejecuci√≥n, coloca la protoboard en una 
superficie nivelada. Aparecer√° un punto en el centro de la matriz LED 
(si no est√° centrado, es posible que el MPU6050 no est√© nivelado). 
Al inclinar la protoboard, el punto se desplazar√° en la direcci√≥n de la inclinaci√≥n.
