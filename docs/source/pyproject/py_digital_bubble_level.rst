.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions sp√©ciales durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_bubble_level:

7.12 Niveau √† bulle num√©rique
=================================

Un `bubble Level <https://en.wikipedia.org/wiki/Spirit_level>`_ est un instrument con√ßu pour indiquer si une surface est horizontale (de niveau) ou verticale (d'aplomb). Diff√©rents types de niveaux √† bulle sont utilis√©s par les menuisiers, les ma√ßons, les poseurs de briques, les ouvriers du b√¢timent, les g√©om√®tres, les m√©caniciens, ainsi que dans certains travaux de photographie et de vid√©ographie.

Ici, nous r√©alisons un niveau √† bulle num√©rique en utilisant un MPU6050 et une matrice LED 8x8. Lorsque vous inclinez le MPU6050, la bulle sur la matrice LED se d√©place √©galement.

**Composants Requis**

Pour ce projet, nous avons besoin des composants suivants : 

Il est plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kepler Kit	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous :

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_dot_matrix`
        - 1
        - 
    *   - 6
        - :ref:`cpn_74hc595`
        - 2
        - |link_74hc595_buy|
    *   - 7
        - :ref:`cpn_mpu6050`
        - 1
        - 

**Sch√©ma**

|sch_bubble_level|

Le MPU6050 mesure les valeurs d'acc√©l√©ration dans chaque direction et calcule l'angle d'inclinaison.

En cons√©quence, le programme dessine un point 2x2 sur la matrice en utilisant les donn√©es des deux puces 74HC595.

Lorsque l'angle d'inclinaison change, le programme envoie diff√©rentes donn√©es aux puces 74HC595, et la position du point se d√©place, cr√©ant un effet de bulle.

**C√¢blage**

|wiring_digital_bubble_level| 

**Code**

.. note::

    * Ouvrez le fichier ``7.12_digital_bubble_level.py`` sous le chemin ``kepler-kit-main/micropython`` ou copiez ce code dans Thonny, puis cliquez sur "Ex√©cuter le script actuel" ou appuyez simplement sur F5 pour l'ex√©cuter.
    * N'oubliez pas de s√©lectionner l'interpr√©teur "MicroPython (Raspberry Pi Pico)" en bas √† droite.

    * Pour des tutoriels d√©taill√©s, veuillez vous r√©f√©rer √† :ref:`open_run_code_py`.
    * Vous devez utiliser les biblioth√®ques ``imu.py`` et ``vector3d.py`` ; v√©rifiez si elles ont √©t√© t√©l√©charg√©es sur le Pico W. Pour un tutoriel d√©taill√©, r√©f√©rez-vous √† :ref:`add_libraries_py`.

.. code-block:: python

    import machine
    from machine import I2C, Pin
    import time
    import math
    from imu import MPU6050

    # Initialiser la communication I2C avec le capteur MPU6050
    i2c = I2C(1, sda=Pin(6), scl=Pin(7), freq=400000)
    mpu = MPU6050(i2c)

    # Fonction pour calculer la distance entre deux points
    def dist(a, b):
        return math.sqrt((a * a) + (b * b))

    # Fonction pour calculer la rotation le long de l'axe Y
    def get_y_rotation(x, y, z):
        radians = math.atan2(x, dist(y, z))
        return -math.degrees(radians)

    # Fonction pour calculer la rotation le long de l'axe X
    def get_x_rotation(x, y, z):
        radians = math.atan2(y, dist(x, z))
        return math.degrees(radians)

    # Fonction pour obtenir les angles actuels du capteur MPU6050
    def get_angle():
        y_angle = get_y_rotation(mpu.accel.x, mpu.accel.y, mpu.accel.z)
        x_angle = get_x_rotation(mpu.accel.x, mpu.accel.y, mpu.accel.z)
        return x_angle, y_angle

    # Initialiser les broches du registre √† d√©calage pour contr√¥ler la matrice LED
    sdi = machine.Pin(18, machine.Pin.OUT)
    rclk = machine.Pin(19, machine.Pin.OUT)
    srclk = machine.Pin(20, machine.Pin.OUT)

    # Fonction pour d√©caler les donn√©es dans le registre √† d√©calage
    def hc595_in(dat):
        for bit in range(7, -1, -1):
            srclk.low()
            time.sleep_us(30)
            sdi.value(1 & (dat >> bit))
            time.sleep_us(30)
            srclk.high()

    # Fonction pour sortir les donn√©es du registre √† d√©calage vers la matrice LED
    def hc595_out():
        rclk.high()
        time.sleep_us(200)
        rclk.low()

    # Fonction pour afficher un glyphe (matrice 8x8) sur la matrice LED
    def display(glyph):
        for i in range(0, 8):
            hc595_in(glyph[i])
            hc595_in(0x80 >> i)
            hc595_out()

    # Convertir une matrice 2D en glyphe pour l'afficher sur la matrice LED
    def matrix_2_glyph(matrix):
        glyph = [0 for i in range(8)]
        for i in range(8):
            for j in range(8):
                glyph[i] += matrix[i][j] << j
        return glyph

    # Limiter une valeur entre un minimum et un maximum sp√©cifi√©s
    def clamp_number(val, min_val, max_val):
        return min_val if val < min_val else max_val if val > max_val else val

    # Mapper une valeur d'une plage √† une autre
    def interval_mapping(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    # Calculer la position de la bulle dans la matrice en fonction des lectures du MPU6050
    sensitivity = 4  # Sensibilit√© du mouvement de la bulle
    matrix_range = 7  # La taille de la matrice est de 8x8, donc l'intervalle est 0-7
    point_range = matrix_range - 1  # La position de la bulle doit √™tre entre 0 et 6

    # Fonction pour calculer la position de la bulle bas√©e sur les donn√©es du capteur
    def bubble_position():
        y, x = get_angle()  # Obtenez les angles de rotation actuels
        x = int(clamp_number(interval_mapping(x, 90, -90, 0 - sensitivity, point_range + sensitivity), 0, point_range))
        y = int(clamp_number(interval_mapping(y, -90, 90, point_range + sensitivity, 0 - sensitivity), 0, point_range))
        return [x, y]

    # Placer la bulle (repr√©sent√©e par l'extinction de 2x2 LEDs) dans la matrice
    def drop_bubble(matrix, bubble):
        matrix[bubble[0]][bubble[1]] = 0
        matrix[bubble[0] + 1][bubble[1]] = 0
        matrix[bubble[0]][bubble[1] + 1] = 0
        matrix[bubble[0] + 1][bubble[1] + 1] = 0
        return matrix

    # Boucle principale
    while True:
        matrix = [[1 for i in range(8)] for j in range(8)]  # Cr√©ez une matrice vide (toutes les LEDs allum√©es)
        bubble = bubble_position()  # Obtenez la position actuelle de la bulle selon les donn√©es du capteur
        matrix = drop_bubble(matrix, bubble)  # Placez la bulle dans la matrice
        display(matrix_2_glyph(matrix))  # Affichez la matrice sur la grille LED
        time.sleep(0.1)  # Ajoutez un court d√©lai pour ralentir les mises √† jour

Une fois le programme ex√©cut√©, placez la breadboard sur une surface plane. Un point appara√Ætra au centre de la matrice LED (si ce n'est pas au centre, le MPU6050 pourrait ne pas √™tre √† niveau). Lorsque vous inclinez la breadboard, le point se d√©placera dans la direction de l'inclinaison.
