.. note:: 

    Bonjour et bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 ! Plongez au c≈ìur de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits.
    - **Remises sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et des promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

8. Cr√©er une Application Web avec @Anvil
============================================

Nous allons d√©velopper un projet permettant une communication bidirectionnelle entre le Raspberry Pi Pico W et les serveurs d'Anvil.
La temp√©rature et l'humidit√© transmises par le Pico W seront affich√©es en temps r√©el sur Anvil. En outre, vous pourrez saisir des messages sur Anvil qui s'afficheront sur l'√©cran LCD I2C 1602 du Pico W.

|anvil|

**1. Composants n√©cessaires**

Pour ce projet, nous aurons besoin des composants suivants.

Il est certainement plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kepler Kit	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_i2c_lcd`
        - 1
        - |link_i2clcd1602_buy|
    *   - 6
        - :ref:`cpn_dht11`
        - 1
        - |link_dht22_buy|
    *   - 7
        - :ref:`cpn_lipo_charger`
        - 1
        -  
    *   - 8
        - Batterie 18650
        - 1
        -  
    *   - 9
        - Support de batterie
        - 1
        -  

**2. Monter le circuit**

    .. warning:: 
        
        Assurez-vous que votre module de charge Li-po est connect√© comme indiqu√© sur le sch√©ma. Sinon, un court-circuit pourrait endommager votre batterie et le circuit.

.. image:: img/wiring/8.anvil_bb.png
    :width: 800


**3. Cr√©er une Application Anvil**

1. Rendez-vous sur |link_anvil| et cliquez sur **Commencer √† cr√©er**.

    .. image:: img/anvil-1.png

2. Connectez-vous ou inscrivez-vous.

    .. image:: img/anvil-2.png

3. Cr√©ez une **Nouvelle Application Vierge**.

    .. image:: img/anvil-3.png

4. S√©lectionnez le **Th√®me Material Design**.

    .. image:: img/anvil-4.png

5. Vous √™tes maintenant sur la page d'√©dition de l'application.

    .. image:: img/anvil-5.png

6. Depuis la bo√Æte √† outils, faites glisser un outil **Label** et placez-le sur **D√©posez le titre ici**.

    .. image:: img/anvil-6.png

7. Vous pouvez remplir le texte de l'√©tiquette dans le champ **texte** du menu **Propri√©t√©s**.

    .. image:: img/anvil-7.png

8. De la m√™me mani√®re, glissez une **TextBox** sur la droite.

    .. image:: img/anvil-17.png

9. Glissez un **bouton** sur l'extr√™me droite et modifiez le champ **texte**. Ce bouton servira √† "envoyer" un message au Raspberry Pi Pico W.

    .. image:: img/anvil-14.png

10. Apr√®s avoir double-cliqu√© sur le bouton **MONTRER**, la page passera du mode Design au mode Code et mettra en surbrillance le code pour le **bouton**. Vous devez saisir le code suivant, qui sert √† appeler une fonction sur le serveur (ici, le Pico W).

    .. code-block:: python
    
        anvil.server.call_s("show_message",self.text_box_1.text)

    * ``show_message`` est la fonction qui sera d√©finie lors de la programmation du Pico W.
    * ``self.text_box_1.text`` est le message que vous saisissez dans la bo√Æte de texte, qui sera envoy√© comme param√®tre √† ``show_message()``.

    .. image:: img/anvil-15.png

11. Revenez √† la page Design, glissez une autre √©tiquette et placez-la sous les √©l√©ments pr√©c√©dents. Cette √©tiquette affichera les donn√©es du capteur DHT11 provenant du Pico W.

    .. image:: img/anvil-9.png

12. Dans la **bo√Æte √† outils**, cliquez sur **Plus de composants** et glissez le **Timer** dans le formulaire.

    .. image:: img/anvil-12.png

13. Avec les **Propri√©t√©s**, d√©finissez le timer sur un intervalle de 3 secondes. Ce d√©lai sera utilis√© pour mettre √† jour l'√©cran avec les donn√©es de notre capteur.

    .. image:: img/anvil-18.png

14. Double-cliquez sur l'outil **Timer** pour le programmer. Utilisez la fonction ``anvil.server.call_s()`` pour appeler la fonction ``publish_data()`` du serveur, obtenir le message √† afficher sur l'application Anvil, et l'assigner √† ``self.label_2.text`` pour finir.

    .. code-block:: python

        data=anvil.server.call_s("publish_data")
        self.label_2.text=data
    
    .. image:: img/anvil-16.png

15. √Ä ce stade, la partie √† programmer sur Anvil est termin√©e. Vous pouvez trouver plus de d√©tails sur l'utilisation d'Anvil √† partir de |link_anvil_docs|.
**4. Configuration du Pico W** 

Pour simplifier la connexion du Raspberry Pi Pico W aux services Anvil, Anvil utilise une image de firmware personnalis√©e. Le firmware du Pico W est √©crit en MicroPython et appara√Æt comme un lecteur USB contenant deux fichiers (boot.py et main.py). Le Pico W doit √™tre flash√© avec ce firmware personnalis√© et connect√© √† notre Wi-Fi avant de pouvoir commencer √† coder.

1. T√©l√©chargez le firmware personnalis√© du Raspberry Pi Pico W via |link_anvil_firmware|. Il est recommand√© de t√©l√©charger la version compl√®te.

    .. image:: img/anvil-p-1.png


2. Appuyez et maintenez le bouton **BOOTSEL** sur le Pico W, puis connectez-le √† votre ordinateur √† l'aide d'un c√¢ble micro USB. Rel√¢chez BOOTSEL une fois que le lecteur RPI-RP2 appara√Æt sur votre ordinateur.

    .. image:: img/anvil-p-2.png
        :width: 300


3. Glissez et d√©posez le fichier ``.uf2`` que vous venez de t√©l√©charger, et le Pico W installera le firmware √† ce moment-l√†. Une fois termin√©, le Pico W rechargera le lecteur et vous verrez les fichiers ``main.py`` et ``boot.py``.

    .. note:: 
        Avant de r√©installer le firmware, sauvegardez tous vos fichiers importants stock√©s dans le Pico W.

    .. image:: img/anvil-p-3.png

4. S√©lectionnez "MicroPython(Raspberry Pi Pico).COMXX" comme interpr√©teur dans Thonny IDE. Apr√®s avoir cliqu√© sur **Affichage** -> **Fichiers**, vous verrez le lecteur local et le disque dur du Raspberry Pi Pico.

    .. image:: img/anvil-20.png

5. Double-cliquez sur le script ``boot.py`` et renseignez le ``SSID`` et ``PASSWORD`` de votre WiFi.

    .. image:: img/anvil-21.png


**5. Compl√©ter le Code**


#. T√©l√©chargez ``dht.py`` et ``lcd1602.py`` depuis le chemin ``kepler-kit-main/libs`` vers le Raspberry Pi Pico W.

    .. image:: img/anvil-22.png


#. Ouvrez ``main.py`` et remplacez le code d'origine par le code suivant.

    .. code-block:: python

        import anvil.pico
        import uasyncio as a
        from machine import Pin,I2C

        from lcd1602 import LCD
        lcd = LCD()

        from dht import DHT11
        sensor = DHT11(Pin(16, Pin.OUT, Pin.PULL_DOWN))

        UPLINK_KEY = "<uplink_key_goes_here>"

        @anvil.pico.callable(is_async=True)
        async def show_message(text):
            print(f"show anvil's input message: {text}")
            lcd.clear()
            lcd.message(text)
            return

        @anvil.pico.callable(is_async=True)
        async def publish_data():
            sensor.measure()
            return "Temperature: {}, Humidity: {}".format(sensor.temperature, sensor.humidity)

        # Connecter l'Anvil Uplink. En MicroPython, cet appel bloquera ind√©finiment.

        anvil.pico.connect(UPLINK_KEY)


        # Vous pouvez faire bien plus avec Anvil sur votre Pico W.
        #
        # Voir https://anvil.works/pico pour plus d'informations


#. Retournez √† l'interface Anvil et appuyez sur l'option Uplink dans les param√®tres de l'App Browser.

    .. image:: img/anvil-p-6.png


#. Cliquez sur **Activer l'Uplink du serveur Anvil pour cette application** pour obtenir la cl√© uplink.

    .. image:: img/anvil-p-7.png


#. Copiez-la et remplacez ``<uplink_key_goes_here>`` dans ``main.py``, ce qui permettra √† votre Pico W de se connecter √† l'APP Anvil que vous avez cr√©√©e.

    .. image:: img/anvil-p-8.png


**6. Ex√©cuter le Projet**

1. Cliquez sur le bouton **Ex√©cuter le script actuel** ou appuyez sur F5 pour l'ex√©cuter. Apr√®s une connexion r√©ussie, vous verrez un message de connexion r√©ussie dans le Shell.

    .. image:: img/anvil-19.png


2. Lancez Anvil, et vous pourrez voir la temp√©rature et l'humidit√© s'afficher depuis l'application Anvil. Si vous cliquez sur le bouton **MONTRER** apr√®s avoir saisi un message dans la bo√Æte de texte, l'I2C LCD1602 affichera le message que vous avez saisi.

    .. note:: 
        Si le caract√®re que vous avez saisi ne s'affiche pas sur l'I2C LCD1602, vous pouvez tourner le potentiom√®tre √† l'arri√®re du module pour augmenter le contraste.

    .. image:: img/anvil-r-2.png

**6. Publier l'Application**

Si vous souhaitez partager votre application, vous pouvez g√©n√©rer un lien de partage en suivant la m√©thode ci-dessous.

1. Retournez √† la page **Anvil** et cliquez sur l'option **Publier l'application** dans les param√®tres de l'**App Browser**.

    .. image:: img/anvil-s-1.png


2. Dans l'onglet **Partager via un lien priv√©**, vous verrez une liste de liens. Toute personne pourra acc√©der √† votre application via ce lien.

    .. image:: img/anvil-s-2.png


3. Acc√©dez au lien et votre application est pr√™te √† √™tre utilis√©e directement.

    .. image:: img/anvil-s-3.png


4. Vous pouvez √©galement partager votre application via un lien public, renseignez votre nom de domaine personnalis√© et cliquez sur **Appliquer** pour l'activer.

    .. image:: img/anvil-s-4.png


**Comment √ßa fonctionne ?**

Voici la structure de base de ``main.py``, qui forme la base de la communication entre le Pico W et l'application Anvil.

.. code-block:: python

    import anvil.pico
    import uasyncio as a

    UPLINK_KEY = "<uplink_key_goes_here>"

    # Connecter l'Anvil Uplink. En MicroPython, cet appel bloquera ind√©finiment.

    anvil.pico.connect(UPLINK_KEY)

    # Vous pouvez faire bien plus avec Anvil sur votre Pico W.
    #
    # Voir https://anvil.works/pico pour plus d'informations

Configurer le dht11 et lcd1602. Les d√©tails d'utilisation de ces deux composants sont disponibles dans :ref:`py_dht11` et :ref:`py_lcd`.

.. code-block:: python
    :emphasize-lines: 5,6

    from machine import Pin,I2C

    from lcd1602 import LCD
    lcd = LCD()

    from dht import DHT11
    sensor = DHT11(Pin(16, Pin.OUT, Pin.PULL_DOWN))


Dans le code Anvil, nous avons appel√© deux fonctions internes du serveur (Pico W). 

La premi√®re est ``show_message()``, dont la fonction est de faire afficher √† l'√©cran LCD le message saisi par Anvil.
Le d√©corateur ``@anvil.pico.callable(is_async=True)`` rend cette fonction appelable par Anvil.

.. code-block:: python

    @anvil.pico.callable(is_async=True)
    async def show_message(text):
        print(f"show anvil's input message: {text}")
        lcd.clear()
        lcd.message(text)
        return


Ensuite, il y a ``publish_data()``, qui r√©cup√®re la valeur du dht11 et retourne la temp√©rature et l'humidit√© √† Anvil.
Encore une fois, il utilise le d√©corateur ``@anvil.pico.callable(is_async=True)`` pour le rendre appelable par Anvil.

.. code-block:: python

    @anvil.pico.callable(is_async=True)
    async def publish_data():
        sensor.measure()
        return "Temperature: {}, Humidity: {}".format(sensor.temperature, sensor.humidity)


