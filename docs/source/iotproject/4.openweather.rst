.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas posventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones Exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.


4. Clima en tiempo real desde @OpenWeatherMap
=================================================

Este proyecto consiste en hacer un reloj inteligente que muestra el clima en tu ciudad junto con la hora en la pantalla LCD.


**1. Componentes Requeridos**

Para este proyecto, necesitamos los siguientes componentes. 

Es conveniente adquirir el kit completo; aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado a trav√©s de los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N.¬∫
        - COMPONENTE	
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_i2c_lcd`
        - 1
        - |link_i2clcd1602_buy|
    *   - 6
        - :ref:`cpn_lipo_charger`
        - 1
        -  
    *   - 7
        - Bater√≠a 18650
        - 1
        -  
    *   - 8
        - Portapilas
        - 1
        -  


**2. Construye el Circuito**

    .. warning:: 
       
        Aseg√∫rate de que el M√≥dulo de Carga Li-po est√© conectado como se muestra en el diagrama. De lo contrario, un cortocircuito podr√≠a da√±ar la bater√≠a y el circuito.

.. image:: img/wiring/4.owm_bb.png


**3. Obt√©n la clave de la API de OpenWeather**

|link_openweather| es un servicio en l√≠nea de OpenWeather Ltd que proporciona datos meteorol√≥gicos globales a trav√©s de una API, incluyendo el clima actual, pron√≥sticos, nowcasts y datos hist√≥ricos para cualquier ubicaci√≥n geogr√°fica.

#. Visita |link_openweather| para iniciar sesi√≥n o crear una cuenta.

    .. image:: img/OWM-1.png

#. Accede a la p√°gina de API desde la barra de navegaci√≥n.

    .. image:: img/OWM-2.png

#. Busca **Current Weather Data** y haz clic en Subscribe.

    .. image:: img/OWM-3.png

#. En **Current weather and forecasts collection**, suscr√≠bete al servicio adecuado. Para este proyecto, la opci√≥n gratuita es suficiente.

   .. image:: img/OWM-4.png

#. Copia la clave de la p√°gina **API keys**.

   .. image:: img/OWM-5.png

#. Copia la clave en el archivo ``secrets.py`` en la Raspberry Pi Pico W.

    .. image:: img/4_openweather1.png

    .. note::

        Si no tienes los archivos ``do_connect.py`` y ``secrets.py`` en tu Pico W, consulta :ref:`iot_access` para crearlos.

    .. code-block:: python
        :emphasize-lines: 5

        secrets = {
        'ssid': 'SSID',
        'password': 'PASSWORD',
        'webhooks_key':'WEBHOOKS_API_KEY',
        'openweather_api_key':'OPENWEATHERMAP_API_KEY'
        }

**4. Ejecuta el Script**

#. Abre el archivo ``4_weather.py`` en la ruta ``kepler-kit-main/iot``, haz clic en el bot√≥n **Run current script** o presiona F5 para ejecutarlo.

    .. image:: img/4_openweather2.png

#. Despu√©s de ejecutar el script, ver√°s la hora y la informaci√≥n meteorol√≥gica de tu ubicaci√≥n en el I2C LCD1602.

    .. note:: 

        Cuando el c√≥digo est√© en ejecuci√≥n, si la pantalla est√° en blanco, ajusta el potenci√≥metro en la parte posterior del m√≥dulo para aumentar el contraste.

#. Si deseas que este script se ejecute al inicio, gu√°rdalo en la Raspberry Pi Pico W como ``main.py``.


**¬øC√≥mo funciona?**

La Raspberry Pi Pico W debe estar conectada a Internet, como se describe en :ref:`iot_access`. Para este proyecto, solo tienes que utilizarlo.

.. code-block:: python

    from do_connect import *
    do_connect()

Una vez conectado a Internet, estas l√≠neas de c√≥digo ayudan a sincronizar tu Pico W con la hora de Greenwich.

.. code-block:: python

   import ntptime
   while True:
      try:
         ntptime.settime()
         print('Time Set Successfully')
         break
      except OSError:
         print('Time Setting...')
         continue   

Inicializa tu pantalla LCD; consulta :ref:`py_lcd` para m√°s detalles sobre su uso.

.. code-block:: python

   from lcd1602 import LCD
   lcd=LCD()
   lcd.clear() 
   string = 'Loading...'
   lcd.message(string)

Debemos seleccionar la unidad para algunos datos meteorol√≥gicos (por ejemplo, temperatura, velocidad del viento) antes de obtener los datos. En este caso, la unidad es ``m√©trica``.

.. code-block:: python

   # Open Weather
   TEMPERATURE_UNITS = {
      "standard": "K",
      "metric": "¬∞C",
      "imperial": "¬∞F",
   }

   SPEED_UNITS = {
      "standard": "m/s",
      "metric": "m/s",
      "imperial": "mph",
   }

   units = "metric"

A continuaci√≥n, esta funci√≥n obtiene los datos meteorol√≥gicos de ``openweathermap.org``.
Enviamos un mensaje URL con tu ciudad, la clave API y la unidad seleccionada.
Como resultado, recibir√°s un archivo ``JSON`` con los datos del clima.

.. code-block:: python

   def get_weather(city, api_key, units='metric', lang='en'):
      '''
      Get weather data from openweathermap.org
         city: City name, state code and country code divided by comma, Please, refer to ISO 3166 for the state codes or country codes. https://www.iso.org/obp/ui/#search
         api_key: Your unique API key (you can always find it on your openweather account page under the "API key" tab https://home.openweathermap.org/api_keys)
         unit: Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default. More: https://openweathermap.org/current#data
         lang: You can use this parameter to get the output in your language. More: https://openweathermap.org/current#multi
      '''
      url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units={units}&lang={lang}"
      print(url)
      res = urequests.post(url)
      return res.json()

Si imprimes estos datos en bruto, ver√°s informaci√≥n similar a la mostrada a continuaci√≥n.

.. code-block:: python

   ejemplo de datos meteorol√≥gicos:
   {
       'timezone': 28800,
       'sys': {
           'type': 2,
           'sunrise': 1659650200,
           'country': 'CN',
           'id': 2031340,
           'sunset': 1659697371
       },
       'base': 'stations',
       'main': {
           'pressure': 1008,
           'feels_like': 304.73,
           'temp_max': 301.01,
           'temp': 300.4,
           'temp_min': 299.38,
           'humidity': 91,
           'sea_level': 1008,
           'grnd_level': 1006
       },
       'visibility': 10000,
       'id': 1795565,
       'clouds': {
           'all': 96
       }, 
       'coord': {
           'lon': 114.0683,
           'lat': 22.5455
       },
       'name': 'Shenzhen',
       'cod': 200,
       'weather':[{
           'id': 804,
           'icon': '04d',
           'main': 'Clouds',
           'description': 'overcast clouds'
       }],
       'dt': 1659663579,
       'wind': {
           'gust': 7.06,
           'speed': 3.69,
           'deg': 146
       }
   }

Usamos la funci√≥n ``print_weather(weather_data)`` para convertir estos datos en un formato de f√°cil lectura y mostrarlos.

Esta funci√≥n no se llama; puedes descomentar esta l√≠nea en ``while True`` seg√∫n sea necesario.

.. image:: img/4_openweather3.png

.. code-block:: python
   :emphasize-lines: 2

   # imprimir en consola
   print_weather(weather_data)

En el bucle ``while True``, se llama primero a la funci√≥n ``get_weather()`` para obtener la ``clima``, ``temperatura`` y ``humedad`` necesarias para este proyecto.

.. code-block:: python

   weather_data = get_weather('shenzhen', secrets['openweather_api_key'], units=units)
   weather=weather_data["weather"][0]["main"]
   t=weather_data["main"]["temp"]
   rh=weather_data["main"]["humidity"]

Obt√©n la hora local. La funci√≥n ``time.localtime()`` devuelve una serie de tuplas (a√±o, mes, d√≠a, hora, minuto, segundo, d√≠a de la semana, d√≠a del a√±o). Extraemos ``hora`` y ``minuto``.

Nota que ya sincronizamos el Pico W con la Hora de Greenwich, por lo que debemos a√±adir la zona horaria de tu ubicaci√≥n.

.. code-block:: python
    
    # obtiene la hora (+24 para el hemisferio oeste)
    # si es negativo, suma 24
    # horas = time.localtime()[3] + int(weather_data["timezone"] / 3600) + 24  #solo para hemisferio oeste

    horas=time.localtime()[3]+int(weather_data["timezone"] / 3600)
    mins=time.localtime()[4]

Finalmente, la informaci√≥n del clima y la hora se muestran en el LCD1602.

.. code-block:: python

   lcd.clear() 
   time.sleep_ms(200)
   string = f'{hours:02d}:{mins:02d} {weather}\n'
   lcd.message(string)
   string = f'{t}{TEMPERATURE_UNITS[units]} {rh}%rh'
   lcd.message(string)

Tu LCD1602 se convertir√° en un reloj que se actualiza cada 30 segundos cuando el bucle principal se ejecuta cada 30 segundos.

.. OPWÁöÑÊñáÊ°£È°µÈù¢, ÂèØ‰ª•Êü•ÊâæÊØèÁßç‰∫ßÂìÅÁöÑÊâÄÊúâÊäÄÊúØ‰ø°ÊÅØ„ÄÇhttps://openweathermap.org/api


.. Êü•ÁúãËé∑ÂèñÂà∞ÁöÑkey https://home.openweathermap.org/api_keys
.. ÂΩìÂâçÂ§©Ê∞îÁöÑËµÑÊñôÈ°µ https://openweathermap.org/current
.. https://openweathermap.org/appid