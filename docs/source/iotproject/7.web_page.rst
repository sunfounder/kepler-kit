.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Profitez d'un acc√®s anticip√© aux annonces de nouveaux produits et de pr√©visualisations exclusives.
    - **R√©ductions sp√©ciales** : B√©n√©ficiez de remises exclusives sur nos derniers produits.
    - **Promotions et concours festifs** : Participez √† des concours et promotions durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

7. Configurer un serveur Web
====================================

Dans cet article, vous apprendrez √† transformer votre Pico W en un serveur web permettant de contr√¥ler le circuit et de r√©cup√©rer les donn√©es du capteur via un navigateur.

|setup_web|

**1. Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants.

Il est tr√®s pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 4(1-330Œ©, 2-220Œ©, 1-10KŒ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_rgb`
        - 1
        - |link_rgb_led_buy|
    *   - 7
        - :ref:`cpn_thermistor`
        - 1
        - |link_thermistor_buy|
    *   - 8
        - :ref:`cpn_lipo_charger`
        - 1
        -  
    *   - 9
        - Batterie 18650
        - 1
        -  
    *   - 10
        - Porte-batterie
        - 1
        -  

**2. Monter le circuit**

    .. warning:: 
        Assurez-vous que votre module de charge Li-po est connect√© comme indiqu√© sur le sch√©ma. Sinon, un court-circuit pourrait endommager votre batterie et votre circuit.

.. image:: img/wiring/7.web_page_bb.png
    :width: 800

**3. Lancer le code**

#. Ouvrez le fichier ``7_web_page.py`` situ√© dans le dossier ``kepler-kit-main/iot``.
#. Cliquez sur le bouton **Ex√©cuter le script actuel** ou appuyez sur F5 pour le lancer. Apr√®s une connexion r√©ussie, vous verrez l'IP de Pico W.

    .. image:: img/7_web_server.png

    .. note::

        Avant de lancer le code, assurez-vous que les scripts ``do_connect.py`` et ``secrets.py`` sont pr√©sents sur votre Pico W. Si ce n'est pas le cas, veuillez vous r√©f√©rer √† :ref:`iot_access` pour les cr√©er.

#. Entrez l'adresse IP du Pico W dans votre navigateur pour acc√©der √† la page web cr√©√©e pour ce projet. Cliquez sur n'importe quel bouton pour changer la couleur des LED RGB et actualiser la temp√©rature et l'humidit√©.

    .. image:: img/web-1.png
        :width: 500

#. Si vous souhaitez que ce script d√©marre automatiquement, vous pouvez le sauvegarder sur le Raspberry Pi Pico W en tant que ``main.py``.

**Comment √ßa marche ?**

La page web √† laquelle vous acc√©dez est en r√©alit√© h√©berg√©e sur un serveur, et le socket sur ce serveur envoie la page web lorsqu'on la visite.
Un socket permet √† un serveur d'√©couter un client souhaitant se connecter.

Dans ce projet, le Pico W est votre serveur, et votre ordinateur acc√®de √† la page web h√©berg√©e sur le Pico W via un navigateur.

Tout d'abord, nous cr√©ons un socket, qui n√©cessite une adresse IP et un |link_port|. 
La connexion r√©seau et la m√©thode pour obtenir l'IP sont expliqu√©es dans :ref:`iot_access`. Pour le port, nous utilisons le port 80. 
Apr√®s avoir configur√© le socket, retournez-le et utilisez-le pour l'√©tape suivante.

`socket library - Python Docs <https://docs.python.org/3/library/socket.html>`_ 

.. code-block:: python

    import socket

    def open_socket(ip):
        # Ouvrir un socket
        address = (ip, 80)
        connection = socket.socket()
        connection.bind(address)
        connection.listen(1)
        print(connection)
        return(connection)

Ensuite, configurez votre service web o√π le socket que vous avez cr√©√© sera utilis√©.
Le code suivant permet √† votre Pico W de recevoir des requ√™tes d'acc√®s provenant de votre navigateur.

.. code-block:: python

    def serve(connection):
        while True:
            client = connection.accept()[0]
            request = client.recv(1024)
            client.close()

Ensuite, vous avez besoin d'une page HTML √† envoyer au visiteur. Cet exemple stocke une simple page HTML sous forme de caract√®res dans la variable ``html``.

.. note:: 

    Si vous souhaitez √©crire votre propre html, vous pouvez obtenir de l'aide sur |link_html|.

.. code-block:: python

    def webpage(value):
        html = f"""
                <!DOCTYPE html>
                <html>
                <body>
                <form action="./red">
                <input type="submit" value="red " />
                </form>
                <form action="./green">
                <input type="submit" value="green" />
                </form>
                <form action="./blue">
                <input type="submit" value="blue" />
                </form>
                <form action="./off">
                <input type="submit" value="off" />
                </form>
                <p>Temperature is {value} degrees Celsius</p>
                </body>
                </html>
                """
        return html

Envoyer la page html au visiteur.

.. code-block:: python
    :emphasize-lines: 5,6

    def serve(connection):
        while True:
            client = connection.accept()[0]
            request = client.recv(1024)
            html=webpage(0)
            client.send(html)
            client.close()

La page peut √™tre consult√©e via votre navigateur si vous combinez les parties ci-dessus. Pour voir le r√©sultat, ex√©cutez le code ci-dessous avec Thonny.

.. code-block:: python

    import machine
    import socket

    from secrets import *
    from do_connect import *

    def webpage(value):
        html = f"""
                <!DOCTYPE html>
                <html>
                <body>
                <form action="./red">
                <input type="submit" value="red " />
                </form>
                <form action="./green">
                <input type="submit" value="green" />
                </form>
                <form action="./blue">
                <input type="submit" value="blue" />
                </form>
                <form action="./off">
                <input type="submit" value="off" />
                </form>
                <p>Temperature is {value} degrees Celsius</p>
                </body>
                </html>
                """
        return html

    def open_socket(ip):
        # Ouvrir un socket
        address = (ip, 80)
        connection = socket.socket()
        connection.bind(address)
        connection.listen(1)
        print(connection)
        return(connection)

    def serve(connection):
        while True:
            client = connection.accept()[0]
            request = client.recv(1024)
            html=webpage(0)
            client.send(html)
            client.close()

    try:
        ip=do_connect()
        if ip is not None:
            connection=open_socket(ip)
            serve(connection)
    except KeyboardInterrupt:
        machine.reset()


Lorsque vous ex√©cutez le code ci-dessus, vous verrez qu'il affiche uniquement une page web, sans permettre de contr√¥ler les LED RGB, ni de montrer les lectures des capteurs. 
Le service web doit √™tre encore am√©lior√©.

La premi√®re chose √† savoir est ce que le serveur re√ßoit comme information lorsque le navigateur acc√®de √† la page web. Pour cela, modifiez l√©g√®rement ``serve()`` pour imprimer ``request``.

.. code-block:: python
    :emphasize-lines: 5,6

    def serve(connection):
        while True:
            client = connection.accept()[0]
            request = client.recv(1024)
            request = str(request)
            print(request)  
            html=webpage(0)
            client.send(html)
            client.close()

Re-ex√©cutez le script et la console imprimera le message suivant lorsque nous appuyons sur un bouton de la page web.

.. code-block:: 

    b'GET /red? HTTP/1.1\r\nHost: 192.168.18.162\r\nConnection: keep-alive.......q=0.5\r\n\r\n'
    b'GET /favicon.ico HTTP/1.1\r\nHost: 192.168.18.162\r\nConnection: keep-alive.......q=0.5\r\n\r\n'
    b'GET /blue? HTTP/1.1\r\nHost: 192.168.18.162\r\nConnection: keep-alive.......q=0.5\r\n\r\n'
    b'GET /favicon.ico HTTP/1.1\r\nHost: 192.168.18.162\r\nConnection: keep-alive.......q=0.5\r\n\r\n'

C'est trop long pour √™tre lu !!!

Mais tout ce dont nous avons vraiment besoin est le petit morceau d'information devant ``/red?``, ``/blue?``.
Cela nous indique quel bouton a √©t√© press√©. Nous avons donc raffin√© ``serve()`` pour extraire l'information de la touche.

.. code-block:: python
    :emphasize-lines: 6,7,8,9

    def serve(connection):
        while True:
            client = connection.accept()[0]
            request = client.recv(1024)
            request = str(request)
            try:
                request = request.split()[1]
            except IndexError:
                pass
            print(request)  
            html=webpage(0)
            client.send(html)
            client.close()

Re-ex√©cutez le programme et la console affichera le message suivant lorsque nous appuyons sur une touche de la page web.

.. code-block:: 

    /red?
    /favicon.ico
    /blue?
    /favicon.ico
    /off?
    /favicon.ico

Ensuite, nous devons juste changer la couleur de la LED RGB en fonction de la valeur de ``request``.

.. code-block:: python

    def serve(connection):
        while True:
            client = connection.accept()[0]
            request = client.recv(1024)
            request = str(request)
            try:
                request = request.split()[1]
            except IndexError:
                pass
            
            print(request)
            
            if request == '/off?':
                red.low()
                green.low()
                blue.low()
            elif request == '/red?':
                red.high()
                green.low()
                blue.low()
            elif request == '/green?':
                red.low()
                green.high()
                blue.low()
            elif request == '/blue?':
                red.low()
                green.low()
                blue.high()
 
            html=webpage(0)
            client.send(html)
            client.close()

La derni√®re chose est d'afficher la valeur du thermistor sur la page web (voir :ref:`py_temp` pour plus de d√©tails sur l'utilisation du thermistor).
Cette partie se fait en modifiant le texte sur la page html.
Nous d√©finissons les param√®tres dans la fonction ``webpage(value)`` et il suffit de changer les param√®tres pour modifier le nombre affich√© sur la page web.

.. code-block:: python
    :emphasize-lines: 30,31

    def serve(connection):
        while True:
            client = connection.accept()[0]
            request = client.recv(1024)
            request = str(request)
            try:
                request = request.split()[1]
            except IndexError:
                pass
            
            #print(request)
            
            if request == '/off?':
                red.low()
                green.low()
                blue.low()
            elif request == '/red?':
                red.high()
                green.low()
                blue.low()
            elif request == '/green?':
                red.low()
                green.high()
                blue.low()
            elif request == '/blue?':
                red.low()
                green.low()
                blue.high()

            value='%.2f'%temperature()    
            html=webpage(value)
            client.send(html)
            client.close()

.. https://projects.raspberrypi.org/en/projects/get-started-pico-w/3
