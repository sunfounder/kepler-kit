.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder des passionn√©s de Raspberry Pi, Arduino & ESP32 sur Facebook ! Explorez en profondeur le Raspberry Pi, l'Arduino et l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

2. Suivre @CheerLights
=======================================

Il s'agit d'un projet romantique. Rejoignez la communaut√© |link_cheerlights| de LED changeant de couleur, qui permet aux LED du monde entier de changer de couleur simultan√©ment.

Vous pouvez le placer dans un coin de votre bureau pour vous rappeler que vous n'√™tes pas seul.

Vous pouvez tweeter √† @cheerlights en incluant le nom d'une couleur dans le tweet. Cela changera la couleur des LED √† travers le monde en fonction de ce que vous avez sp√©cifi√©.

**Composants requis**

Dans ce projet, nous aurons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - DANS CE KIT
        - LIEN
    *   - Kepler Kit	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_ws2812`
        - 1
        - |link_ws2812_buy|
    *   - 6
        - :ref:`cpn_lipo_charger`
        - 1
        -  
    *   - 7
        - Batterie 18650
        - 1
        -  
    *   - 8
        - Support de batterie
        - 1
        -  

**√âtapes**

#. Montez le circuit.

    Le module chargeur Li-po utilis√© ici alimentera votre circuit, vous permettant de d√©connecter le c√¢ble USB et d'emmener votre projet o√π bon vous semble !

    .. warning:: 
        
        Assurez-vous que votre module chargeur Li-po est connect√© comme indiqu√© sur le sch√©ma. Sinon, un court-circuit risque d'endommager votre batterie et votre circuit.

    .. image:: img/wiring/2.cheerlights_bb.png
        :width: 800



#. Acc√©dez au dossier o√π vous avez t√©l√©charg√© le `code package <https://github.com/sunfounder/kepler-kit/archive/refs/heads/main.zip>`_ et ouvrez le fichier ``2_cheer_light.py`` situ√© dans ``kepler-kit-main/iot``.

#. Pour ex√©cuter le script, cliquez sur le bouton **Run current script** ou appuyez sur F5, vous verrez alors l'indication de connexion, l'IP et la couleur (0xff0000 est rouge) dans le Shell.

    .. note::

        Avant d'ex√©cuter le code, assurez-vous d'avoir les scripts ``do_connect.py`` et ``secrets.py`` sur votre Pico W, sinon reportez-vous √† :ref:`iot_access` pour les cr√©er.

    .. image:: img/2_cheerlight1.png


#. Apr√®s le lancement du script, la bande RGB WS2812 affichera une couleur, et celle-ci pourra parfois changer.

#. Si vous souhaitez que ce script soit ex√©cut√© au d√©marrage, enregistrez-le sur le Raspberry Pi Pico W sous le nom ``main.py``, comme suit.

    * Arr√™tez le script en cours et cliquez sur **File** -> **Save as**.

        .. image:: img/2_cheerlight2.png

    * S√©lectionnez **Raspberry Pi Pico** dans la fen√™tre pop-up qui appara√Æt.

        .. image:: img/2_cheerlight3.png

    * D√©finissez le nom du fichier sur ``main.py``. Un message appara√Ætra si un fichier du m√™me nom existe d√©j√† sur votre Pico W.

        .. image:: img/2_cheerlight4.png
    
    * Vous pouvez maintenant d√©brancher le c√¢ble USB et utiliser le module chargeur Li-po pour alimenter le Raspberry Pi Pico W. Placez-le dans un coin et il fonctionnera automatiquement.


**Comment √ßa marche ?**

Le Raspberry Pi Pico W doit √™tre connect√© √† Internet, comme d√©crit dans :ref:`iot_access`. Pour ce projet, il suffit de proc√©der comme suit :

.. code-block:: python

    from do_connect import *
    do_connect()

Configurez la bande RGB WS2812. Veuillez vous r√©f√©rer √† :ref:`py_neopixel` pour plus de d√©tails sur son utilisation.

.. code-block:: python

    import machine
    from ws2812 import WS2812
    ws = WS2812(machine.Pin(18), 8)

Ensuite, nous avons besoin d'un moyen pour obtenir la couleur de @CheerLights. Il existe un syst√®me en arri√®re-plan qui prend les changements de couleur de Twitter
et les publie au format JSON √† l'URL : http://api.thingspeak.com/channels/1417/field/2/last.json.

Si vous ouvrez cette URL directement dans votre navigateur, vous verrez quelque chose comme ceci. Tout ce dont nous avons besoin, c'est des donn√©es de ``field2``, qui sont une cha√Æne de caract√®res cod√©e en couleur hexad√©cimale.

.. code-block:: 

    {"created_at":"2022-08-16T06:12:44Z","entry_id":870488,"field2":"#ff00ff"}

Nous devons utiliser le module ``urequests`` pour obtenir ces donn√©es et le module ``json`` pour les convertir en dictionnaire Python.
Le code suivant r√©cup√®re la derni√®re couleur @CheerLights √† partir de l'URL et renvoie une valeur de couleur utilisable par le WS2812.

.. code-block:: python

    def get_colour():
        url = "http://api.thingspeak.com/channels/1417/field/2/last.json"
        try:
            r = urequests.get(url)
            if r.status_code > 199 and r.status_code < 300:
                cheerlights = json.loads(r.content.decode('utf-8'))
                print(cheerlights['field2'])
                colour = int('0x'+cheerlights['field2'][1:7])#Convert from String to Integer
                r.close()
                return colour
            else:
                return None
        except Exception as e:
            print(e)
            return None

Enfin, utilisez une boucle pour que le WS2812 fonctionne une fois par minute.

.. code-block:: python

    while True:
        colour = get_colour()
        if colour is not None:
            ws.write_all(colour)
        time.sleep(60)

