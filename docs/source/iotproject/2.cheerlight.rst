.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas posventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones Exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.

2. Sigue a @CheerLights
=======================================

Este es un proyecto inspirador; √∫nete a la comunidad de cambio de color de LED |link_cheerlights|, que permite que los LEDs de todo el mundo cambien de color al mismo tiempo.

Col√≥calo en un rinc√≥n de tu oficina para recordarte que no est√°s solo.

Puedes enviar un tweet a @cheerlights incluyendo el nombre de un color en el mensaje. Esto har√° que los LEDs de todo el mundo cambien al color que has especificado.

**Componentes Requeridos**

Para este proyecto, necesitamos los siguientes componentes.

Es conveniente adquirir el kit completo; aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado a trav√©s de los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N.¬∫
        - COMPONENTE	
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_ws2812`
        - 1
        - |link_ws2812_buy|
    *   - 6
        - :ref:`cpn_lipo_charger`
        - 1
        -  
    *   - 7
        - Bater√≠a 18650
        - 1
        -  
    *   - 8
        - Portapilas
        - 1
        -  

**Pasos**

#. Ensambla el circuito.

    El M√≥dulo de Carga Li-po utilizado aqu√≠ alimentar√° tu circuito para que puedas desconectar el cable USB y llevar tu proyecto a cualquier parte.

    .. warning:: 
        
        Aseg√∫rate de que tu M√≥dulo de Carga Li-po est√© conectado como se muestra en el diagrama. De lo contrario, un cortocircuito podr√≠a da√±ar la bater√≠a y el circuito.

    .. image:: img/wiring/2.cheerlights_bb.png
        :width: 800



#. Cambia la ruta al directorio donde descargaste el `code package <https://github.com/sunfounder/kepler-kit/archive/refs/heads/main.zip>`_ y abre el archivo ``2_cheer_light.py`` en la ruta ``kepler-kit-main/iot``.

#. Para ejecutar el script, haz clic en el bot√≥n **Ejecutar script actual** o presiona F5. Entonces ver√°s el mensaje de conexi√≥n establecida, la IP y el color (0xff0000 es rojo) en la consola.

    .. note::

        Antes de ejecutar el c√≥digo, aseg√∫rate de tener los scripts ``do_connect.py`` y ``secrets.py`` en tu Pico W; si no los tienes, consulta :ref:`iot_access` para crearlos.

    .. image:: img/2_cheerlight1.png


#. Despu√©s de ejecutar el script, la tira RGB WS2812 mostrar√° un color, que cambiar√° ocasionalmente.

#. Si deseas que este script se ejecute al inicio, gu√°rdalo en la Raspberry Pi Pico W como ``main.py``, de la siguiente manera:

    * Det√©n la ejecuci√≥n del script y haz clic en **Archivo** -> **Guardar como**.

        .. image:: img/2_cheerlight2.png

    * Selecciona **Raspberry Pi Pico** en la ventana emergente que aparece.

        .. image:: img/2_cheerlight3.png

    * Asigna el nombre ``main.py`` al archivo. Aparecer√° un mensaje si ya existe un archivo con el mismo nombre en tu Pico W.

        .. image:: img/2_cheerlight4.png
    
    * Ahora puedes desconectar el cable USB y usar el M√≥dulo de Carga Li-po para alimentar tu Raspberry Pi Pico W. Col√≥cala en un rinc√≥n y funcionar√° autom√°ticamente.


**¬øC√≥mo funciona?**

La Raspberry Pi Pico W debe estar conectada a Internet, como se describe en :ref:`iot_access`. Para este proyecto, solo tienes que utilizarlo.

.. code-block:: python

    from do_connect import *
    do_connect()

Configura la tira RGB WS2812; consulta :ref:`py_neopixel` para obtener m√°s detalles sobre su uso. 

.. code-block:: python

    import machine
    from ws2812 import WS2812
    ws = WS2812(machine.Pin(18), 8)

Ahora, necesitamos una forma de obtener el color de @CheerLights. Hay un sistema de backend que toma los cambios de color de Twitter
y los publica en formato JSON en la URL: http://api.thingspeak.com/channels/1417/field/2/last.json.

Si abres esta URL directamente en tu navegador, ver√°s algo similar a lo siguiente. Solo necesitamos el dato ``field2``, que es una cadena codificada en hexadecimal.

.. code-block:: 

    {"created_at":"2022-08-16T06:12:44Z","entry_id":870488,"field2":"#ff00ff"}

Usaremos el m√≥dulo ``urequests`` para obtener estos datos y el m√≥dulo ``json`` para convertir el contenido en un diccionario de Python.
El siguiente c√≥digo obtiene el color m√°s reciente de @CheerLights de la URL y devuelve un valor de color que puede ser usado por WS2812.

.. code-block:: python

    def get_colour():
        url = "http://api.thingspeak.com/channels/1417/field/2/last.json"
        try:
            r = urequests.get(url)
            if r.status_code > 199 and r.status_code < 300:
                cheerlights = json.loads(r.content.decode('utf-8'))
                print(cheerlights['field2'])
                colour = int('0x'+cheerlights['field2'][1:7])#Convert from String to Integer
                r.close()
                return colour
            else:
                return None
        except Exception as e:
            print(e)
            return None

Finalmente, utiliza un bucle para hacer que el ws2812 funcione una vez por minuto.

.. code-block:: python

    while True:
        colour = get_colour()
        if colour is not None:
            ws.write_all(colour)
        time.sleep(60)

