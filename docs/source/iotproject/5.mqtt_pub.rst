.. note::

    Bonjour et bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez plus profond√©ment dans le Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _nt_mqtt_publish:

5. Syst√®me d'Appel avec @MQTT
============================================

Le Message Queuing Telemetry Transport (MQTT) est un protocole de messagerie simple.
C'est √©galement le protocole de messagerie le plus courant pour l'Internet des Objets (IoT).

Les protocoles MQTT d√©finissent la mani√®re dont les dispositifs IoT transf√®rent les donn√©es.
Ils sont pilot√©s par √©v√©nements et interconnect√©s via le mod√®le Pub/Sub.
L'exp√©diteur (Publisher) et le r√©cepteur (Subscriber) communiquent via des Topics.
Un appareil publie un message sur un sujet sp√©cifique, et tous les appareils abonn√©s √† ce sujet re√ßoivent le message.

Dans cette section, nous allons cr√©er un syst√®me de sonnette de service en utilisant Pico W, HiveMQ (un service gratuit de courtier MQTT public), et quatre boutons.
Les quatre boutons repr√©sentent quatre tables dans un restaurant, et vous pourrez voir sur HiveMQ quelle table a besoin de service lorsque le client appuie sur le bouton.

**1. Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est √©videmment plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS LE KIT
        - LIEN
    *   - Kepler Kit	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 4(10KŒ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_button`
        - 4
        - |link_button_buy|
    *   - 7
        - :ref:`cpn_lipo_charger`
        - 1
        -  
    *   - 8
        - Batterie 18650
        - 1
        -  
    *   - 9
        - Support de Batterie
        - 1
        -  

**2. Monter le Circuit**

    .. warning:: 
        
        Assurez-vous que votre module de chargeur Li-po est connect√© comme indiqu√© sur le sch√©ma. Sinon, un court-circuit pourrait endommager votre batterie et votre circuit.

.. image:: img/wiring/5.mqtt_pub.png
    :width: 800

**3. Visiter HiveMQ**

HiveMQ est une plateforme de messagerie bas√©e sur MQTT qui permet un transfert de donn√©es rapide, efficace et fiable vers les dispositifs IoT.

1. Ouvrez |link_hivemq| dans votre navigateur.

2. Connectez le client au proxy public par d√©faut.

   .. image:: img/mqtt-1.png

3. Cliquez sur **Ajouter une nouvelle souscription √† un sujet**.

   .. image:: img/mqtt-2.png

4. Remplissez les sujets que vous souhaitez suivre et cliquez sur **S'abonner**. Les sujets d√©finis ici doivent √™tre plus personnels pour √©viter de recevoir des messages d'autres utilisateurs, et faites attention √† la sensibilit√© √† la casse.

   .. image:: img/mqtt-3.png

**4. Installer le Module MQTT**

Avant de commencer le projet, nous devons installer le module MQTT pour Pico W.

1. Connectez-vous au r√©seau en ex√©cutant ``do_connect()`` dans le Shell, que nous avons √©crit pr√©c√©demment.

    .. note::
        * Tapez les commandes suivantes dans le Shell et appuyez sur ``Entr√©e`` pour les ex√©cuter.
        * Si vous n'avez pas les scripts ``do_connect.py`` et ``secrets.py`` dans votre Pico W, veuillez vous r√©f√©rer √† :ref:`iot_access` pour les cr√©er.

    .. code-block:: python

        from do_connect import *
        do_connect()

2. Apr√®s une connexion r√©seau r√©ussie, importez le module ``mip`` dans le shell et utilisez ``mip`` pour installer le module ``umqtt.simple``, un client MQTT simplifi√© pour MicroPython.

    .. code-block:: python

        import mip
        mip.install('umqtt.simple')

3. Vous verrez que le module ``umqtt`` est install√© sous le chemin ``/lib/`` du Pico W apr√®s la fin de l'installation.

    .. image:: img/5_calling_system1.png

**5. Ex√©cuter le Script**

#. Ouvrez le fichier ``5_mqtt_publish.py`` dans le r√©pertoire ``kepler-kit-main/iot``.

#. Cliquez sur le bouton **Ex√©cuter le script actuel** ou appuyez sur F5 pour le lancer.

    .. image:: img/5_calling_system2.png

#. Retournez √† |link_hivemq| et lorsque vous appuyez sur l'un des boutons de la plaque de prototypage, vous verrez une notification de message sur HiveMQ.

    .. image:: img/mqtt-4.png

#. Si vous souhaitez que ce script soit lanc√© au d√©marrage, vous pouvez l'enregistrer sur le Raspberry Pi Pico W sous le nom de ``main.py``.


**Comment √ßa marche ?**

Le Raspberry Pi Pico W doit √™tre connect√© √† Internet, comme d√©crit dans :ref:`iot_access`. Utilisez simplement cette connexion pour ce projet.

.. code-block:: python

    from do_connect import *
    do_connect()

Initialisez 4 broches pour les boutons.

.. code-block:: python

    sensor1 = Pin(16, Pin.IN)
    sensor2 = Pin(17, Pin.IN)
    sensor3 = Pin(18, Pin.IN)
    sensor4 = Pin(19, Pin.IN)

Cr√©ez deux variables pour stocker l'``URL`` et l'``ID client`` du courtier MQTT avec lequel nous allons nous connecter.
√âtant donn√© que nous utilisons un courtier public, notre ``ID client`` ne sera pas utilis√©, m√™me si un est requis.

.. code-block:: python

    mqtt_server = 'broker.hivemq.com'
    client_id = 'Jimmy'

Connectez-vous au courtier MQTT et maintenez la connexion pendant une heure. En cas d'√©chec, r√©initialisez le Pico W.

.. code-block:: python

    try:
        client = MQTTClient(client_id, mqtt_server, keepalive=3600)
        client.connect()
        print('Connected to %s MQTT Broker'%(mqtt_server))
    except OSError as e:
        print('Failed to connect to the MQTT Broker. Reconnecting...')
        time.sleep(5)
        machine.reset()

Cr√©ez une variable ``topic``, qui est le sujet que l'abonn√© doit suivre. Elle doit correspondre au sujet d√©fini √† l'√©tape **4** de la section **2. Visiter HiveMQ** ci-dessus.
Par ailleurs, ``b`` ici convertit la cha√Æne en octet, car MQTT est un protocole binaire o√π les √©l√©ments de contr√¥le sont des octets binaires et non des cha√Ænes de texte.

.. code-block:: python

    topic = b'SunFounder MQTT Test'

D√©finissez des interruptions pour chaque bouton. Lorsqu'un bouton est press√©, un message est publi√© sous le ``topic``.

.. code-block:: python

    def press1(pin):
        message = b'button 1 is pressed'
        client.publish(topic, message)
        print(message)

    sensor1.irq(trigger=machine.Pin.IRQ_RISING, handler=press1)


* `UMQTT Client API  <https://pypi.org/project/micropython-umqtt.simple/>`_



.. https://www.tomshardware.com/how-to/send-and-receive-data-raspberry-pi-pico-w-mqtt