.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas posventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones Exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.
.. _nt_mqtt_publish:


5. Sistema de Llamada en la Nube con @MQTT
================================================

Message Queuing Telemetry Transport (MQTT) es un protocolo de mensajer√≠a simple.
Es tambi√©n el protocolo de mensajer√≠a m√°s com√∫n para el Internet de las Cosas (IoT).

Los protocolos MQTT definen c√≥mo los dispositivos IoT transfieren datos.
Est√°n basados en eventos e interconectados mediante el modelo Pub/Sub.
El remitente (Publisher) y el receptor (Subscriber) se comunican a trav√©s de Temas (Topics).
Un dispositivo publica un mensaje en un tema espec√≠fico, y todos los dispositivos suscritos a ese tema reciben el mensaje.

En esta secci√≥n, crearemos un sistema de llamada de servicio usando Pico W, HiveMQ (un servicio gratuito de broker MQTT p√∫blico) y cuatro botones.
Los cuatro botones representan cuatro mesas en un restaurante, y podr√°s ver qu√© mesa necesita servicio en HiveMQ cuando el cliente presione el bot√≥n.

**1. Componentes Requeridos**

Para este proyecto, necesitamos los siguientes componentes. 

Es conveniente adquirir el kit completo; aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado a trav√©s de los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N.¬∫
        - COMPONENTE	
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 4(10KŒ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_button`
        - 4
        - |link_button_buy|
    *   - 7
        - :ref:`cpn_lipo_charger`
        - 1
        -  
    *   - 8
        - Bater√≠a 18650
        - 1
        -  
    *   - 9
        - Portapilas
        - 1
        -  


**2. Construcci√≥n del Circuito**

    .. warning:: 
       
        Aseg√∫rate de que el M√≥dulo de Carga Li-po est√© conectado como se muestra en el diagrama. De lo contrario, un cortocircuito podr√≠a da√±ar la bater√≠a y el circuito.

.. image:: img/wiring/5.mqtt_pub.png
    :width: 800

**3. Visita HiveMQ**

HiveMQ es una plataforma de mensajer√≠a basada en broker y cliente MQTT que permite la transferencia r√°pida, eficiente y confiable de datos a dispositivos IoT.

1. Abre |link_hivemq| en tu navegador.

2. Conecta el cliente al proxy p√∫blico predeterminado.

   .. image:: img/mqtt-1.png

3. Haz clic en **Add New Topic Subscription**.

   .. image:: img/mqtt-2.png

4. Ingresa los temas (Topics) que deseas seguir y haz clic en **Subscribe**. Los temas configurados aqu√≠ deben ser √∫nicos para evitar recibir mensajes de otros usuarios, y presta atenci√≥n a las may√∫sculas y min√∫sculas.

   .. image:: img/mqtt-3.png

**4. Instalaci√≥n del M√≥dulo MQTT**

Antes de iniciar el proyecto, necesitamos instalar el m√≥dulo MQTT para Pico W.

1. Con√©ctate a la red ejecutando ``do_connect()`` en el Shell, que escribimos anteriormente.

    .. note::
        * Escribe los siguientes comandos en el Shell y presiona ``Enter`` para ejecutarlos.
        * Si no tienes los archivos ``do_connect.py`` y ``secrets.py`` en tu Pico W, consulta :ref:`iot_access` para crearlos.

    .. code-block:: python

        from do_connect import *
        do_connect()

2. Despu√©s de una conexi√≥n exitosa a la red, importa el m√≥dulo ``mip`` en el shell y utiliza ``mip`` para instalar el m√≥dulo ``umqtt.simple``, que es un cliente MQTT simplificado para MicroPython.

    .. code-block:: python

        import mip
        mip.install('umqtt.simple')

3. Ver√°s que el m√≥dulo ``umqtt`` est√° instalado en la ruta ``/lib/`` de Pico W despu√©s de completar la instalaci√≥n.

    .. image:: img/5_calling_system1.png

**5. Ejecuci√≥n del Script**

#. Abre el archivo ``5_mqtt_publish.py`` en la ruta ``kepler-kit-main/iot``.

#. Haz clic en el bot√≥n **Run current script** o presiona F5 para ejecutarlo.

    .. image:: img/5_calling_system2.png

#. Vuelve a |link_hivemq| y, cuando presiones uno de los botones en la breadboard, podr√°s ver el mensaje en HiveMQ.

    .. image:: img/mqtt-4.png
  

#. Si deseas que este script se ejecute al inicio, puedes guardarlo en la Raspberry Pi Pico W como ``main.py``.

**¬øC√≥mo funciona?**

La Raspberry Pi Pico W debe estar conectada a Internet, como se describe en :ref:`iot_access`. Para este proyecto, solo tienes que utilizarlo.

.. code-block:: python

    from do_connect import *
    do_connect()

Inicializa los 4 pines de los botones.

.. code-block:: python

    sensor1 = Pin(16, Pin.IN)
    sensor2 = Pin(17, Pin.IN)
    sensor3 = Pin(18, Pin.IN)
    sensor4 = Pin(19, Pin.IN)

Crea dos variables para almacenar el ``URL`` y el ``ID de cliente`` del broker MQTT que utilizaremos para conectarnos.
Como estamos usando un broker p√∫blico, nuestro ``ID de cliente`` no se utilizar√°, aunque sea requerido.

.. code-block:: python

    mqtt_server = 'broker.hivemq.com'
    client_id = 'Jimmy'

Con√©ctate al agente MQTT y mant√©n la conexi√≥n durante una hora. Si falla, reinicia el Pico W.

.. code-block:: python

    try:
        client = MQTTClient(client_id, mqtt_server, keepalive=3600)
        client.connect()
        print('Connected to %s MQTT Broker'%(mqtt_server))
    except OSError as e:
        print('Failed to connect to the MQTT Broker. Reconnecting...')
        time.sleep(5)
        machine.reset()

Crea una variable ``topic``, que es el tema que el suscriptor necesita seguir. Debe ser el mismo que el tema configurado en el **paso 4** de **2. Visita HiveMQ**.
Adem√°s, ``b`` aqu√≠ convierte la cadena en byte, ya que MQTT es un protocolo binario donde los elementos de control son bytes binarios y no cadenas de texto.

.. code-block:: python

    topic = b'SunFounder MQTT Test'

Configura las interrupciones para cada bot√≥n. Cuando se presiona un bot√≥n, se publica un mensaje en el ``topic``.

.. code-block:: python

    def press1(pin):
        message = b'button 1 is pressed'
        client.publish(topic, message)
        print(message)

    sensor1.irq(trigger=machine.Pin.IRQ_RISING, handler=press1)


* `UMQTT Client API  <https://pypi.org/project/micropython-umqtt.simple/>`_



.. https://www.tomshardware.com/how-to/send-and-receive-data-raspberry-pi-pico-w-mqtt