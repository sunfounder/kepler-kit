.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte Experto**: Resuelve problemas posventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones Exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.

3. Sistema de Seguridad con @IFTTT
============================================

Con este proyecto, crearemos un dispositivo de seguridad que utiliza un sensor PIR para detectar cuando un intruso o animal se introduce en tu hogar. En caso de que esto ocurra, recibir√°s una alerta por correo electr√≥nico.

Usaremos Webhook como el servicio m√°s b√°sico.
Raspberry Pi Pico W enviar√° una solicitud POST al servicio de IFTTT.
A trav√©s de IFTTT, crearemos un Applet que intercepte el webhook y env√≠e un correo electr√≥nico.

**1. Componentes Requeridos**

Para este proyecto, necesitamos los siguientes componentes.

Es conveniente adquirir el kit completo; aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado a trav√©s de los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N.¬∫
        - COMPONENTE	
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_transistor`
        - 1(S8050)
        - |link_transistor_buy|
    *   - 6
        - :ref:`cpn_resistor`
        - 2(1KŒ©, 10KŒ©)
        - |link_resistor_buy|
    *   - 7
        - :ref:`cpn_button`
        - 1
        - |link_button_buy|
    *   - 8
        - Buzzer :ref:`cpn_buzzer`
        - 1
        - 
    *   - 9
        - :ref:`cpn_lipo_charger`
        - 1
        -  
    *   - 10
        - Bater√≠a 18650
        - 1
        -  
    *   - 11
        - Portapilas
        - 1
        -  
    *   - 12
        - :ref:`cpn_pir`
        - 1
        - |link_pir_buy|

**2. Construye el Circuito**


.. warning::
       
    Aseg√∫rate de que tu M√≥dulo de Carga Li-po est√© conectado como se muestra en el diagrama. De lo contrario, un cortocircuito podr√≠a da√±ar la bater√≠a y el circuito.

.. image:: img/wiring/3.ifttt_mail_bb.png
    :width: 800


**3. Configura IFTTT**

IFTTT es un servicio gratuito que ofrece m√∫ltiples formas de conectar diferentes servicios de datos entre s√≠.

Crearemos un Applet que reaccione a un webhook (URL personalizada) que env√≠a datos a IFTTT.
IFTTT luego enviar√° un correo electr√≥nico por ti.

Sigue los pasos a continuaci√≥n en IFTTT.

1. Visita |link_ifttt| para iniciar sesi√≥n o crear una cuenta.

    .. image:: img/ifttt-1.png
        :width: 500

2. Haz clic en **Create**.

    .. image:: img/ifttt-2.png
        :width: 500

3. Agrega un evento **If This**.

    .. image:: img/ifttt-3.png
        :width: 500

4. Busca **Webhooks**.

    .. image:: img/ifttt-4.png
        :width: 500

5. Toca **Receive a web request**.

    .. image:: img/ifttt-5.png
        :width: 500

6. Rellena el nombre del evento (por ejemplo, SecurityWarning) y haz clic en **Create trigger**.

    .. image:: img/ifttt-6.png
        :width: 500

7. Agrega un evento **Then That**.

    .. image:: img/ifttt-7.png
        :width: 500

8. Busca Email.

    .. image:: img/ifttt-8.png
        :width: 500

9. Haz clic en **Send me an email**.

    .. image:: img/ifttt-9.png
        :width: 500

10. Rellena el **Asunto** y el **Cuerpo** y luego haz clic en **Create action**.

    .. image:: img/ifttt-10.png
        :width: 500

11. Haz clic en **Continue** para completar la configuraci√≥n.

    .. image:: img/ifttt-11.png
        :width: 500

12. Modifica el nombre del t√≠tulo y habr√°s terminado.

    .. image:: img/ifttt-12.png
        :width: 500

13. Ahora ser√°s redirigido autom√°ticamente a la p√°gina de detalles del Applet, donde podr√°s ver que el Applet est√° actualmente conectado y puedes alternar el interruptor para iniciarlo o detenerlo.

    .. image:: img/ifttt-13.png
        :width: 500


**4. Ejecuta el Script**

#. Ahora que hemos creado el Applet en IFTTT, tambi√©n necesitamos la clave API que se puede obtener en |link_webhooks| para permitir que Pico W acceda a IFTTT.

    .. image:: img/ifttt-14.png
        :width: 500

#. Copia esta clave en el script ``secrets.py`` de la Raspberry Pi Pico W.

    .. image:: img/3_ifttt4.png

    .. note::

        Si no tienes los scripts ``do_connect.py`` y ``secrets.py`` en tu Pico W, consulta :ref:`iot_access` para crearlos.

    .. code-block:: python
        :emphasize-lines: 4

        secrets = {
        'ssid': 'SSID',
        'password': 'PASSWORD',
        'webhooks_key':'WEBHOOKS_API_KEY'
        }

#. Abre el archivo ``3_ifttt_mail.py`` en la ruta ``kepler-kit-main/iot``, luego haz clic en **Archivo** -> **Guardar como** o presiona ``Ctrl+Shift+S``.

    .. image:: img/3_ifttt1.png

#. Selecciona **Raspberry Pi Pico** en la ventana emergente que aparece.

    .. image:: img/3_ifttt2.png

#. Asigna el nombre ``main.py`` al archivo. Aparecer√° un mensaje si ya existe un archivo con el mismo nombre en tu Pico W.

    .. image:: img/3_ifttt3.png

#. Ahora puedes desconectar el cable USB y usar el M√≥dulo de Carga Li-po para alimentar la Raspberry Pi Pico W. Escuchar√°s un pitido del buzzer cuando el script est√© en ejecuci√≥n. El buzzer sonar√° continuamente si el m√≥dulo PIR detecta que alguien o alg√∫n animal pasa, y se te enviar√° una alerta por correo electr√≥nico. El script puede reiniciarse presionando el bot√≥n.

**¬øC√≥mo funciona?**

La Raspberry Pi Pico W debe estar conectada a Internet, como se describe en :ref:`iot_access`. Para este proyecto, solo tienes que utilizarlo.

.. code-block:: python

    from do_connect import *
    do_connect()

Lee los datos del m√≥dulo PIR y llama a la funci√≥n ``motion_detected()`` si detecta a alguien pasando (datos de 0 a 1).

.. code-block:: python

    import machine

    sensor=machine.Pin(17,machine.Pin.IN)

    sensor.irq(trigger=machine.Pin.IRQ_RISING, handler=motion_detected)

Luego, Pico W env√≠a datos a IFTTT. Como puedes ver, el ``message`` que env√≠as a IFTTT es una cadena de URL.
IFTTT identifica al remitente mediante ``secrets['webhooks_key']``, el evento activado se identifica mediante ``event``.
Aseg√∫rate de que ambos sean correctos.

.. code-block:: python

    import urequests
    from secrets import *

    event='SecurityWarning'
    message=f"https://maker.ifttt.com/trigger/{event}/with/key/{secrets['webhooks_key']}"

    def motion_detected(pin):
        urequests.post(message)
        print(message)
        global warn_flag
        warn_flag=True
        sensor.irq(handler=None)

Cuando se llama a ``motion_detected()``, la variable ``warn_flag`` se establece en ``True``, lo que hace que el buzzer contin√∫e sonando.

.. code-block:: python

    while True:
        if warn_flag==True:
            alarm.toggle()
            time.sleep_ms(50)

El prop√≥sito del bot√≥n aqu√≠ es reiniciar el script.

.. code-block:: python

    button=machine.Pin(16,machine.Pin.IN)

    def reset_device(pin):
        machine.reset()

    button.irq(trigger=machine.Pin.IRQ_RISING, handler=reset_device)

