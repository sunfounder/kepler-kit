.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder des passionn√©s de Raspberry Pi, Arduino & ESP32 sur Facebook ! Explorez en profondeur le Raspberry Pi, l'Arduino et l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

3. Syst√®me de S√©curit√© via @IFTTT
============================================

Avec ce projet, nous allons cr√©er un dispositif de s√©curit√© utilisant un capteur PIR pour d√©tecter toute intrusion dans votre maison par un cambrioleur ou un animal errant. En cas de d√©tection, vous recevrez une alerte par e-mail.

Webhook sera utilis√© comme service de base.
Une requ√™te POST est envoy√©e au service IFTTT depuis le Raspberry Pi Pico W.
Avec IFTTT, nous allons cr√©er un Applet pour intercepter le webhook et envoyer un e-mail.

**1. Composants Requis**

Dans ce projet, nous aurons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - DANS CE KIT
        - LIEN
    *   - Kepler Kit	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_transistor`
        - 1(S8050)
        - |link_transistor_buy|
    *   - 6
        - :ref:`cpn_resistor`
        - 2(1KŒ©, 10KŒ©)
        - |link_resistor_buy|
    *   - 7
        - :ref:`cpn_button`
        - 1
        - |link_button_buy|
    *   - 8
        - Buzzer Actif :ref:`cpn_buzzer`
        - 1
        - 
    *   - 9
        - :ref:`cpn_lipo_charger`
        - 1
        -  
    *   - 10
        - Batterie 18650
        - 1
        -  
    *   - 11
        - Support de Batterie
        - 1
        -  
    *   - 12
        - :ref:`cpn_pir`
        - 1
        - |link_pir_buy|

**2. Construire le Circuit**

.. warning:: 
        
    Assurez-vous que votre module chargeur Li-po est connect√© comme indiqu√© sur le sch√©ma. Sinon, un court-circuit risque d'endommager votre batterie et votre circuit.

.. image:: img/wiring/3.ifttt_mail_bb.png
    :width: 800


**3. CONFIGURER IFTTT**

IFTTT est un service gratuit qui offre diverses fa√ßons de connecter diff√©rents services de donn√©es entre eux.

Nous allons cr√©er un Applet qui r√©agit √† un webhook (URL personnalis√©e) qui envoie des donn√©es √† IFTTT.
IFTTT enverra ensuite un e-mail pour vous.

Veuillez suivre les √©tapes ci-dessous sur IFTTT.

1. Visitez |link_ifttt| pour vous connecter ou cr√©er un compte.

    .. image:: img/ifttt-1.png
        :width: 500

2. Cliquez sur **Create**.

    .. image:: img/ifttt-2.png
        :width: 500

3. Ajoutez un √©v√©nement **If This**.

    .. image:: img/ifttt-3.png
        :width: 500

4. Recherchez **Webhooks**.

    .. image:: img/ifttt-4.png
        :width: 500

5. Appuyez sur **Receive a web request**.

    .. image:: img/ifttt-5.png
        :width: 500

6. Remplissez le nom de l'√©v√©nement (par exemple, SecurityWarning), et cliquez sur **Create trigger**.

    .. image:: img/ifttt-6.png
        :width: 500

7. Ajoutez un √©v√©nement **Then That**.

    .. image:: img/ifttt-7.png
        :width: 500

8. Recherchez **Email**.

    .. image:: img/ifttt-8.png
        :width: 500

9. Cliquez sur **Send me an email**.

    .. image:: img/ifttt-9.png
        :width: 500

10. Remplissez **Subject** et **Body**, puis cliquez sur **Create action**.

    .. image:: img/ifttt-10.png
        :width: 500

11. Cliquez sur **Continue** pour terminer la configuration.

    .. image:: img/ifttt-11.png
        :width: 500

12. Modifiez le titre et c'est termin√©.

    .. image:: img/ifttt-12.png
        :width: 500

13. Vous serez automatiquement redirig√© vers la page de d√©tails de l'Applet, o√π vous pourrez voir que l'Applet est connect√© et activer/d√©sactiver son commutateur.

    .. image:: img/ifttt-13.png
        :width: 500


**4. Ex√©cuter le Script**

#. Maintenant que nous avons cr√©√© l'Applet IFTTT, nous avons besoin de la cl√© API que vous pouvez obtenir depuis le |link_webhooks| pour permettre au Pico W d'acc√©der √† IFTTT.

    .. image:: img/ifttt-14.png
        :width: 500

#. Copiez-la dans le script ``secrets.py`` sur le Raspberry Pi Pico W.

    .. image:: img/3_ifttt4.png

    .. note::

        Si vous n'avez pas les scripts ``do_connect.py`` et ``secrets.py`` dans votre Pico W, veuillez vous r√©f√©rer √† :ref:`iot_access` pour les cr√©er.

    .. code-block:: python
        :emphasize-lines: 4

        secrets = {
        'ssid': 'SSID',
        'password': 'PASSWORD',
        'webhooks_key':'WEBHOOKS_API_KEY'
        }

#. Ouvrez le fichier ``3_ifttt_mail.py`` dans le chemin ``kepler-kit-main/iot``, puis cliquez sur **File** -> **Save as** ou appuyez sur ``Ctrl+Shift+S``.

    .. image:: img/3_ifttt1.png

#. S√©lectionnez **Raspberry Pi Pico** dans la fen√™tre popup qui appara√Æt.

    .. image:: img/3_ifttt2.png

#. D√©finissez le nom de fichier sur ``main.py``. Un message appara√Ætra si un fichier du m√™me nom existe d√©j√† sur votre Pico W.

    .. image:: img/3_ifttt3.png

#. Vous pouvez maintenant d√©brancher le c√¢ble USB et utiliser le module chargeur Li-po pour alimenter le Raspberry Pi Pico W. Vous entendrez un buzzer lorsque le script s'ex√©cute. Le buzzer continuera de sonner si le module PIR d√©tecte une personne ou une cr√©ature passant √† proximit√©, et une alerte par e-mail vous sera envoy√©e. Le script peut √™tre red√©marr√© en appuyant sur le bouton.

**Comment √ßa marche ?**

Le Raspberry Pi Pico W doit √™tre connect√© √† Internet, comme d√©crit dans :ref:`iot_access`. Pour ce projet, utilisez simplement :

.. code-block:: python

    from do_connect import *
    do_connect()

Le capteur PIR lit les donn√©es et appelle la fonction ``motion_detected()`` s'il d√©tecte quelqu'un passant (passage de donn√©es de 0 √† 1).

.. code-block:: python

    import machine

    sensor=machine.Pin(17,machine.Pin.IN)

    sensor.irq(trigger=machine.Pin.IRQ_RISING, handler=motion_detected)

Ensuite, le Pico W envoie les donn√©es √† IFTTT. Comme vous pouvez le voir, le ``message`` envoy√© √† IFTTT est une cha√Æne d'URL.
IFTTT identifie l'exp√©diteur via ``secrets['webhooks_key']``, et l'√©v√©nement d√©clench√© est identifi√© par ``event``.
Assurez-vous qu'ils soient corrects.

.. code-block:: python

    import urequests
    from secrets import *

    event='SecurityWarning'
    message=f"https://maker.ifttt.com/trigger/{event}/with/key/{secrets['webhooks_key']}"

    def motion_detected(pin):
        urequests.post(message)
        print(message)
        global warn_flag
        warn_flag=True
        sensor.irq(handler=None)

Quand ``motion_detected()`` est appel√©, la variable ``warn_flag`` est d√©finie sur ``True``, ce qui fait que le buzzer continue de sonner.

.. code-block:: python

    while True:
        if warn_flag==True:
            alarm.toggle()
            time.sleep_ms(50)

Le bouton sert √† red√©marrer le script.

.. code-block:: python

    button=machine.Pin(16,machine.Pin.IN)

    def reset_device(pin):
        machine.reset()

    button.irq(trigger=machine.Pin.IRQ_RISING, handler=reset_device)
