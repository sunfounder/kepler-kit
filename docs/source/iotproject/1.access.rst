.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _iot_access:

1. Zugang zum Netzwerk
===========================

Das Raspberry Pi Pico W √§hnelt stark dem Raspberry Pi Pico und bietet die gleichen GPIOs, den gleichen Micro-USB-Anschluss und die gleiche Gr√∂√üe. Der einzige Unterschied ist der zus√§tzliche CYW43439 2,4-GHz-WLAN-Chip von Infineon.
Jetzt schauen wir uns an, wie es sich mit unserem WLAN-Netzwerk verbindet.

**Ben√∂tigte Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist definitiv praktisch, ein ganzes Set zu kaufen. Hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name
        - ARTIKEL IN DIESEM SET
        - LINK
    *   - Kepler-Kit
        - 450+
        - |link_kepler_kit|

Sie k√∂nnen diese auch separat √ºber die untenstehenden Links erwerben.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - KOMPONENTE
        - ANZAHL
        - LINK

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Micro-USB-Kabel
        - 1
        - 

1. Internetverbindung herstellen
------------------------------------

Mit nur f√ºnf Zeilen MicroPython ist unser Raspberry Pi Pico W problemlos mit dem Internet verbunden.

Sie k√∂nnen den folgenden Code direkt in der Shell ausf√ºhren. Dr√ºcken Sie nach der Eingabe die ``Enter``-Taste.
Alternativ folgen Sie der untenstehenden Anleitung und legen eine neue ``.py``-Datei an, um den Code auszuf√ºhren.

.. code-block:: python

    import network
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    wlan.connect("SSID","PASSWORT")
    print(wlan.isconnected())

#. Erstellen Sie ein neues Skript, indem Sie in Thonny auf die Schaltfl√§che **Neu** klicken. Kopieren Sie dann den oben stehenden Code und √§ndern Sie ``SSID`` und ``PASSWORT`` entsprechend Ihren Angaben.

    .. image:: img/access1.png

#. Um das Skript auszuf√ºhren, klicken Sie auf die Schaltfl√§che **Aktuelles Skript ausf√ºhren** oder dr√ºcken Sie F5. Bei erfolgreicher Verbindung wird ``true`` ausgegeben.

    .. note::

        Vergewissern Sie sich, dass das Raspberry Pi Pico W per USB-Kabel mit dem Computer verbunden ist. W√§hlen Sie dann unten rechts MicroPython (Raspberry Pi Pico).COMXxx als Interpreter.

    .. image:: img/access2.png

2. Zeit√ºberschreitung und IP-Anzeige
-----------------------------------------------

Angesichts potenziell schlechter Netzwerkbedingungen f√ºgen wir dem Code eine √úberpr√ºfung f√ºr Zeit√ºberschreitungen hinzu.

Ist die Verbindung erfolgreich, wird die IP-Adresse des Pico W nach dem Ausf√ºhren des Skripts angezeigt.

.. code-block:: python

    import network
    import time

    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    wlan.connect("SSID","PASSWORD")

    # Wait for connect or fail
    wait = 10
    while wait > 0:
        if wlan.status() < 0 or wlan.status() >= 3:
            break
        wait -= 1
        print('waiting for connection...')
        time.sleep(1)

    # Handle connection error
    if wlan.status() != 3:
        raise RuntimeError('wifi connection failed')
    else:
        print('connected')
        print('IP: ', wlan.ifconfig()[0])

.. image:: img/access3.png


* ``wlan.status()`` Funktion: Gibt den aktuellen Status der WLAN-Verbindung zur√ºck. Die R√ºckgabewerte sind in der folgenden Tabelle aufgef√ºhrt.

    .. list-table::
        :widths: 40 10 50

        * - Status
          - Wert
          - Beschreibung
        * - STAT_IDLE
          - 0
          - keine Verbindung und keine Aktivit√§t,
        * - STAT_CONNECTING
          - 1
          - Verbindungsaufbau l√§uft,
        * - STAT_WRONG_PASSWORD
          - -3
          - fehlgeschlagen wegen falschem Passwort,
        * - STAT_NO_AP_FOUND
          - -2
          - fehlgeschlagen, weil kein Zugangspunkt antwortete,
        * - STAT_CONNECT_FAIL
          - -1
          - fehlgeschlagen aus anderen Gr√ºnden,
        * - STAT_GOT_IP
          - 3
          - Verbindung erfolgreich.

* ``wlan.ifconfig()`` Funktion: Ermittelt IP-Adressen, Subnetzmasken, Gateways und DNS-Server. Bei direktem Aufruf wird ein 4-Tupel mit den genannten Informationen zur√ºckgegeben. In diesem Fall zeigen wir nur die IP-Adresse an.

*  `class WLAN ‚Äì MicroPython Docs <https://docs.micropython.org/en/latest/library/network.WLAN.html>`_

.. _create_secrets:



3. Speichern privater Informationen in ``secrets.py``
----------------------------------------------------------

Wenn Sie Ihr Pico W-Projekt teilen m√∂chten, wollen Sie sicher nicht, dass andere Ihr WLAN-Passwort oder Ihren API-Schl√ºssel einsehen k√∂nnen. Aus Sicherheitsgr√ºnden legen wir daher eine ``secrets.py``-Datei an, um diese sensiblen Informationen zu sch√ºtzen.

# F√ºgen Sie den folgenden Code in eine neue Skriptdatei in Thonny ein. Passen Sie ``SSID`` und ``PASSWORT`` Ihren eigenen Anmeldedaten an.

    .. code-block:: python

        secrets = {
        'ssid': 'SSID',
        'password': 'PASSWORT',
        }

# W√§hlen Sie Raspberry Pi Pico im Popup-Fenster aus, das erscheint, wenn Sie auf "Speichern" klicken oder ``Strg+S`` dr√ºcken.

    .. image:: img/access4.png

# Vergeben Sie den Dateinamen ``secrets.py``.

    .. image:: img/access5.png

# Nun ist das Skript auf Ihrem Raspberry Pi Pico W einsehbar.

    .. image:: img/access6.png

# In anderen Skripten k√∂nnen Sie die Datei folgenderma√üen einbinden. Nach der Ausf√ºhrung sollten Sie eine erfolgreiche WLAN-Verbindung feststellen. Die ``secrets.py``-Datei wird als Bibliothek importiert, sodass kein Risiko eines Informationslecks besteht.

    .. code-block:: python
        :emphasize-lines: 3,7

        import network
        import time
        from secrets import secrets

        wlan = network.WLAN(network.STA_IF)
        wlan.active(True)
        wlan.connect(secrets['ssid'], secrets['password'])

        # Wait for connect or fail
        wait = 10
        while wait > 0:
            if wlan.status() < 0 or wlan.status() >= 3:
                break
            wait -= 1
            print('waiting for connection...')
            time.sleep(1)

        # Handle connection error
        if wlan.status() != 3:
            raise RuntimeError('wifi connection failed')
        else:
            print('connected')
            print('IP: ', wlan.ifconfig()[0])

    .. image:: img/access8.png

.. _do_connect:

4. Internetverbindung √ºber ``do_connect.py``
--------------------------------------------------------------

Da unsere zuk√ºnftigen Projekte aller Voraussicht nach eine Netzwerkverbindung ben√∂tigen, bietet es sich an, eine separate ``do_connect.py``-Datei anzulegen und darin die relevanten Funktionen zu speichern. So k√∂nnen wir den Code f√ºr komplexere Projekte erheblich vereinfachen.

# Kopieren Sie den nachfolgenden Code in eine neue Skriptdatei und speichern Sie diese auf dem Raspberry Pi Pico als ``do_connect.py``.

    .. code-block:: python

        import network
        import time
        from secrets import *

        def do_connect(ssid=secrets['ssid'],psk=secrets['password']):
            wlan = network.WLAN(network.STA_IF)
            wlan.active(True)
            wlan.connect(ssid, psk)

            # Wait for connect or fail
            wait = 10
            while wait > 0:
                if wlan.status() < 0 or wlan.status() >= 3:
                    break
                wait -= 1
                print('waiting for connection...')
                time.sleep(1)

            # Handle connection error
            if wlan.status() != 3:
                raise RuntimeError('wifi connection failed')
            else:
                print('connected')
                ip=wlan.ifconfig()[0]
                print('network config: ', ip)
                return ip

    .. image:: img/access7.png

# Ein Aufruf in anderen Skripten nach dem folgenden Schema erm√∂glicht die Netzwerkverbindung des Raspberry Pi Pico W.

    .. code-block:: python

        from do_connect import *
        do_connect()

.. https://www.tomshardware.com/de/reviews/raspberry-pi-pico-w
