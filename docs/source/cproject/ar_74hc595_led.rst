.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. ¬°Sum√©rgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros apasionados!

    **¬øPor qu√© unirse?**

    - **Soporte de Expertos**: Resuelve problemas post-venta y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y Comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones Exclusivas**: Accede anticipadamente a anuncios de nuevos productos y adelantos.
    - **Descuentos Especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones Festivas y Sorteos**: Participa en sorteos y promociones durante las festividades.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy.

.. _ar_74hc_led:

5.1 - Microchip - 74HC595
===========================

El circuito integrado (o "IC" por sus siglas en ingl√©s) es un dispositivo o componente electr√≥nico en miniatura que se representa en los circuitos mediante el s√≠mbolo "IC".

Mediante un proceso espec√≠fico, se interconectan transistores, resistencias, condensadores, inductores y otros componentes y cables necesarios en un circuito, todo fabricado en una o varias peque√±as obleas de semiconductor o sustratos diel√©ctricos y luego encapsulados en una carcasa. Esto crea una estructura en miniatura con las funciones de circuito requeridas, donde todos los componentes est√°n estructurados en una sola unidad, logrando un gran avance hacia la micro-miniaturizaci√≥n, bajo consumo energ√©tico, inteligencia y alta fiabilidad en los componentes electr√≥nicos.

Los inventores de los circuitos integrados son Jack Kilby (circuitos integrados basados en germanio (Ge)) y Robert Norton Noyce (circuitos integrados basados en silicio (Si)).

Este kit incluye un IC, el 74HC595, que permite reducir considerablemente el uso de pines GPIO. En concreto, puede reemplazar 8 pines de salida de se√±ales digitales escribiendo un n√∫mero binario de 8 bits.

* `Binary number - Wikipedia <https://en.wikipedia.org/wiki/Binary_number>`_

* :ref:`74HC595`

**Componentes Necesarios**

Para este proyecto, necesitamos los siguientes componentes.

Es muy conveniente adquirir un kit completo, aqu√≠ tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ITEMS EN ESTE KIT
        - LINK DE COMPRA
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - INTRODUCCI√ìN DEL COMPONENTE
        - CANTIDAD
        - LINK DE COMPRA

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 8 (220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 8
        - |link_led_buy|
    *   - 7
        - :ref:`cpn_74hc595`
        - 1
        - |link_74hc595_buy|

**Esquema**

|sch_74hc_led|

* Cuando MR (pin 10) est√° en nivel alto y OE (pin 13) en nivel bajo, los datos se ingresan en el flanco ascendente de SHcp y pasan al registro de memoria mediante el flanco ascendente de SHcp.
* Si ambos relojes est√°n conectados, el registro de desplazamiento siempre tiene un pulso de anticipaci√≥n sobre el registro de memoria.
* El registro de memoria cuenta con un pin de entrada en serie (Ds), un pin de salida en serie (Q) y un bot√≥n de reinicio as√≠ncrono (nivel bajo).
* El registro de memoria produce un bus con salida paralela de 8 bits y en tres estados.
* Cuando OE est√° habilitado (nivel bajo), los datos en el registro de memoria se emiten al bus (Q0 ~ Q7).

**Conexi√≥n**

|wiring_74hc_led|

**C√≥digo**

.. note::

    * Puedes abrir el archivo ``5.1_microchip_74hc595.ino`` en la ruta ``kepler-kit-main/arduino/5.1_microchip_74hc595``.
    * O copia este c√≥digo en el **Arduino IDE**.
    * No olvides seleccionar la placa (Raspberry Pi Pico) y el puerto correcto antes de hacer clic en el bot√≥n **Upload**.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/71854882-0c1b-4d09-b3e7-5ef7272f7293/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Cuando el programa est√© en ejecuci√≥n, podr√°s ver c√≥mo los LEDs se encienden uno tras otro.

**¬øC√≥mo funciona?**

Declara un array donde se almacenan varios n√∫meros binarios de 8 bits que se utilizan para cambiar el estado de los ocho LEDs controlados por el 74HC595.

.. code-block:: arduino

    int datArray[] = {0b00000000, 0b00000001, 0b00000011, 0b00000111, 0b00001111, 0b00011111, 0b00111111, 0b01111111, 0b11111111};

Configura ``STcp`` a nivel bajo primero y luego a nivel alto. Esto generar√° un pulso ascendente en ``STcp``.

.. code-block:: arduino

    digitalWrite(STcp,LOW); 

La funci√≥n ``shiftOut()`` desplaza un byte de datos un bit a la vez, lo que significa que desplaza un byte de datos en datArray[num] al registro de desplazamiento con el pin DS. MSBFIRST indica que se mueve desde los bits m√°s altos.

.. code-block:: arduino

    shiftOut(DS,SHcp,MSBFIRST,datArray[num]);

Despu√©s de ejecutar ``digitalWrite(STcp,HIGH)``, STcp estar√° en el flanco ascendente. En ese momento, los datos en el registro de desplazamiento se mover√°n al registro de memoria.

.. code-block:: arduino

    digitalWrite(STcp,HIGH);

Un byte de datos se transferir√° al registro de memoria despu√©s de 8 veces. Luego, los datos del registro de memoria se env√≠an al bus (Q0-Q7). Por ejemplo, desplazando ``B00000001`` se encender√° el LED controlado por Q0 y apagar√° los LEDs controlados por Q1~Q7.
