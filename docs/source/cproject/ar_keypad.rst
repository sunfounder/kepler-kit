.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_keypad:

4.2 - Clavier 4x4
========================

Le clavier 4x4, √©galement connu sous le nom de clavier matriciel, est une matrice de 16 touches dispos√©es sur un seul panneau.

Le clavier peut √™tre trouv√© sur des appareils n√©cessitant principalement une saisie num√©rique, tels que les calculatrices, t√©l√©commandes de t√©l√©vision, t√©l√©phones √† boutons-poussoirs, distributeurs automatiques, guichets automatiques (DAB), serrures √† combinaison et serrures de porte num√©riques.

Dans ce projet, nous allons apprendre √† d√©terminer quelle touche est press√©e et obtenir la valeur de la touche correspondante.

* :ref:`cpn_keypad`
* `E.161 - Wikipedia <https://en.wikipedia.org/wiki/E.161>`_

**Composants requis**

Dans ce projet, nous avons besoin des composants suivants. 

Il est plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN D'ACHAT
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - INTRODUCTION DES COMPOSANTS	
        - QUANTIT√â
        - LIEN D'ACHAT

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 4 (10KŒ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_keypad`
        - 1
        - |link_keypad_buy|

**Sch√©ma**

|sch_keypad_ar|

Les rang√©es du clavier (G2 ~ G5) sont programm√©es pour √™tre en √©tat haut ; si l'une des broches G6 ~ G9 est lue comme √©tant en √©tat haut, cela indique quelle touche est press√©e.

Par exemple, si G6 est en √©tat haut, alors la touche num√©rique 1 est press√©e ; c'est parce que les broches de commande de la touche num√©rique 1 sont G2 et G6, et quand cette touche est press√©e, G2 et G6 seront connect√©es ensemble, donc G6 sera √©galement en √©tat haut.


**C√¢blage**

|wiring_keypad_ar|

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``4.2_4x4_keypad.ino`` sous le chemin ``kepler-kit-main/arduino/4.2_4x4_keypad``. 
    * Ou copiez ce code dans l'**Arduino IDE**.
    * N'oubliez pas de s√©lectionner la carte Raspberry Pi Pico et le port correct avant de cliquer sur le bouton **Upload**.
    * La biblioth√®que ``Adafruit Keypad`` est utilis√©e ici, vous pouvez l'installer depuis le **Library Manager**.

      .. image:: img/lib_ad_keypad.png

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/6c776dfc-cb74-49d7-8906-f1382e0e7b7b/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s l'ex√©cution du programme, la console affichera les touches que vous avez press√©es sur le clavier.

**Comment √ßa fonctionne**

1. Inclusion de la biblioth√®que

   Nous commen√ßons par inclure la biblioth√®que ``Adafruit_Keypad``, qui nous permet de facilement interagir avec le clavier.

   .. code-block:: arduino

     #include "Adafruit_Keypad.h"

2. Configuration du clavier

   .. code-block:: arduino

     const byte ROWS = 4;
     const byte COLS = 4;
     char keys[ROWS][COLS] = {
       { '1', '2', '3', 'A' },
       { '4', '5', '6', 'B' },
       { '7', '8', '9', 'C' },
       { '*', '0', '#', 'D' }
     };
     byte rowPins[ROWS] = { 2, 3, 4, 5 };
     byte colPins[COLS] = { 8, 9, 10, 11 };

   - Les constantes ``ROWS`` et ``COLS`` d√©finissent les dimensions du clavier. 
   - ``keys`` est un tableau 2D qui stocke l'√©tiquette de chaque touche sur le clavier.
   - ``rowPins`` et ``colPins`` sont des tableaux qui stockent les broches de l'Arduino connect√©es aux lignes et colonnes du clavier.

   .. raw:: html

      <br/>


3. Initialisation du clavier

   Cr√©ez une instance de ``Adafruit_Keypad`` appel√©e ``myKeypad`` et initialisez-la.

   .. code-block:: arduino

     Adafruit_Keypad myKeypad = Adafruit_Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

4. Fonction setup()

   Initialisez la communication s√©rie et le clavier personnalis√©.

   .. code-block:: arduino

     void setup() {
       Serial.begin(9600);
       myKeypad.begin();
     }

5. Boucle principale

   V√©rifiez les √©v√©nements de touche et affichez-les dans le moniteur s√©rie.

   .. code-block:: arduino

     void loop() {
       myKeypad.tick();
       while (myKeypad.available()) {
         keypadEvent e = myKeypad.read();
         Serial.print((char)e.bit.KEY);
         if (e.bit.EVENT == KEY_JUST_PRESSED) Serial.println(" pressed");
         else if (e.bit.EVENT == KEY_JUST_RELEASED) Serial.println(" released");
       }
       delay(10);
     }

