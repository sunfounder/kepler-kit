.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_74hc_788bs:


5.4 - Graphiques 8x8 Pixels
================================

La matrice LED est un affichage √† points bas r√©solution. Elle utilise un ensemble de diodes √©lectroluminescentes en tant que pixels pour afficher des motifs.

Elles sont suffisamment lumineuses pour √™tre visibles en plein soleil, et vous pouvez les voir dans certains magasins, panneaux publicitaires, enseignes, et affichages de messages variables (comme ceux des v√©hicules de transport en commun).

Ce kit contient une matrice de points 8x8 avec 16 broches. Les anodes sont connect√©es en lignes et les cathodes en colonnes (au niveau du circuit), ce qui permet de contr√¥ler les 64 LED.

Pour allumer la premi√®re LED, vous devez fournir un niveau haut pour Row1 et un niveau bas pour Col1. 
Pour allumer la deuxi√®me LED, il faut fournir un niveau haut pour Row1, un niveau bas pour Col2, et ainsi de suite. En contr√¥lant le courant √† travers chaque paire de lignes et de colonnes, chaque LED peut √™tre contr√¥l√©e individuellement pour afficher des caract√®res ou des images.

* :ref:`cpn_dot_matrix`
* :ref:`cpn_74hc595`

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN D'ACHAT
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - INTRODUCTION DES COMPOSANTS
        - QUANTIT√â
        - LIEN D'ACHAT

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_dot_matrix`
        - 1
        - 
    *   - 6
        - :ref:`cpn_74hc595`
        - 2
        - |link_74hc595_buy|

**Sch√©ma**

|sch_ledmatrix|

La matrice 8x8 est contr√¥l√©e par deux puces 74HC595, l'une contr√¥lant les lignes et l'autre les colonnes, tandis que ces deux puces partagent G18~G20, ce qui permet de r√©duire consid√©rablement les ports I/O de la carte Pico W.

Pico W doit sortir un nombre binaire de 16 bits √† la fois, les 8 premiers bits sont donn√©s au 74HC595 qui contr√¥le les lignes, et les 8 derniers au 75HC595 qui contr√¥le les colonnes, permettant ainsi √† la matrice de points d'afficher un motif sp√©cifique.

Q7' : broche de sortie s√©rie, connect√©e √† DS d'un autre 74HC595 pour connecter plusieurs 74HC595 en s√©rie.

**C√¢blage**

Construisez le circuit. Comme le c√¢blage est complexe, faisons-le √©tape par √©tape.

**√âtape 1 :** Ins√©rez d'abord la Pico W, la matrice LED et les deux puces 74HC595 
sur la breadboard. Connectez le 3,3V et le GND de la Pico W aux trous sur les deux 
c√¥t√©s de la carte, puis branchez les broches 16 et 10 des deux puces 74HC595 √† VCC, 
les broches 13 et 8 √† GND.

.. note::
   Dans l'image Fritzing ci-dessus, le c√¥t√© avec l'√©tiquette est en bas.

|wiring_ledmatrix_4|

**√âtape 2 :** Connectez la broche 11 des deux 74HC595 ensemble, puis √† GP20 ; 
ensuite, la broche 12 des deux puces √† GP19 ; puis, la broche 14 du 74HC595 √† 
gauche √† GP18 et la broche 9 √† la broche 14 du second 74HC595.

|wiring_ledmatrix_3|

**√âtape 3 :** Le 74HC595 sur la droite contr√¥le les colonnes de la matrice LED. 
Voir le tableau ci-dessous pour le mapping. Les broches Q0-Q7 du 74HC595 sont 
respectivement reli√©es aux broches 13, 3, 4, 10, 6, 11, 15, et 16.

+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+
| **74HC595**        | **Q0** | **Q1** | **Q2** | **Q3** | **Q4** | **Q5** | **Q6** | **Q7** |
+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+
| **LED Dot Matrix** | **13** | **3**  | **4**  | **10** | **6**  | **11** | **15** | **16** |
+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+

|wiring_ledmatrix_2|

**√âtape 4 :** Connectez maintenant les lignes de la matrice LED. Le 74HC595 √† 
gauche contr√¥le les lignes de la matrice LED. Voir le tableau ci-dessous pour 
le mapping. Les broches Q0-Q7 du 74HC595 √† gauche sont reli√©es respectivement 
aux broches 9, 14, 8, 12, 1, 7, 2, et 5.

+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+
| **74HC595**        | **Q0** | **Q1** | **Q2** | **Q3** | **Q4** | **Q5** | **Q6** | **Q7** |
+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+
| **LED Dot Matrix** | **9**  | **14** | **8**  | **12** | **1**  | **7**  | **2**  | **5**  |
+--------------------+--------+--------+--------+--------+--------+--------+--------+--------+

|wiring_ledmatrix_1|

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``5.4_8x8_pixel_graphics.ino`` sous le chemin ``kepler-kit-main/arduino/5.4_8x8_pixel_graphics``.
    * Ou copiez ce code dans l'**Arduino IDE**.
    * N'oubliez pas de s√©lectionner la carte (Raspberry Pi Pico) et le port correct avant de cliquer sur le bouton **Upload**.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/b3682592-17d4-4690-a730-1c0a6fcbd353/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Une fois le programme en cours d'ex√©cution, vous verrez un graphique **x** affich√© sur la matrice de points 8x8.


**Comment √ßa marche ?**

Ici, nous utilisons deux 74HC595 pour fournir des signaux aux lignes et colonnes de la matrice. 
La m√©thode de fourniture des signaux est la m√™me que ``shiftOut()`` dans les chapitres pr√©c√©dents, sauf qu'ici nous devons √©crire un nombre binaire de 16 bits √† la fois.

La boucle principale appelle ``shiftOut()`` deux fois, √©crit deux nombres binaires de 8 bits, puis les envoie au bus pour afficher un motif.

Cependant, puisque les LED dans la matrice utilisent des p√¥les communs, contr√¥ler plusieurs lignes/colonnes en m√™me temps entra√Ænera des interf√©rences. 
Il est donc n√©cessaire d'activer une colonne (ou une ligne) √† la fois, de boucler 8 fois, et d'utiliser le principe de r√©manence visuelle pour permettre √† l'≈ìil humain de fusionner 8 motifs en un seul.

.. code-block:: arduino

   for(int num = 0; num <=8; num++)
   {
      digitalWrite(STcp,LOW); //ground ST_CP and hold low for as long as you are transmitting
      shiftOut(DS,SHcp,MSBFIRST,datArray[num]);
      shiftOut(DS,SHcp,MSBFIRST,0x80>>num);    
      //return the latch pin high to signal chip that it 
      //no longer needs to listen for information
      digitalWrite(STcp,HIGH); //pull the ST_CPST_CP to save the data
   }

Dans cet exemple, la fonction principale int√®gre une boucle ``for``. Lorsque ``i`` vaut 1, 
seule la premi√®re ligne est activ√©e (le chip de contr√¥le re√ßoit la valeur ``0x80``) et l'image de la premi√®re ligne est √©crite. 

Quand ``i`` vaut 2, la deuxi√®me ligne est activ√©e (le chip re√ßoit ``0x40``) et l'image de la seconde ligne est √©crite. Et ainsi de suite pour 8 sorties.


**En savoir plus**

Essayez de remplacer ``datArray`` par les tableaux suivants et voyez ce qui appara√Æt !

.. code-block:: arduino

   int datArray1[] = {0xFF,0xEF,0xC7,0xAB,0xEF,0xEF,0xEF,0xFF};
   int datArray2[] = {0xFF,0xEF,0xEF,0xEF,0xAB,0xC7,0xEF,0xFF};
   int datArray3[] = {0xFF,0xEF,0xDF,0x81,0xDF,0xEF,0xFF,0xFF};
   int datArray4[] = {0xFF,0xF7,0xFB,0x81,0xFB,0xF7,0xFF,0xFF};
   int datArray5[] = {0xFF,0xBB,0xD7,0xEF,0xD7,0xBB,0xFF,0xFF};
   int datArray6[] = {0xFF,0xFF,0xF7,0xEB,0xDF,0xBF,0xFF,0xFF};

Ou, essayez de cr√©er vos propres graphiques.
