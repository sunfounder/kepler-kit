.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_fade:

2.3 - LED avec variation d'intensit√©
========================================

Jusqu'√† pr√©sent, nous avons utilis√© uniquement deux signaux de sortie : niveau haut et niveau bas (ou appel√©s 1 & 0, ALLUM√â & √âTEINT), ce que l'on appelle une sortie num√©rique.
Cependant, dans la pratique, de nombreux dispositifs ne fonctionnent pas simplement en mode ON/OFF, par exemple, ajuster la vitesse d'un moteur ou la luminosit√© d'une lampe de bureau.
Autrefois, un curseur permettant de r√©gler la r√©sistance √©tait utilis√© pour atteindre cet objectif, mais cela √©tait souvent peu fiable et inefficace.
C'est pourquoi la modulation de largeur d'impulsion (PWM) est apparue comme une solution viable √† ces probl√®mes complexes.

Une sortie num√©rique compos√©e d'un niveau haut et d'un niveau bas est appel√©e une impulsion. La largeur de l'impulsion de ces broches peut √™tre ajust√©e en modifiant la vitesse de commutation ON/OFF.

En termes simples, lorsque nous faisons clignoter la LED dans un court intervalle de temps (par exemple 20 ms, correspondant au temps de persistance visuelle de la plupart des gens),
la LED s'allume, s'√©teint et se rallume, nous ne percevons pas qu'elle s'√©teint, mais la luminosit√© de la lumi√®re sera l√©g√®rement r√©duite.
Pendant cette p√©riode, plus la LED est allum√©e longtemps, plus elle est lumineuse.
Autrement dit, plus l'impulsion est large au cours du cycle, plus le "signal √©lectrique" √©mis par le microcontr√¥leur est puissant.
C'est ainsi que le PWM contr√¥le la luminosit√© de la LED (ou la vitesse du moteur).

* `Pulse-width modulation - Wikipedia <https://en.wikipedia.org/wiki/Pulse-width_modulation>`_

Il y a quelques points √† noter lorsque Pico W utilise le PWM. Jetons un ≈ìil √† cette image.

|pin_pwm|

Chaque broche GPIO de Pico W supporte le PWM, mais en r√©alit√©, il dispose de 16 sorties PWM ind√©pendantes (au lieu de 30), r√©parties entre GP0 et GP15 √† gauche, et la sortie PWM des GPIO √† droite est une copie √©quivalente de celle de gauche.

Il est important d'√©viter de d√©finir le m√™me canal PWM pour diff√©rents usages durant la programmation (par exemple, GP0 et GP16 sont tous deux PWM_0A).

Apr√®s avoir compris cela, essayons de r√©aliser l'effet d'une LED avec variation d'intensit√©.

* :ref:`cpn_led`

**Composants requis**

Dans ce projet, nous avons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN D'ACHAT
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - INTRODUCTION DES COMPOSANTS	
        - QUANTIT√â
        - LIEN D'ACHAT

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 1(220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|

**Sch√©ma**

|sch_led|

Ce projet utilise le m√™me circuit que le premier projet :ref:`ar_led`, mais le type de signal est diff√©rent. Le premier projet utilisait des niveaux num√©riques haut et bas (0 & 1) directement depuis GP15 pour allumer ou √©teindre les LED, tandis que ce projet utilise un signal PWM de GP15 pour contr√¥ler la luminosit√© de la LED.

**C√¢blage**

|wiring_led|

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``2.3_fading_led.ino`` sous le chemin ``kepler-kit-main/arduino/2.3_fading_led``. 
    * Ou copiez ce code dans l'**Arduino IDE**.
    * N'oubliez pas de s√©lectionner la carte (Raspberry Pi Pico) et le port correct avant de cliquer sur le bouton **Upload**.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/86807da4-4714-4d3c-b6af-0f1b9a62223b/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


La LED deviendra progressivement plus lumineuse au fur et √† mesure que le programme s'ex√©cute.

**Comment √ßa fonctionne ?**

D√©clarez la broche 15 comme ledPin.

.. code-block:: C

    const int ledPin = 15;

``analogWrite()`` dans ``loop()`` attribue √† ledPin une valeur analogique (onde PWM) comprise entre 0 et 255 pour changer la luminosit√© de la LED.

.. code-block:: C

    analogWrite(ledPin, value);

En utilisant une boucle for, la valeur de ``analogWrite()`` peut √™tre modifi√©e progressivement entre la valeur minimale (0) et la valeur maximale (255).

.. code-block:: C

    for (int value = 0 ; value <= 255; value += 5) {
        analogWrite(ledPin, value);
    }

Pour voir clairement le ph√©nom√®ne exp√©rimental, un ``delay(30)`` doit √™tre ajout√© √† la boucle for pour contr√¥ler le temps de changement de luminosit√©.

.. code-block:: C

    for (int value = 0 ; value <= 255; value += 5) {
        analogWrite(ledPin, value);
        delay(30);
    }
