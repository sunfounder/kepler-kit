.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino & ESP32 sur Facebook ! Plongez au c≈ìur de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_neopixel:

3.3 - Bande LED WS2812 RGB
===============================

Le WS2812 est une source lumineuse LED √† contr√¥le intelligent, o√π le circuit de contr√¥le et la puce RGB sont int√©gr√©s dans un composant de type 5050. 
Il comprend un verrouillage de donn√©es num√©riques intelligent pour le port de donn√©es, ainsi qu'un circuit de restructuration et d'amplification des signaux. 
Il int√®gre √©galement un oscillateur interne de pr√©cision et un contr√¥le programmable de courant constant, 
garantissant ainsi une uniformit√© de couleur √©lev√©e des points lumineux.

Le protocole de transfert de donn√©es utilise un mode de communication NZR unique. 
Apr√®s la r√©initialisation de l'alimentation du pixel, le port DIN re√ßoit les donn√©es du contr√¥leur, le premier pixel collecte les 24 premiers bits de donn√©es puis les envoie au verrou de donn√©es interne. Les autres donn√©es, restructur√©es par le circuit d'amplification interne, sont envoy√©es au pixel suivant via le port DO. Apr√®s la transmission de chaque pixel, le signal r√©duit de 24 bits. 
Les pixels adoptent une technologie de transmission de retransmission automatique, ce qui signifie que le nombre de pixels en cascade n'est pas limit√© par la transmission du signal, mais uniquement par la vitesse de transmission du signal.


* :ref:`cpn_ws2812`

**Composants requis**

Dans ce projet, nous avons besoin des composants suivants. 

Il est pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN D'ACHAT
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - INTRODUCTION DES COMPOSANTS	
        - QUANTIT√â
        - LIEN D'ACHAT

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_ws2812`
        - 1
        - |link_ws2812_buy|

**Sch√©ma**

|sch_ws2812|

**C√¢blage**

|wiring_ws2812|


.. warning::
    Un point important auquel vous devez pr√™ter attention est le courant.

    Bien que la bande LED avec n'importe quel nombre de LEDs puisse √™tre utilis√©e avec le Pico W, la puissance de son pin VBUS est limit√©e.
    Ici, nous utiliserons huit LEDs, ce qui est sans danger.
    Mais si vous souhaitez utiliser davantage de LEDs, vous devez ajouter une alimentation s√©par√©e.
    

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``3.3_rgb_led_strip.ino`` sous le chemin ``kepler-kit-main/arduino/3.3_rgb_led_strip``. 
    * Ou copiez ce code dans l'**Arduino IDE**.
    * Ensuite, s√©lectionnez la carte Raspberry Pi Pico et le port correct avant de cliquer sur le bouton Upload.
    * La biblioth√®que ``Adafruit_NeoPixel`` est utilis√©e ici, vous pouvez l'installer depuis le **Gestionnaire de Biblioth√®ques**.

      .. image:: img/lib_neopixel.png

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/efe5d60f-ea0f-4446-bc5b-30c76197fedf/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


Choisissons quelques couleurs pr√©f√©r√©es et affichons-les sur la bande LED RGB !

**Comment √ßa fonctionne ?**

D√©clarez un objet de type Adafruit_NeoPixel, connect√© au ``PIXEL_PIN``, 
et d√©finissez ``PIXEL_COUNT`` comme le nombre de LEDs RGB sur la bande.

.. code-block:: arduino

    #define PIXEL_PIN    0
    #define PIXEL_COUNT 8

    // D√©clarer notre objet bande NeoPixel :
    Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, NEO_GRB + NEO_KHZ800);
    // Argument 1 = Nombre de pixels dans la bande NeoPixel
    // Argument 2 = Num√©ro de pin Arduino (la plupart sont valides)
    // Argument 3 = Indicateurs de type de pixel, √† combiner selon les besoins :
    //   NEO_KHZ800  Flux de bits √† 800 KHz (la plupart des produits NeoPixel avec LEDs WS2812)
    //   NEO_KHZ400  400 KHz (pixels 'v1' classiques (pas v2) FLORA, pilotes WS2811)
    //   NEO_GRB     Pixels c√¢bl√©s pour flux de bits GRB (la plupart des produits NeoPixel)
    //   NEO_RGB     Pixels c√¢bl√©s pour flux de bits RGB (pixels FLORA v1, pas v2)
    //   NEO_RGBW    Pixels c√¢bl√©s pour flux de bits RGBW (produits NeoPixel RGBW)

Initialisez l'objet bande et allumez tous les pixels sur 'off'.

Fonctions
    * ``strip.begin()`` : Initialise l'objet bande NeoPixel (OBLIGATOIRE).
    * ``strip.setPixelColor(index, color)`` : D√©finit la couleur d'un pixel (en RAM), la ``couleur`` doit √™tre une valeur 32 bits unique 'compact√©e'.
    * ``strip.Color(red, green, blue)`` : Couleur en tant que valeur 32 bits 'compact√©e'.
    * ``strip.show()`` : Met √† jour la bande avec les nouvelles couleurs.
  
**En savoir plus**

Nous pouvons g√©n√©rer des couleurs al√©atoires et cr√©er une lumi√®re fluide color√©e.

.. note::

    * Vous pouvez ouvrir le fichier ``3.3_rgb_led_strip_flowing.ino`` sous le chemin ``kepler-kit-main/arduino/3.3_rgb_led_strip_flowing``. 
    * Ou copiez ce code dans l'**Arduino IDE**.
    * N'oubliez pas de s√©lectionner la carte (Raspberry Pi Pico) et le port correct avant de cliquer sur le bouton Upload.

    

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/a3d7c520-b4f8-4445-9454-5fe7d2a24fd9/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


Vous pouvez √©galement faire en sorte que cette bande LED WS2812 effectue un cycle arc-en-ciel sur la roue chromatique (plage 65535).

.. note::

   * Vous pouvez ouvrir le fichier ``3.3_rgb_led_strip_rainbow.ino`` sous le chemin ``kepler-kit-main/arduino/3.3_rgb_led_strip_rainbow``. 
   * Ou copiez ce code dans l'**Arduino IDE**.
   * N'oubliez pas de s√©lectionner la carte (Raspberry Pi Pico) et le port correct avant de cliquer sur le bouton Upload.

    

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/47d84804-3560-48fa-86df-49f8e2f6ad63/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>   


* ``strip.getPixelColor(index)`` : Interroge la couleur d'un pixel pr√©c√©demment d√©fini.
* ``strip.ColorHSV(pixelHue)`` : Convertit la teinte, la saturation et la valeur en une couleur RGB 32 bits compact√©e pouvant √™tre pass√©e √† ``setPixelColor()`` ou √† d'autres fonctions compatibles RGB.
* ``strip.gamma32()`` : Offre une couleur plus fid√®le avant de l'attribuer √† chaque pixel.

