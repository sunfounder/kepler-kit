.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Explora en profundidad Raspberry Pi, Arduino y ESP32 junto a otros aficionados.

    **¬øPor qu√© unirte?**

    - **Soporte de expertos**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones exclusivas**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _ar_neopixel:

3.3 - Tira RGB WS2812
==========================

WS2812 es una fuente de luz LED con control inteligente donde el circuito de 
control y el chip RGB est√°n integrados en un componente de 5050. Internamente, 
incluye un puerto digital de almacenamiento de datos inteligente y un circuito 
de amplificaci√≥n para la remodelaci√≥n de la se√±al. Tambi√©n incorpora un oscilador 
interno de alta precisi√≥n y una parte de control de corriente constante programable, 
asegurando que el color de cada punto de p√≠xel sea altamente consistente.

El protocolo de transferencia de datos utiliza un modo de comunicaci√≥n NZR √∫nico. 
Despu√©s de que el p√≠xel se enciende y se reinicia, el puerto DIN recibe datos del 
controlador; el primer p√≠xel recoge 24 bits de datos iniciales y los env√≠a a un 
almacenamiento interno, mientras que el resto de los datos se transmiten al siguiente 
p√≠xel en cascada a trav√©s del puerto DO, gracias a la circuiter√≠a interna de amplificaci√≥n 
de se√±al. La tecnolog√≠a de transmisi√≥n con auto-remodelaci√≥n permite que el n√∫mero de p√≠xeles en cascada no tenga limitaciones en cuanto a la transmisi√≥n de la se√±al, y depende solo de la velocidad de transmisi√≥n de √©sta.

* :ref:`cpn_ws2812`

**Componentes necesarios**

En este proyecto, necesitamos los siguientes componentes.

Es muy conveniente comprar un kit completo; aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ITEMS EN ESTE KIT
        - LINK DE COMPRA
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞	
        - INTRODUCCI√ìN DEL COMPONENTE	
        - CANTIDAD
        - LINK DE COMPRA

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_ws2812`
        - 1
        - |link_ws2812_buy|

**Esquema**

|sch_ws2812|

**Conexi√≥n**

|wiring_ws2812|

.. warning::
    Un aspecto a tener en cuenta es la corriente.

    Aunque se puede utilizar una tira LED con cualquier n√∫mero de LEDs en el Pico W, la potencia de su pin VBUS es limitada.
    Aqu√≠ utilizaremos ocho LEDs, lo cual es seguro.
    Pero si deseas usar m√°s LEDs, necesitar√°s una fuente de alimentaci√≥n separada.
    

**C√≥digo**

.. note::

    * Puedes abrir el archivo ``3.3_rgb_led_strip.ino`` en la ruta ``kepler-kit-main/arduino/3.3_rgb_led_strip``.
    * O copiar este c√≥digo en el **Arduino IDE**.
    * Luego selecciona la placa Raspberry Pi Pico y el puerto correcto antes de hacer clic en el bot√≥n **Upload**.
    * Aqu√≠ se utiliza la biblioteca ``Adafruit_NeoPixel``, que puedes instalar desde el **Library Manager**.

      .. image:: img/lib_neopixel.png

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/efe5d60f-ea0f-4446-bc5b-30c76197fedf/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


Seleccionemos algunos colores favoritos y mostremos en la tira de LED RGB.

**¬øC√≥mo funciona?**

Declara un objeto de tipo Adafruit_NeoPixel, conectado a ``PIXEL_PIN``, donde hay ``PIXEL_COUNT`` LEDs RGB en la tira.

.. code-block:: arduino

    #define PIXEL_PIN    0
    #define PIXEL_COUNT 8

    // Declaramos nuestro objeto NeoPixel para la tira:
    Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, NEO_GRB + NEO_KHZ800);
    // Argumento 1 = N√∫mero de p√≠xeles en la tira NeoPixel
    // Argumento 2 = N√∫mero de pin de Arduino (la mayor√≠a son v√°lidos)
    // Argumento 3 = Banderas de tipo de p√≠xel, agrega seg√∫n sea necesario:
    //   NEO_KHZ800  800 KHz bitstream (la mayor√≠a de productos NeoPixel con LEDs WS2812)
    //   NEO_KHZ400  400 KHz (pixeles cl√°sicos 'v1' (no v2) FLORA, controladores WS2811)
    //   NEO_GRB     Pixeles cableados para bitstream GRB (la mayor√≠a de productos NeoPixel)
    //   NEO_RGB     Pixeles cableados para bitstream RGB (pixeles v1 FLORA, no v2)
    //   NEO_RGBW    Pixeles cableados para bitstream RGBW (productos NeoPixel RGBW)

Inicializa el objeto strip y todos los p√≠xeles a 'apagado'.

Funciones
    * ``strip.begin()`` : Inicializa el objeto de la tira NeoPixel (OBLIGATORIO).
    * ``strip.setPixelColor(index, color)`` : Configura el color de un p√≠xel (en RAM), el ``color`` debe ser un valor √∫nico de 32 bits 'empaquetado'.
    * ``strip.Color(red, green, blue)`` : Color como un valor de 32 bits 'empaquetado'.
    * ``strip.show()`` : Actualiza la tira con el nuevo contenido.
  
**Aprende m√°s**

Podemos generar colores aleatorios y crear un efecto de luz fluida y colorida.

.. note::

    * Puedes abrir el archivo ``3.3_rgb_led_strip_flowing.ino`` en la ruta ``kepler-kit-main/arduino/3.3_rgb_led_strip_flowing``.
    * O copiar este c√≥digo en el **IDE de Arduino**.
    * No olvides seleccionar la placa Raspberry Pi Pico y el puerto correcto antes de hacer clic en el bot√≥n **Upload**.

    

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/a3d7c520-b4f8-4445-9454-5fe7d2a24fd9/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

O puedes hacer que esta tira de LED WS2812 realice un ciclo de arco√≠ris alrededor de la rueda de color (rango 65535).

.. note::

   * Puedes abrir el archivo ``3.3_rgb_led_strip_rainbow.ino`` en la ruta ``kepler-kit-main/arduino/3.3_rgb_led_strip_rainbow``.
   * O copiar este c√≥digo en el **IDE de Arduino**.
   * No olvides seleccionar la placa Raspberry Pi Pico y el puerto correcto antes de hacer clic en el bot√≥n **Upload**.

    

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/47d84804-3560-48fa-86df-49f8e2f6ad63/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>   

* ``strip.getPixelColor(index)`` : Consulta el color de un p√≠xel previamente configurado.
* ``strip.ColorHSV(pixelHue)`` : Convierte el tono, la saturaci√≥n y el valor en un color RGB de 32 bits empaquetado, que puede ser pasado a ``setPixelColor()`` u otras funciones compatibles con RGB.
* ``strip.gamma32()`` : Proporciona un color "m√°s verdadero" antes de asignarlo a cada p√≠xel.

