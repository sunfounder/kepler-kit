.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_button:

2.5 - Lecture de la Valeur d'un Bouton
==============================================

Le nom GPIO (Entr√©e/Sortie G√©n√©rale) sugg√®re que ces broches ont √† la fois des fonctions d'entr√©e et de sortie. 
Dans les le√ßons pr√©c√©dentes, nous avons utilis√© la fonction de sortie ; dans ce chapitre, nous allons utiliser la fonction d'entr√©e pour lire la valeur du bouton.

* :ref:`cpn_button`

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN D'ACHAT
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - INTRODUCTION DES COMPOSANTS	
        - QUANTIT√â
        - LIEN D'ACHAT

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 1 (10KŒ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_button`
        - 1
        - |link_button_buy|

**Sch√©ma**

|sch_button|

Un c√¥t√© de la broche du bouton est connect√© √† 3,3V et l'autre c√¥t√© est connect√© √† GP14. Ainsi, lorsque le bouton est appuy√©, GP14 sera en niveau haut. Cependant, lorsque le bouton n'est pas appuy√©, GP14 est en √©tat flottant et peut √™tre haut ou bas. Pour obtenir un niveau bas stable lorsque le bouton n'est pas appuy√©, GP14 doit √™tre reconnect√© √† la masse (GND) via une r√©sistance de tirage de 10K.

**C√¢blage**

|wiring_button|

.. note::
    Nous pouvons consid√©rer le bouton √† quatre broches comme un bouton en forme de H. Ses deux pieds gauche (droite) sont connect√©s, ce qui signifie que lorsqu'il traverse la ligne de s√©paration centrale, il connecte les deux demi-rang√©es du m√™me num√©ro de rang√©e ensemble. (Par exemple, dans mon circuit, E23 et F23 sont connect√©s, tout comme E25 et F25).

    Avant que le bouton ne soit press√©, les c√¥t√©s gauche et droit sont ind√©pendants l'un de l'autre, et le courant ne peut pas circuler d'un c√¥t√© √† l'autre.

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``2.5_reading_button_value.ino`` sous le chemin ``kepler-kit-main/arduino/2.5_reading_button_value``.
    * Ou copiez ce code dans l'**Arduino IDE**.
    * N'oubliez pas de s√©lectionner la carte (Raspberry Pi Pico) et le port correct avant de cliquer sur le bouton **Upload**.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/6fcb7cac-e866-4a2d-8162-8e0c6fd17660/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s l'ex√©cution du code, cliquez sur l'ic√¥ne de la loupe dans le coin sup√©rieur droit de l'IDE Arduino (Moniteur S√©rie).

.. image:: img/open_serial_monitor.png

Maintenant, lorsque vous appuyez sur le bouton, le Moniteur S√©rie affichera "Vous avez appuy√© sur le bouton !".


**Comment √ßa fonctionne ?**

Pour activer le Moniteur S√©rie, vous devez d√©marrer la communication s√©rie dans ``setup()`` et d√©finir le d√©bit de donn√©es √† 9600.

.. code-block:: arduino

    Serial.begin(115200);

    
* `Serial <https://www.arduino.cc/reference/en/language/functions/communication/serial/>`_

Pour le bouton, nous devons d√©finir leur mode sur ``INPUT`` pour pouvoir obtenir leurs valeurs.

.. code-block:: arduino

    pinMode(buttonPin, INPUT);

Lisez l'√©tat de ``buttonPin`` dans ``loop()`` et assignez-le √† la variable ``buttonState``.

.. code-block:: arduino

    buttonState = digitalRead(buttonPin);
    
* `digitalRead() <https://www.arduino.cc/reference/en/language/functions/digital-io/digitalread/>`_

Si ``buttonState`` est HAUT, la LED clignotera.
Affichez "Vous avez appuy√© sur le bouton !" sur le Moniteur S√©rie.

.. code-block:: arduino

    if (buttonState == HIGH) {
        Serial.println("You pressed the button!");
    }


**Mode de fonctionnement Pull-up**

Voici le c√¢blage et le code lorsque le bouton est en mode pull-up. Veuillez essayer.

|wiring_button_pullup|

.. 1. Connectez la broche 3V3 du Pico W au bus d'alimentation positif de la breadboard.
.. #. Ins√©rez le bouton dans la breadboard et faites-le traverser la ligne de s√©paration centrale.
.. #. Utilisez un fil pour connecter une des broches du bouton au bus **n√©gatif** (dans mon cas, la broche en haut √† droite).
.. #. Connectez l'autre broche (en haut √† gauche ou en bas √† gauche) √† GP14 avec un fil.
.. #. Utilisez une r√©sistance de 10K pour connecter la broche en haut √† gauche du bouton au bus **positif**.
.. #. Connectez le bus d'alimentation n√©gatif de la breadboard √† la masse (GND) du Pico.

La seule diff√©rence que vous verrez avec le mode pull-down est que la r√©sistance de 10K est connect√©e √† 3,3V et le bouton est connect√© √† la masse, de sorte que lorsque le bouton est press√©, GP14 recevra un niveau bas, ce qui est l'oppos√© de la valeur obtenue en mode pull-down.
Il suffit donc de changer ce code en ``if (buttonState == LOW)``.
