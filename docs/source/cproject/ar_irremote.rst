.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_irremote:

6.4 - T√©l√©commande IR
================================

Dans l'√©lectronique grand public, les t√©l√©commandes sont utilis√©es pour contr√¥ler des appareils tels que les t√©l√©viseurs et les lecteurs DVD.
Dans certains cas, elles permettent aux utilisateurs de manipuler des dispositifs hors de port√©e, comme les climatiseurs centraux.

Le r√©cepteur IR est un composant avec une photocellule r√©gl√©e pour recevoir la lumi√®re infrarouge. 
Il est presque toujours utilis√© pour la d√©tection des t√©l√©commandes - chaque t√©l√©viseur et lecteur DVD en poss√®de un √† l'avant pour recevoir le signal IR de la t√©l√©commande.
√Ä l'int√©rieur de la t√©l√©commande se trouve une LED IR correspondante, qui √©met des impulsions IR pour indiquer √† la t√©l√©vision de s'allumer, s'√©teindre ou changer de cha√Æne.

* :ref:`cpn_ir_receiver`

**Composants requis**

Dans ce projet, nous avons besoin des composants suivants. 

Il est plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN D'ACHAT
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - INTRODUCTION DES COMPOSANTS	
        - QUANTIT√â
        - LIEN D'ACHAT

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_ir_receiver`
        - 1
        - |link_receiver_buy|

**Sch√©ma**

|sch_irrecv|

**C√¢blage**

|wiring_irrecv|

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``6.4_ir_remote_control.ino`` sous le chemin ``kepler-kit-main/arduino/6.4_ir_remote_control``. 
    * Ou copiez ce code dans l'**Arduino IDE**.
    * Ensuite, s√©lectionnez la carte Raspberry Pi Pico et le port correct avant de cliquer sur le bouton **Upload**.
    * La biblioth√®que ``IRremote`` est utilis√©e ici, vous pouvez l'installer depuis le **Gestionnaire de biblioth√®ques**.

      .. image:: img/lib_ir.png

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/71f50561-d1ad-4d9e-9db2-8eb7727df0a4/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

La nouvelle t√©l√©commande poss√®de un morceau de plastique √† l'extr√©mit√© pour isoler la batterie √† l'int√©rieur. Vous devez retirer ce morceau de plastique pour alimenter la t√©l√©commande lors de son utilisation.
Une fois le programme en cours d'ex√©cution, lorsque vous appuyez sur la t√©l√©commande, le Moniteur S√©rie affichera la touche que vous avez press√©e.


**Comment √ßa fonctionne ?**

Ce code est con√ßu pour fonctionner avec une t√©l√©commande infrarouge (IR) en utilisant la biblioth√®que ``IRremote``. Voici le d√©tail :

#. Inclusion de la biblioth√®que et d√©finition des constantes. Tout d'abord, la biblioth√®que IRremote est incluse, et le num√©ro de broche pour le r√©cepteur IR est d√©fini sur 2.

   .. code-block:: cpp
 
     #include <IRremote.h>
     const int IR_RECEIVE_PIN = 17;

#. Initialise la communication s√©rie √† un d√©bit de 9600 bauds. Initialise le r√©cepteur IR sur la broche sp√©cifi√©e (``IR_RECEIVE_PIN``) et active le retour LED (si applicable).

   .. code-block:: arduino

       void setup() {
           Serial.begin(9600);                                     // D√©marrer la communication s√©rie √† 9600 bauds
           IrReceiver.begin(IR_RECEIVE_PIN, ENABLE_LED_FEEDBACK);  // D√©marrer le r√©cepteur IR
       }

#. La boucle s'ex√©cute en continu pour traiter les signaux entrants de la t√©l√©commande IR.

   .. code-block:: arduino

      void loop() {
         if (IrReceiver.decode()) {  // V√©rifier si le r√©cepteur IR a re√ßu un signal
            bool result = 0;
            String key = decodeKeyValue(IrReceiver.decodedIRData.command);
            if (key != "ERROR") {
              Serial.println(key);  // Imprimer la commande lisible
              delay(100);
            }
         IrReceiver.resume();  // Pr√©parer le r√©cepteur IR √† recevoir le prochain signal
        }
      }

   * V√©rifie si un signal IR est re√ßu et d√©cod√© avec succ√®s.
   * D√©code la commande IR et la stocke dans ``decodedValue`` en utilisant une fonction personnalis√©e ``decodeKeyValue()``.
   * Imprime la valeur d√©cod√©e IR sur le moniteur s√©rie.
   * Relance la r√©ception de signal IR pour le prochain signal.

   .. raw:: html

        <br/>

#. Fonction auxiliaire pour mapper les signaux IR re√ßus aux touches correspondantes

   .. image:: img/ir_key.png
      :align: center
      :width: 80%

   .. code-block:: arduino

      // Fonction pour mapper les signaux IR re√ßus aux touches correspondantes
      String decodeKeyValue(long result) {
        // Chaque case correspond √† une commande IR sp√©cifique
        switch (result) {
          case 0x16:
            return "0";
          case 0xC:
            return "1";
          case 0x18:
            return "2";
          case 0x5E:
            return "3";
          case 0x8:
            return "4";
          case 0x1C:
            return "5";
          case 0x5A:
            return "6";
          case 0x42:
            return "7";
          case 0x52:
            return "8";
          case 0x4A:
            return "9";
          case 0x9:
            return "+";
          case 0x15:
            return "-";
          case 0x7:
            return "EQ";
          case 0xD:
            return "U/SD";
          case 0x19:
            return "CYCLE";
          case 0x44:
            return "PLAY/PAUSE";
          case 0x43:
            return "FORWARD";
          case 0x40:
            return "BACKWARD";
          case 0x45:
            return "POWER";
          case 0x47:
            return "MUTE";
          case 0x46:
            return "MODE";
          case 0x0:
            return "ERROR";
          default:
            return "ERROR";
        }
      }



