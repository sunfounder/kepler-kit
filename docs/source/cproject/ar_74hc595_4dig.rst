.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_74hc_4dig:

5.3 - Compteur de temps
================================

Un affichage √† 4 chiffres de 7 segments est compos√© de quatre affichages 
de 7 segments fonctionnant ensemble.

L'affichage √† 4 chiffres de 7 segments fonctionne ind√©pendamment. Il utilise 
le principe de persistance de la vision humaine pour afficher rapidement les 
caract√®res de chaque segment en boucle, formant ainsi des cha√Ænes continues.

Par exemple, lorsque "1234" est affich√©, "1" appara√Æt sur le premier segment, 
et "234" n'est pas affich√©. Apr√®s un certain temps, le deuxi√®me segment affiche 
"2", tandis que les 1er, 3e et 4e segments restent √©teints, et ainsi de suite. 
Ce processus est tr√®s rapide (environ 5 ms), et gr√¢ce √† l'effet de r√©manence 
optique et au principe de persistance r√©tinienne, nous pouvons voir les quatre 
chiffres simultan√©ment.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est plus pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN D'ACHAT
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - INTRODUCTION DES COMPOSANTS
        - QUANTIT√â
        - LIEN D'ACHAT

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 4 (220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_4_dit_7_segment`
        - 1
        - 
    *   - 7
        - :ref:`cpn_74hc595`
        - 1
        - |link_74hc595_buy|

**Sch√©ma**

|sch_4dig|

Ici, le principe de c√¢blage est essentiellement le m√™me que pour :ref:`ar_74hc_led`, la seule diff√©rence est que Q0-Q7 sont connect√©s aux broches a~g de l'affichage √† 4 chiffres de 7 segments.

Ensuite, G10 ~ G13 s√©lectionneront quel segment de l'affichage de 7 segments doit fonctionner.

**C√¢blage**

|wiring_4dig|

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``5.3_time_counter.ino`` sous le chemin ``kepler-kit-main/arduino/5.3_time_counter``.
    * Ou copiez ce code dans l'**Arduino IDE**.
    * N'oubliez pas de s√©lectionner la carte (Raspberry Pi Pico) et le port correct avant de cliquer sur le bouton **Upload**.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/0e97386e-417e-4f53-a026-5f37e36deba4/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s l'ex√©cution du programme, vous verrez l'affichage √† 4 chiffres de 7 segments devenir un compteur qui augmente de 1 par seconde.

**Comment √ßa marche ?**

L'√©criture des signaux sur chaque segment de 7 est effectu√©e de la m√™me mani√®re que :ref:`ar_74hc_7seg`, en utilisant la fonction ``hc595_shift()``.
Le point central de l'affichage √† 4 chiffres de 7 segments est d'activer s√©lectivement chaque segment. Le code associ√© est le suivant.

.. code-block:: arduino

    const int placePin[4] = {13,12,11,10}; 

    void setup ()
    {
        for (int i = 0; i<4;i++){
            pinMode(placePin[i],OUTPUT);
        }
    }

    void loop()
    { 
        pickDigit(0);
        hc595_shift(count%10/1);
        
        pickDigit(1);
        hc595_shift(count%100/10);
        
        pickDigit(2);
        hc595_shift(count%1000/100);
        
        pickDigit(3);
        hc595_shift(count%10000/1000);
    }

    void pickDigit(int digit){
        for(int i = 0; i < 4; i++){
            digitalWrite(placePin[i],HIGH);
        }
        digitalWrite(placePin[digit],LOW);
    }

Ici, quatre broches (GP10, GP11, GP12, GP13) sont utilis√©es pour contr√¥ler individuellement chaque bit de l'affichage √† 4 chiffres de 7 segments.
Lorsque l'√©tat de ces broches est ``LOW``, l'affichage correspondant est actif ; lorsqu'il est ``HIGH``, l'affichage ne fonctionne pas.


La fonction ``pickDigit(digit)`` est utilis√©e pour d√©sactiver tous les affichages de 7 segments, puis activer un chiffre particulier individuellement.
Ensuite, ``hc595_shift()`` est utilis√© pour √©crire le code binaire correspondant pour le segment de 7.

L'affichage √† 4 chiffres de 7 segments doit √™tre activ√© en continu et √† tour de r√¥le pour afficher les quatre chiffres, ce qui signifie que le programme principal ne peut pas facilement ajouter du code qui affecterait le timing.

Cependant, nous devons ajouter une fonction de chronom√©trage √† cet exemple. Si nous ajoutons un ``delay (1000)``, nous serons en mesure de d√©tecter l'illusion des quatre affichages fonctionnant en m√™me temps, r√©v√©lant le fait qu'un seul segment est allum√© √† la fois.

Ensuite, utiliser la fonction ``millis()`` est une excellente m√©thode pour y parvenir.

.. code-block:: arduino

    void setup ()
    {
        timerStart = millis();
    }

    void loop()
    {
        unsigned int count = (millis()-timerStart)/1000;
    }

La fonction ``millis()`` r√©cup√®re le nombre de millisecondes √©coul√©es depuis le d√©marrage du programme en cours. Nous enregistrons la premi√®re valeur de temps en tant que ``timerStart`` ; 

puis lorsque nous devons obtenir √† nouveau l'heure, nous rappelons la fonction ``millis()`` et soustrayons ``timerStart`` de la valeur pour obtenir la dur√©e de fonctionnement du programme.

Enfin, nous convertissons cette valeur de temps et faisons en sorte que l'affichage √† 4 chiffres de 7 segments la montre.

* `millis() <https://www.arduino.cc/reference/en/language/functions/time/millis/>`_