.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_led:

2.1 - Bonjour, LED ! 
=======================================

Tout comme imprimer ‚ÄúHello, world!‚Äù est la premi√®re √©tape pour apprendre √† programmer, utiliser un programme pour contr√¥ler une LED est la traditionnelle introduction √† la programmation physique.

* :ref:`cpn_led`

**Composants requis**

Dans ce projet, nous avons besoin des composants suivants. 

Il est pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN D'ACHAT
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - INTRODUCTION DES COMPOSANTS	
        - QUANTIT√â
        - LIEN D'ACHAT

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 1(220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|

**Sch√©ma**

|sch_led|

Le principe de ce circuit est simple et la direction du courant est illustr√©e sur le sch√©ma. Lorsque GP15 √©met un signal de haut niveau (3,3 V), la LED s'allume apr√®s la r√©sistance de limitation de courant de 220 ohms. Lorsque GP15 √©met un signal de bas niveau (0 V), la LED s'√©teint.

**C√¢blage**

|wiring_led|

Suivons la direction du courant pour construire le circuit !

1. Ici, nous utilisons le signal √©lectrique de la broche GP15 de la carte Pico W pour faire fonctionner la LED, et le circuit commence ici.
#. Le courant doit passer par une r√©sistance de 220 ohms (utilis√©e pour prot√©ger la LED). Ins√©rez une extr√©mit√© (n'importe laquelle) de la r√©sistance dans la m√™me rang√©e que la broche GP15 de la Pico W (rang√©e 20 dans mon circuit), et ins√©rez l'autre extr√©mit√© dans une rang√©e libre de la breadboard (rang√©e 24 dans mon circuit).
#. Prenez la LED, vous verrez que l'une de ses pattes est plus longue que l'autre. Ins√©rez la patte la plus longue dans la m√™me rang√©e que l'extr√©mit√© de la r√©sistance, et connectez la patte la plus courte en traversant la fente centrale de la breadboard vers la m√™me rang√©e.
#. Ins√©rez un fil jumper m√¢le-√†-m√¢le (M2M) dans la m√™me rang√©e que la patte courte de la LED, puis connectez-le au bus d'alimentation n√©gatif de la breadboard.
#. Utilisez un jumper pour connecter le bus d'alimentation n√©gatif √† la broche GND de la Pico W.

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``2.1_hello_led.ino`` sous le chemin ``kepler-kit-main/arduino/2.1_hello_led``. 
    * Ou copiez ce code dans l'**Arduino IDE**.
    * N'oubliez pas de s√©lectionner la carte (Raspberry Pi Pico) et le port correct avant de cliquer sur le bouton **Upload**.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/898b8ba7-9bdf-468d-9181-ca8535e8dca6/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


Apr√®s l'ex√©cution du code, vous verrez la LED clignoter.


**Comment √ßa fonctionne ?**

Ici, nous connectons la LED √† la broche num√©rique 15, donc nous devons d√©clarer une variable int appel√©e ledPin au d√©but du programme et lui attribuer la valeur 15.

.. code-block:: C

    const int ledPin = 15;

Ensuite, initialisez la broche dans la fonction ``setup()``, o√π vous devez la configurer en mode ``OUTPUT``.

.. code-block:: C

    void setup() {
        pinMode(ledPin, OUTPUT);
    }

Dans ``loop()``, ``digitalWrite()`` est utilis√© pour fournir un signal de haut niveau de 3,3 V √† ledPin, ce qui provoquera une diff√©rence de tension entre les broches de la LED et l'allumera.

.. code-block:: C

    digitalWrite(ledPin, HIGH);

Si le signal est chang√© en bas niveau (LOW), le signal de ledPin sera ramen√© √† 0 V pour √©teindre la LED.

.. code-block:: C

    digitalWrite(ledPin, LOW);


Un intervalle entre l'allumage et l'extinction est n√©cessaire pour permettre aux gens de voir le changement, 
nous utilisons donc un code ``delay(1000)`` pour laisser le contr√¥leur ne rien faire pendant 1000 ms.

.. code-block:: C

    delay(1000);   
