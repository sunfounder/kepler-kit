.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino & ESP32 sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_servo:

3.7 - Faire Balancer le Servo
================================

Dans ce kit, en plus de la LED et du buzzer passif, il y a aussi un dispositif contr√¥l√© par un signal PWM, le servo.

Un servo est un dispositif de positionnement (angle) id√©al pour les syst√®mes de contr√¥le n√©cessitant des ajustements d'angle constants et pouvant √™tre maintenus. Il est largement utilis√© dans les jouets t√©l√©command√©s haut de gamme, comme les avions, les mod√®les de sous-marins, et les robots t√©l√©command√©s.

Maintenant, essayez de faire balancer le servo !

* :ref:`cpn_servo`

**Composants requis**

Dans ce projet, nous avons besoin des composants suivants. 

Il est pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN D'ACHAT
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - INTRODUCTION DES COMPOSANTS	
        - QUANTIT√â
        - LIEN D'ACHAT

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_servo`
        - 1
        - |link_servo_buy|

**Sch√©ma**

|sch_servo|

**C√¢blage**

|wiring_servo|

* Le fil orange est le signal et est connect√© √† GP15.
* Le fil rouge est le VCC et est connect√© √† VBUS (5V).
* Le fil marron est la masse (GND) et est connect√© √† GND.

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``3.7_swinging_servo.ino`` dans le chemin ``kepler-kit-main/arduino/3.7_swinging_servo``.
    * Ou copiez ce code dans **Arduino IDE**.
    * N'oubliez pas de s√©lectionner la carte (Raspberry Pi Pico) et le port correct avant de cliquer sur le bouton **Upload**.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/d52a67be-be6b-4cbf-b411-810160f56928/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Lorsque le programme est en cours d'ex√©cution, vous pourrez voir le bras du servo osciller d'avant en arri√®re de 0¬∞ √† 180¬∞.


**Comment √ßa marche ?**

En utilisant la biblioth√®que ``Servo.h``, vous pouvez facilement contr√¥ler le servo.

.. code-block:: arduino

    #include <Servo.h> 

**Fonctions de la biblioth√®que**

.. code-block:: arduino

    Servo

Cr√©er un objet **Servo** pour contr√¥ler un servo.

.. code-block:: arduino

    uint8_t attach(int pin); 

Attribue une broche pour piloter le servo. Appelle pinMode. Retourne 0 en cas d'√©chec.

.. code-block:: arduino

    void detach();

Lib√®re la broche du contr√¥le du servo.

.. code-block:: arduino

    void write(int value); 

D√©finit l'angle du servo en degr√©s, de 0 √† 180.

.. code-block:: arduino

    int read();

Retourne la derni√®re valeur d√©finie avec write().

.. code-block:: arduino

    bool attached(); 

Retourne 1 si le servo est actuellement connect√©.
