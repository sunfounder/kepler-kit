.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _ar_pot:

2.11 - Drehen Sie den Knopf
===========================

In vorherigen Projekten haben wir den digitalen Eingang am Pico W verwendet. 
Ein Taster kann beispielsweise den Pin von einem niedrigen (aus) auf einen hohen Pegel (ein) umschalten. Dies ist ein bin√§rer Arbeitszustand.

Der Pico W kann jedoch auch eine andere Art von Eingangssignal empfangen: den analogen Eingang. 
Dieser kann in einem beliebigen Zustand von vollst√§ndig geschlossen bis vollst√§ndig ge√∂ffnet sein und verf√ºgt √ºber eine Reihe m√∂glicher Werte.
Der analoge Eingang erm√∂glicht es dem Mikrocontroller, die Lichtintensit√§t, Schallintensit√§t, Temperatur, Feuchtigkeit usw. der physischen Welt zu erfassen.

Normalerweise ben√∂tigt ein Mikrocontroller eine zus√§tzliche Hardware, um den analogen Eingang umzusetzen - den Analog-Digital-Wandler (ADC).
Aber der Pico W hat bereits einen integrierten ADC, den wir direkt nutzen k√∂nnen.

|pin_adc|

Der Pico W hat drei GPIO-Pins, die analogen Eingang nutzen k√∂nnen: GP26, GP27, GP28, also die analogen Kan√§le 0, 1 und 2.
Zus√§tzlich gibt es einen vierten analogen Kanal, der mit dem eingebauten Temperatursensor verbunden ist und hier nicht vorgestellt wird.

In diesem Projekt versuchen wir, den Analogwert eines Potentiometers auszulesen.

* :ref:`cpn_potentiometer`

**Erforderliche Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist definitiv praktisch, ein ganzes Set zu kaufen. Hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ELEMENTE IN DIESEM KIT
        - KAUF-LINK
    *   - Kepler Kit	
        - 450+
        - |link_kepler_kit|

Die Teile k√∂nnen auch einzeln √ºber die folgenden Links gekauft werden.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - KOMPONENTENBESCHREIBUNG	
        - ANZAHL
        - KAUF-LINK

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Micro-USB-Kabel
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Mehrere
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 1(220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|
    *   - 7
        - :ref:`cpn_potentiometer`
        - 1
        - |link_potentiometer_buy|

**Schaltplan**

|sch_pot|

Das Potentiometer ist ein analoges Bauelement und kann in zwei verschiedene Richtungen gedreht werden.

Verbinden Sie den mittleren Pin des Potentiometers mit dem analogen Pin GP28. Der Raspberry Pi Pico W enth√§lt einen mehrkanaligen, 16-Bit-Analog-Digital-Wandler. Das bedeutet, dass er die Eingangsspannung zwischen 0 und der Betriebsspannung (3,3V) auf einen Ganzzahlwert zwischen 0 und 65535 abbildet, sodass der Wert von GP28 zwischen 0 und 65535 liegt.

Die Berechnungsformel lautet wie folgt:

    (Vp/3.3V) x 65535 = Ap

Programmieren Sie anschlie√üend den Wert von GP28 (Potentiometer) als PWM-Wert von GP15 (LED).
Auf diese Weise werden Sie feststellen, dass sich die Helligkeit der LED beim Drehen des Potentiometers gleichzeitig ver√§ndert.


**Verkabelung**

|wiring_pot|

**Code**

.. note::

   * Sie k√∂nnen die Datei ``2.11_turn_the_knob.ino`` im Pfad ``kepler-kit-main/arduino/2.11_turn_the_knob`` √∂ffnen.
   * Oder kopieren Sie diesen Code in die **Arduino IDE**.


    * Vergessen Sie nicht, die Platine (Raspberry Pi Pico) und den korrekten Anschluss auszuw√§hlen, bevor Sie auf die Schaltfl√§che **Hochladen** klicken.

Wenn das Programm l√§uft, k√∂nnen wir den aktuell von Pin GP28 gelesenen Analogwert im seriellen Monitor sehen.
Drehen Sie den Knopf, und der Wert wird sich von 0 bis 1023 √§ndern.
Gleichzeitig wird die Helligkeit der LED zunehmen, je h√∂her der Analogwert ist.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/b3e3927a-bd1a-4756-83f2-141d47f99b1c/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

**Wie funktioniert es?**

Um den seriellen Monitor zu aktivieren, m√ºssen Sie die serielle Kommunikation in ``setup()`` starten und die Datenrate auf 9600 einstellen.

.. code-block:: arduino
    :emphasize-lines: 3

    void setup() {
        pinMode(ledPin, OUTPUT);
        Serial.begin(9600);
    }

* `Serial <https://www.arduino.cc/reference/de/language/functions/communication/serial/>`_

In der Loop-Funktion wird der Wert des Potentiometers gelesen, dann wird dieser Wert von 0-1023 auf 0-255 abgebildet, und schlie√ülich wird der abgebildete Wert verwendet, um die Helligkeit der LED zu steuern.

.. code-block:: arduino

    void loop() {
        int sensorValue = analogRead(sensorPin);
        Serial.println(sensorValue);
        int brightness = map(sensorValue, 0, 1023, 0, 255);
        analogWrite(ledPin, brightness);
    }

* `analogRead() <https://www.arduino.cc/reference/de/language/functions/analog-io/analogread/>`_ wird verwendet, um den Wert des sensorPin (Potentiometer) zu lesen und ihn der Variable ``sensorValue`` zuzuweisen.

.. code-block:: arduino

    int sensorValue = analogRead(sensorPin);

* Der Wert von SensorValue wird im seriellen Monitor ausgegeben.

.. code-block:: arduino

    Serial.println(sensorValue);

* Hier wird die Funktion `map(value, fromLow, fromHigh, toLow, toHigh) <https://www.arduino.cc/reference/de/language/functions/analog-io/analogread/>`_ ben√∂tigt, da der gelesene Potentiometerwert im Bereich 0-1023 liegt und der Wert eines PWM-Pins im Bereich 0-255 liegt. Sie wird verwendet, um eine Zahl von einem Bereich in einen anderen umzumappen.

.. code-block:: arduino

    int brightness = map(sensorValue, 0, 1023, 0, 255);

* Nun k√∂nnen wir diesen Wert verwenden, um die Helligkeit der LED zu steuern.

.. code-block:: arduino

    analogWrite(ledPin, brightness);
