.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino & ESP32 sur Facebook ! Plongez au c≈ìur de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_pot:

2.11 - Tournez le bouton
===========================

Dans les projets pr√©c√©dents, nous avons utilis√© l'entr√©e num√©rique sur le Pico W.
Par exemple, un bouton peut changer la broche du niveau bas (√©teint) au niveau haut (allum√©). C'est un √©tat de fonctionnement binaire.

Cependant, le Pico W peut √©galement recevoir un autre type de signal d'entr√©e : l'entr√©e analogique.
Elle peut se situer dans n'importe quel √©tat, de compl√®tement ferm√© √† compl√®tement ouvert, avec une plage de valeurs possibles.
L'entr√©e analogique permet au microcontr√¥leur de percevoir l'intensit√© de la lumi√®re, du son, la temp√©rature, l'humidit√©, etc., du monde physique.

Habituellement, un microcontr√¥leur n√©cessite un mat√©riel suppl√©mentaire pour impl√©menter l'entr√©e analogique : le convertisseur analogique-num√©rique (ADC).
Mais le Pico W dispose lui-m√™me d'un ADC int√©gr√© que nous pouvons utiliser directement.

|pin_adc|

Le Pico W poss√®de trois broches GPIO capables de g√©rer des entr√©es analogiques : GP26, GP27, GP28. C'est-√†-dire, les canaux analogiques 0, 1 et 2.
De plus, il existe un quatri√®me canal analogique, connect√© au capteur de temp√©rature int√©gr√©, qui ne sera pas pr√©sent√© ici.

Dans ce projet, nous essayons de lire la valeur analogique du potentiom√®tre.

* :ref:`cpn_potentiometer`

**Composants requis**

Dans ce projet, nous avons besoin des composants suivants. 

Il est pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN D'ACHAT
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - INTRODUCTION DES COMPOSANTS	
        - QUANTIT√â
        - LIEN D'ACHAT

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 1 (220Œ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|
    *   - 7
        - :ref:`cpn_potentiometer`
        - 1
        - |link_potentiometer_buy|

**Sch√©ma**

|sch_pot|

Le potentiom√®tre est un dispositif analogique, et lorsque vous le tournez dans deux directions diff√©rentes.

Connectez la broche centrale du potentiom√®tre √† la broche analogique GP28. Le Raspberry Pi Pico W contient un convertisseur analogique-num√©rique multicanal de 16 bits. Cela signifie qu'il mappe la tension d'entr√©e entre 0 et la tension de fonctionnement (3,3V) √† une valeur enti√®re comprise entre 0 et 65535, donc la valeur de GP28 varie de 0 √† 65535.

La formule de calcul est la suivante :

    (Vp/3.3V) x 65535 = Ap

Ensuite, programmez la valeur de GP28 (potentiom√®tre) comme valeur PWM de GP15 (LED).
De cette mani√®re, vous remarquerez qu'en tournant le potentiom√®tre, la luminosit√© de la LED changera en m√™me temps.

**C√¢blage**

|wiring_pot|

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``2.11_turn_the_knob.ino`` sous le chemin ``kepler-kit-main/arduino/2.11_turn_the_knob``. 
    * Ou copiez ce code dans l'**Arduino IDE**.
    * N'oubliez pas de s√©lectionner la carte (Raspberry Pi Pico) et le port correct avant de cliquer sur le bouton Upload.

Lorsque le programme est en cours d'ex√©cution, nous pouvons voir la valeur analogique actuellement lue par la broche GP28 dans le moniteur s√©rie. 
Tournez le bouton, et la valeur variera de 0 √† 1023.
En m√™me temps, la luminosit√© de la LED augmentera au fur et √† mesure que la valeur analogique augmentera.

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/b3e3927a-bd1a-4756-83f2-141d47f99b1c/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>




**Comment √ßa marche ?**

Pour activer le moniteur s√©rie, vous devez d√©marrer la communication s√©rie dans ``setup()`` et d√©finir le d√©bit de donn√©es √† 9600.

.. code-block:: arduino
    :emphasize-lines: 3

    void setup() {
        pinMode(ledPin, OUTPUT);
        Serial.begin(9600);
    }

* `Serial <https://www.arduino.cc/reference/en/language/functions/communication/serial/>`_

Dans la fonction loop, la valeur du potentiom√®tre est lue, puis la valeur est mapp√©e de 0-1023 √† 0-255 et finalement la valeur apr√®s le mappage est utilis√©e pour contr√¥ler la luminosit√© de la LED.

.. code-block:: arduino

    void loop() {
        int sensorValue = analogRead(sensorPin);
        Serial.println(sensorValue);
        int brightness = map(sensorValue, 0, 1023, 0, 255);
        analogWrite(ledPin, brightness);
    }

* `analogRead() <https://www.arduino.cc/reference/en/language/functions/analog-io/analogread/>`_ est utilis√©e pour lire la valeur de la broche sensorPin (potentiom√®tre) et l'attribue √† la variable ``sensorValue``.

.. code-block:: arduino

    int sensorValue = analogRead(sensorPin);

* Imprimez la valeur de ``sensorValue`` dans le moniteur s√©rie.

.. code-block:: arduino

    Serial.println(sensorValue);

* Ici, la fonction `map(value, fromLow, fromHigh, toLow, toHigh) <https://www.arduino.cc/reference/en/language/functions/analog-io/analogread/>`_ est requise car la valeur du potentiom√®tre lue est comprise entre 0-1023 et la valeur d'une broche PWM est comprise entre 0-255. Elle est utilis√©e pour re-mapper un nombre d'une plage √† une autre.

.. code-block:: arduino

    int brightness = map(sensorValue, 0, 1023, 0, 255);

* Maintenant, nous pouvons utiliser cette valeur pour contr√¥ler la luminosit√© de la LED.

.. code-block:: arduino

    analogWrite(ledPin,brightness);