.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _ar_rfid:


6.5 - Funkfrequenz-Identifikation
==============================================

Funkfrequenz-Identifikation (RFID) bezeichnet Technologien, die drahtlose Kommunikation zwischen einem Objekt (oder Tag) und einem Abfrageger√§t (oder Leseger√§t) nutzen, um solche Objekte automatisch zu verfolgen und zu identifizieren. Die Reichweite der Tag-√úbertragung ist auf einige Meter vom Leseger√§t begrenzt. Eine direkte Sichtlinie zwischen dem Leseger√§t und dem Tag ist nicht zwingend erforderlich.

Die meisten Tags enthalten mindestens einen integrierten Schaltkreis (IC) und eine Antenne. 
Der Mikrochip speichert Informationen und ist f√ºr die Verwaltung der Funkfrequenzkommunikation (RF) mit dem Leseger√§t verantwortlich. Passive Tags verf√ºgen nicht √ºber eine unabh√§ngige Energiequelle und sind auf ein externes elektromagnetisches Signal angewiesen, das vom Leseger√§t bereitgestellt wird, um ihren Betrieb zu erm√∂glichen. 
Aktive Tags verf√ºgen √ºber eine eigenst√§ndige Energiequelle, etwa eine Batterie. 
Dadurch k√∂nnen sie erweiterte Verarbeitungs-, √úbertragungsf√§higkeiten und Reichweite haben.

* :ref:`cpn_mfrc522`

**Erforderliche Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist durchaus praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Bezeichnung
        - ARTIKEL IN DIESEM KIT
        - KAUF-LINK
    *   - Kepler-Kit	
        - 450+
        - |link_kepler_kit|

Sie k√∂nnen die einzelnen Komponenten auch separat √ºber die folgenden Links kaufen.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - KOMPONENTENBESCHREIBUNG
        - ANZAHL
        - KAUF-LINK

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Micro-USB-Kabel
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Mehrere
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_mfrc522`
        - 1
        - |link_rfid_buy|

**Schaltplan**

|sch_rfid|


**Verdrahtung**

|wiring_rfid|

**Code**

.. note::

   * Die Bibliothek ``MFRC522`` wird hier verwendet. Sie k√∂nnen sie √ºber den **Bibliotheksmanager** installieren.

      .. image:: img/lib_mfrc522.png

Die Hauptfunktion ist in zwei Teile unterteilt:

* ``6.5_rfid_write``, um Informationen auf die Karte (oder den Schl√ºssel) zu schreiben.

  .. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/b4f9156a-711a-442c-8271-329847e808dc/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

  Nach dem Ausf√ºhren kannst du im seriellen Monitor eine Nachricht eingeben, die mit ``#`` endet, und die Nachricht dann auf die Karte schreiben, indem du die Karte (oder den Schl√ºssel) in die N√§he des MFRC522-Moduls h√§ltst.

* ``6.5_rfid_read``, um die Informationen von der Karte (oder dem Schl√ºssel) zu lesen.

  .. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/df57b5cb-9162-4b4b-b28a-7f02363885c9/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

  Nach dem Ausf√ºhren kannst du die auf der Karte (oder dem Schl√ºssel) gespeicherte Nachricht lesen.

**Funktionsweise?**

.. code-block:: arduino

    #include <MFRC522.h>

    #define RST_PIN         0
    #define SS_PIN          5

    MFRC522 mfrc522(SS_PIN, RST_PIN);

Zun√§chst wird die Klasse ``MFRC522()`` instanziiert.

F√ºr eine einfachere Handhabung wird die ``MFRC522``-Bibliothek durch die folgenden Funktionen weiter abstrahiert.

* ``void simple_mfrc522_init()``: Startet die SPI-Kommunikation und initialisiert das MFRC522-Modul.
* ``void simple_mfrc522_get_card()``: H√§lt das Programm an, bis die Karte (oder der Schl√ºssel) erkannt wird, und gibt die UID der Karte sowie den PICC-Typ aus.
* ``void simple_mfrc522_write(String text)``: Schreibt einen Text auf die Karte (oder den Schl√ºssel).
* ``void simple_mfrc522_write(byte* buffer)``: Schreibt Informationen auf die Karte (oder den Schl√ºssel), die √ºblicherweise vom seriellen Port stammen.
* ``void simple_mfrc522_write(byte section, String text)``: Schreibt einen Text in einen bestimmten Sektor. Bei ``section`` auf 0 werden die Sektoren 1-2 beschrieben; bei ``section`` auf 1 die Sektoren 3-4.
* ``void simple_mfrc522_write(byte section, byte* buffer)``: Schreibt Informationen in einen bestimmten Sektor, die √ºblicherweise vom seriellen Port stammen. Bei ``section`` auf 0 werden die Sektoren 1-2 beschrieben; bei ``section`` auf 1 die Sektoren 3-4.
* ``String simple_mfrc522_read()``: Liest die Informationen auf der Karte (oder dem Schl√ºssel) und gibt einen String zur√ºck.
* ``String simple_mfrc522_read(byte section)``: Liest die Informationen in einem bestimmten Sektor und gibt einen String zur√ºck. Bei ``section`` auf 0 werden die Sektoren 1-2 beschrieben; bei ``section`` auf 1 die Sektoren 3-4.

Im Beispiel ``6.5_rfid_write.ino`` wird die Funktion ``Serial.readBytesUntil()`` verwendet, eine g√§ngige Methode f√ºr serielle Eingaben.

* `Serial.readBytesUntil <https://www.arduino.cc/reference/de/language/functions/communication/serial/readbytesuntil/>`_
