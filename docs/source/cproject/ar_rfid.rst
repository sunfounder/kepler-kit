.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Profundiza en Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Previsualizaciones exclusivas**: Obt√©n acceso anticipado a nuevos anuncios de productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de temporada.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.

.. _ar_rfid:

6.5 - Identificaci√≥n por Radiofrecuencia
==============================================

La Identificaci√≥n por Radiofrecuencia (RFID) se refiere a tecnolog√≠as que utilizan comunicaci√≥n inal√°mbrica entre un objeto (o etiqueta) y un dispositivo interrogador (o lector) para rastrear e identificar autom√°ticamente dichos objetos. El alcance de transmisi√≥n de la etiqueta est√° limitado a unos pocos metros desde el lector. No es necesario que haya una l√≠nea de visi√≥n clara entre el lector y la etiqueta.

La mayor√≠a de las etiquetas contienen al menos un circuito integrado (IC) y una antena. 
El microchip almacena informaci√≥n y es responsable de gestionar la comunicaci√≥n por radiofrecuencia (RF) con el lector. Las etiquetas pasivas no tienen una fuente de energ√≠a independiente y dependen de una se√±al electromagn√©tica externa, proporcionada por el lector, para activar su funcionamiento. 
Las etiquetas activas contienen una fuente de energ√≠a independiente, como una bater√≠a, lo que les proporciona mayor capacidad de procesamiento, transmisi√≥n y alcance.

* :ref:`cpn_mfrc522`

**Componentes Necesarios**

En este proyecto, necesitamos los siguientes componentes.

Es muy conveniente comprar un kit completo; aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - ELEMENTOS EN ESTE KIT
        - LINK DE COMPRA
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - INTRODUCCI√ìN DEL COMPONENTE
        - CANTIDAD
        - LINK DE COMPRA

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_mfrc522`
        - 1
        - |link_rfid_buy|

**Diagrama Esquem√°tico**

|sch_rfid|

**Conexi√≥n**

|wiring_rfid|

**C√≥digo**

.. note::

   * Se utiliza la biblioteca ``MFRC522`` aqu√≠; puedes instalarla desde el **Administrador de Bibliotecas**.

      .. image:: img/lib_mfrc522.png

La funci√≥n principal se divide en dos:

* ``6.5_rfid_write`` para escribir informaci√≥n en la tarjeta (o llave).

  .. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/b4f9156a-711a-442c-8271-329847e808dc/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

  Despu√©s de ejecutarlo, podr√°s ingresar un mensaje en el monitor serial, finalizando con ``#``, y luego escribir el mensaje en la tarjeta acerc√°ndola al m√≥dulo MFRC522.

* ``6.5_rfid_read`` para leer la informaci√≥n de la tarjeta (o llave).

  .. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/df57b5cb-9162-4b4b-b28a-7f02363885c9/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

  Despu√©s de ejecutarlo, podr√°s leer el mensaje almacenado en la tarjeta (o llave).

**¬øC√≥mo funciona?**

.. code-block:: arduino

    #include <MFRC522.h>

    #define RST_PIN         9
    #define SS_PIN          17

    MFRC522 mfrc522(SS_PIN, RST_PIN);

Primero, instancia la clase ``MFRC522()``.

Para facilitar su uso, la biblioteca ``MFRC522`` est√° encapsulada con las siguientes funciones.

* ``void simple_mfrc522_init()`` : Inicia la comunicaci√≥n SPI e inicializa el m√≥dulo mfrc522.
* ``void simple_mfrc522_get_card()`` : Suspende el programa hasta que se detecta la tarjeta (o llave), imprime el UID de la tarjeta y el tipo de PICC.
* ``void simple_mfrc522_write(String text)`` : Escribe una cadena de texto en la tarjeta (o llave).
* ``void simple_mfrc522_write(byte* buffer)`` : Escribe informaci√≥n en la tarjeta (o llave), generalmente proveniente del puerto serial.
* ``void simple_mfrc522_write(byte section, String text)`` : Escribe una cadena en un sector espec√≠fico. ``section`` se establece en 0 para escribir en los sectores 1-2; ``section`` se establece en 1 para escribir en los sectores 3-4.
* ``void simple_mfrc522_write(byte section, byte* buffer)`` : Escribe informaci√≥n en un sector espec√≠fico, generalmente desde el puerto serial. ``section`` establecido en 0, escribe en sectores 1-2; ``section`` establecido en 1, escribe en sectores 3-4.
* ``String simple_mfrc522_read()`` : Lee la informaci√≥n de la tarjeta (o llave) y devuelve una cadena.
* ``String simple_mfrc522_read(byte section)`` : Lee la informaci√≥n en un sector espec√≠fico y devuelve una cadena. ``section`` se establece en 0, lee sectores 1-2; ``section`` se establece en 1, lee sectores 3-4.

En el ejemplo ``6.5_rfid_write.ino``, se utiliza la funci√≥n ``Serial.readBytesUntil()``, que es un m√©todo com√∫n de entrada serial.

* `Serial.readBytesUntil <https://www.arduino.cc/reference/en/language/functions/communication/serial/readbytesuntil/>`_