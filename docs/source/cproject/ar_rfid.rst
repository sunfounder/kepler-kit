.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi, Arduino & ESP32 sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions sp√©ciales.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_rfid:

6.5 - Identification par Radiofr√©quence (RFID)
===========================================================

L'identification par radiofr√©quence (RFID) d√©signe les technologies qui utilisent la communication sans fil entre un objet (ou √©tiquette) et un dispositif d'interrogation (ou lecteur) pour suivre et identifier automatiquement ces objets. La port√©e de transmission de l'√©tiquette est limit√©e √† quelques m√®tres du lecteur. Une ligne de vue directe entre le lecteur et l'√©tiquette n'est pas forc√©ment requise.

La plupart des √©tiquettes contiennent au moins un circuit int√©gr√© (IC) et une antenne. 
La puce stocke des informations et g√®re la communication par radiofr√©quence (RF) avec le lecteur. Les √©tiquettes passives ne disposent pas de source d'√©nergie ind√©pendante et d√©pendent d'un signal √©lectromagn√©tique externe, fourni par le lecteur, pour alimenter leurs op√©rations. 
Les √©tiquettes actives, quant √† elles, contiennent une source d'√©nergie ind√©pendante, comme une batterie. Elles peuvent donc avoir une capacit√© accrue de traitement, de transmission et une port√©e plus √©tendue.

* :ref:`cpn_mfrc522`

**Composants requis**

Dans ce projet, nous avons besoin des composants suivants.

Il est pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN D'ACHAT
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - INTRODUCTION DES COMPOSANTS	
        - QUANTIT√â
        - LIEN D'ACHAT

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_mfrc522`
        - 1
        - |link_rfid_buy|

**Sch√©ma**

|sch_rfid|

**C√¢blage**

|wiring_rfid|

**Code**

.. note::

   * La biblioth√®que ``MFRC522`` est utilis√©e ici, vous pouvez l'installer depuis le **Library Manager**.

      .. image:: img/lib_mfrc522.png

La fonction principale est divis√©e en deux :

* ``6.5_rfid_write`` pour √©crire des informations sur la carte (ou la cl√©).

  .. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/b4f9156a-711a-442c-8271-329847e808dc/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

  Apr√®s ex√©cution, vous pourrez entrer un message dans le moniteur s√©rie, en terminant par ``#``, puis √©crire ce message sur la carte en la pla√ßant (ou la cl√©) pr√®s du module MFRC522.

* ``6.5_rfid_read`` pour lire les informations de la carte (ou de la cl√©).

  .. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/df57b5cb-9162-4b4b-b28a-7f02363885c9/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

  Apr√®s ex√©cution, vous pourrez lire le message stock√© sur la carte (ou la cl√©).

**Comment √ßa marche ?**

.. code-block:: arduino

    #include <MFRC522.h>

    #define RST_PIN         9
    #define SS_PIN          17

    MFRC522 mfrc522(SS_PIN, RST_PIN);

Tout d'abord, instanciez la classe ``MFRC522()``.

Pour simplifier l'utilisation, la biblioth√®que ``MFRC522`` est encapsul√©e avec les fonctions suivantes.

* ``void simple_mfrc522_init()`` : D√©marre la communication SPI et initialise le module mfrc522.
* ``void simple_mfrc522_get_card()`` : Suspend le programme jusqu'√† ce que la carte (ou la cl√©) soit d√©tect√©e, puis imprime l'UID de la carte et le type de PICC.
* ``void simple_mfrc522_write(String text)`` : √âcrit une cha√Æne de caract√®res sur la carte (ou la cl√©).
* ``void simple_mfrc522_write(byte* buffer)`` : √âcrit des informations sur la carte (ou la cl√©), g√©n√©ralement depuis le port s√©rie.
* ``void simple_mfrc522_write(byte section, String text)`` : √âcrit une cha√Æne sur un secteur sp√©cifique. ``section`` est r√©gl√© √† 0 pour √©crire sur les secteurs 1-2 ; ``section`` est r√©gl√© √† 1 pour √©crire sur les secteurs 3-4.
* ``void simple_mfrc522_write(byte section, byte* buffer)`` : √âcrit des informations sur un secteur sp√©cifique, g√©n√©ralement depuis le port s√©rie. ``section`` r√©gl√© √† 0, √©crit sur les secteurs 1-2 ; ``section`` r√©gl√© √† 1, √©crit sur les secteurs 3-4.
* ``String simple_mfrc522_read()`` : Lit les informations de la carte (ou cl√©), retourne une cha√Æne de caract√®res.
* ``String simple_mfrc522_read(byte section)`` : Lit les informations d'un secteur sp√©cifique, retourne une cha√Æne. ``section`` est r√©gl√© √† 0, lit les secteurs 1-2 ; ``section`` est r√©gl√© √† 1, lit les secteurs 3-4.

Dans l'exemple ``6.5_rfid_write.ino``, la fonction ``Serial.readBytesUntil()`` est utilis√©e, c'est une m√©thode courante d'entr√©e s√©rie.

* `Serial.readBytesUntil <https://www.arduino.cc/reference/en/language/functions/communication/serial/readbytesuntil/>`_