.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder des passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _per_button:

2.2 Bouton
===============

Dans ce projet, nous allons apprendre √† allumer ou √©teindre une LED en utilisant un bouton.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est tr√®s pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - COMPOSANTS DANS CE KIT
        - LIEN
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - N¬∞
        - COMPOSANT
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 2(220Œ©, 10KŒ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|
    *   - 7
        - :ref:`cpn_button`
        - 1
        - |link_button_buy|

**C√¢blage**

|button0|

* Un c√¥t√© de la patte du bouton est connect√© √† 3,3 V, et l'autre c√¥t√© est reli√© au GP14, donc lorsque le bouton est press√©, le GP14 sera en √©tat haut.
* Cependant, lorsque le bouton n'est pas press√©, le GP14 est en √©tat flottant et peut √™tre haut ou bas. Pour obtenir un niveau bas stable lorsque le bouton n'est pas press√©, le GP14 doit √™tre reli√© √† la masse (GND) via une r√©sistance de tirage de 10K.

**Code**

.. note::

    * Vous pouvez vous r√©f√©rer √† l'image ci-dessous pour √©crire le code en glissant-d√©posant.
    * Importez ``2.2_button.png`` depuis le chemin ``kepler-kit-main\piper``. Pour des tutoriels d√©taill√©s, veuillez consulter :ref:`import_code_piper`.

|2.2_button|

Apr√®s avoir connect√© le Pico W, cliquez sur le bouton **Start** et le code commencera √† s'ex√©cuter. Lorsque le bouton est press√©, la LED s'allume. Lorsque le bouton est rel√¢ch√©, la LED s'√©teint.

**Comment √ßa marche ?**

Lorsque le bouton est press√©, la broche 14 est en √©tat haut. Donc, si la lecture de la broche 14 est haute, la broche 15 s'active (la LED s'allume) ; sinon, la broche 15 s'√©teint (la LED s'√©teint).

* [if () do () else ()] : C'est un bloc de condition, qui ex√©cute les blocs √† l'int√©rieur de [do] si la condition apr√®s [if] est remplie, ou les blocs √† l'int√©rieur de [else] sinon.
* [is pin () HIGH] : Cela permet de lire le niveau d'une broche sp√©cifique. Si le niveau lu correspond au niveau d√©fini (HAUT/BAS), alors les blocs √† l'int√©rieur de [do] s'ex√©cutent, sinon ceux de [else].
