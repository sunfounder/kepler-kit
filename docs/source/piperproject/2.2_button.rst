.. note::

    Ciao, benvenuto nella Community di SunFounder Raspberry Pi & Arduino & ESP32 su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino e ESP32 insieme ad altri appassionati.

    **Perch√© unirti a noi?**

    - **Supporto Esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e Condividi**: Scambia suggerimenti e tutorial per migliorare le tue competenze.
    - **Anteprime Esclusive**: Accedi in anteprima agli annunci di nuovi prodotti e alle anteprime esclusive.
    - **Sconti Speciali**: Approfitta di sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni Festive e Giveaway**: Partecipa a giveaway e promozioni festive.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi stesso!

.. _per_button:

2.2 Pulsante
=================

In questo progetto, impareremo come accendere o spegnere il LED utilizzando un pulsante.

**Componenti Necessari**

In questo progetto, abbiamo bisogno dei seguenti componenti.

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome
        - ELEMENTI IN QUESTO KIT
        - LINK
    *   - Kepler Kit
        - 450+
        - |link_kepler_kit|

Puoi anche acquistarli separatamente dai link qui sotto.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPONENTE
        - QUANTIT√Ä
        - LINK

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cavo Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Diversi
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 2 (220Œ©, 10KŒ©)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|
    *   - 7
        - :ref:`cpn_button`
        - 1
        - |link_button_buy|

**Cablaggio**


|button0|


* Un lato del pin del pulsante √® collegato a 3.3V, mentre l'altro lato √® collegato a GP14. Quindi, quando il pulsante √® premuto, GP14 sar√† alto.
* Tuttavia, quando il pulsante non √® premuto, GP14 √® in uno stato sospeso e potrebbe essere alto o basso. Per ottenere un livello basso stabile quando il pulsante non √® premuto, GP14 deve essere ricollegato a GND tramite una resistenza di pull-down da 10K.


**Codice**

.. note::

    * Puoi fare riferimento all'immagine sottostante per scrivere il codice trascinando e rilasciando i blocchi.
    * Importa ``2.2_button.png`` dal percorso ``kepler-kit-main\piper``. Per tutorial dettagliati, fai riferimento a :ref:`import_code_piper`.


|2.2_button|

Dopo aver collegato il Pico W, fai clic sul pulsante **Start** e il codice inizier√† a funzionare. Quando il pulsante √® premuto, il LED si accender√†. Quando il pulsante viene rilasciato, il LED si spegner√†.


**Come Funziona?**

Quando il pulsante √® premuto, il pin14 √® alto. Quindi, se il pin14 letto √® alto, accendi il pin15 (il LED si accende); altrimenti, spegni il pin15 (il LED si spegne).

* [if () do () else ()]: Questo √® un blocco di giudizio, che dipende dalla condizione dopo il blocco [if] per determinare se eseguire i blocchi all'interno del blocco [do] o quelli all'interno del blocco [else].
* [is pin () HIGH]: Viene utilizzato per leggere il livello di un determinato pin; se il livello letto √® uguale al livello impostato HIGH/LOW, allora esegue i blocchi all'interno del blocco [do], altrimenti esegue i blocchi all'interno del blocco [else].

