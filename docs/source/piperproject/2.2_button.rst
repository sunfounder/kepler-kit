.. note::

    ¡Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Profundiza en el uso de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¿Por qué unirte?**

    - **Soporte de expertos**: Resuelve problemas posventa y desafíos técnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vista previa exclusiva**: Obtén acceso anticipado a anuncios y adelantos de nuevos productos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos más recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de temporada.

    👉 ¿Listo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y únete hoy mismo.

.. _per_button:

2.2 Botón
=================

En este proyecto, aprenderemos a encender y apagar el LED utilizando un botón.

**Componentes Necesarios**

Para este proyecto, necesitamos los siguientes componentes.

Un kit completo es conveniente, aquí tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre
        - COMPONENTES EN ESTE KIT
        - ENLACE
    *   - Kit Kepler
        - 450+
        - |link_kepler_kit|

También puedes comprarlos por separado en los enlaces a continuación.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPONENTE
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_resistor`
        - 2(220Ω, 10KΩ)
        - |link_resistor_buy|
    *   - 6
        - :ref:`cpn_led`
        - 1
        - |link_led_buy|
    *   - 7
        - :ref:`cpn_button`
        - 1
        - |link_button_buy|

**Conexión**

|button0|

* Un lado del pin del botón está conectado a 3.3v, y el otro pin está conectado a GP14, por lo que cuando se presiona el botón, GP14 estará en alto.
* Sin embargo, cuando el botón no se presiona, GP14 está en un estado suspendido y puede estar en alto o bajo. Para asegurar un nivel bajo estable cuando el botón no se presiona, es necesario conectar GP14 a GND a través de una resistencia pull-down de 10K.

**Código**

.. note::

    * Puedes referirte a la imagen a continuación para escribir el código arrastrando y soltando.
    * Importa ``2.2_button.png`` desde la ruta ``kepler-kit-main\piper``. Para obtener tutoriales detallados, consulta :ref:`import_code_piper`.

|2.2_button|

Después de conectar el Pico W, haz clic en el botón **Start** y el código comenzará a ejecutarse. Cuando se presione el botón, el LED se encenderá. Cuando se suelte el botón, el LED se apagará.

**¿Cómo Funciona?**

Cuando el botón se presiona, el pin 14 está en alto. Así que si el pin 14 está en alto, enciende el pin 15 (el LED se ilumina); de lo contrario, apaga el pin 15 (el LED se apaga).

* [if () do () else ()]: Este es un bloque de decisión, que ejecuta los bloques dentro de [do] si la condición después de [if] es verdadera, o los bloques dentro de [else] si es falsa.
* [is pin () HIGH]: Se utiliza para leer el nivel de un pin específico; si el nivel leído coincide con el valor HIGH/LOW establecido, se ejecutan los bloques dentro de [do]; de lo contrario, se ejecutan los bloques dentro de [else].

