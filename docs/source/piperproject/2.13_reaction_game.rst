.. note::

    ¡Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder para Raspberry Pi, Arduino y ESP32 en Facebook. Sumérgete en el mundo de Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¿Por qué unirse?**

    - **Soporte de expertos**: Resuelve problemas postventa y desafíos técnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Preestrenos exclusivos**: Obtén acceso anticipado a anuncios de nuevos productos y adelantos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos más recientes.
    - **Promociones y sorteos festivos**: Participa en sorteos y promociones de temporada.

    👉 ¿Listo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y únete hoy mismo.

.. _per_reaction_game:

2.13 Juego de Reacción
===========================


Aquí utilizamos varios botones, un zumbador y LEDs para crear un juego de reacción. Presiona el botón de árbitro para iniciar el juego; el zumbador comenzará a sonar para indicar que el juego está en marcha. Los dos jugadores deben presionar rápidamente sus respectivos botones, y cuando el árbitro vuelva a presionar su botón, el juego termina y el zumbador deja de sonar. En ese momento, consulta la CONSOLA en Piper Make para ver quién tiene la mejor velocidad de reacción.

**Componentes necesarios**

En este proyecto, necesitamos los siguientes componentes. 

Es muy conveniente adquirir un kit completo; aquí tienes el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - COMPONENTES EN ESTE KIT
        - ENLACE
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

También puedes comprarlos por separado en los enlaces a continuación.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPONENTE	
        - CANTIDAD
        - ENLACE

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - Cable Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Varios
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_transistor`
        - 1(S8050)
        - |link_transistor_buy|
    *   - 6
        - :ref:`cpn_resistor`
        - 6(2-220Ω, 1-1KΩ, 3-10KΩ)
        - |link_resistor_buy|
    *   - 7
        - Zumbador activo :ref:`cpn_buzzer`
        - 1
        - 
    *   - 8
        - :ref:`cpn_button`
        - 3
        - |link_button_buy|
    *   - 9
        - :ref:`cpn_led`
        - 2
        - |link_led_buy|


**Conexión**

|button_race0|


* Define 2 botones como jugador1 (GP14) y jugador2 (GP12), ambos con una resistencia pull-up. Cuando se presionan, GP14 y GP12 se ponen en bajo.
* Sus indicadores están conectados a GP15 y GP13, y se iluminan al recibir una señal alta.
* Define un botón de árbitro conectado a GP10; cuando se presiona, GP10 se pone en bajo.
* El zumbador activo está conectado a GP11; cuando GP11 emite una señal alta, el zumbador suena.

**Código**

.. note::

    * Puedes referirte a la imagen a continuación para escribir el código arrastrando y soltando. 
    * Importa ``2.13_reaction_game.png`` desde la ruta ``kepler-kit-main\piper``. Para obtener tutoriales detallados, consulta :ref:`import_code_piper`.

|button_race|

* Después de conectar el Pico W, haz clic en el botón **Start** y el código comenzará a ejecutarse.
* Presiona el botón de árbitro y el zumbador comenzará a sonar (continuamente), indicando el inicio del juego.
* En este momento, presiona los botones de **jugador** de manera rápida y separada, y los LEDs correspondientes se iluminarán.
* Cuando el botón de **árbitro** se presiona nuevamente, el zumbador se detiene, lo que significa que el juego ha terminado.
* Haz clic en CONSOLA en este punto para ver quién ha presionado más veces.

**¿Cómo funciona?**

|button_race1|

GP10 es el botón de árbitro; cuando no se presiona, está en alto y el juego aún no ha comenzado.
Cuando GP10 está en bajo (botón de árbitro presionado), el juego comienza; GP11 se pone en alto (zumbador), se crean variables y se establecen valores iniciales.

|button_race2|

Cuando la bandera es igual a 1 indicando el inicio del juego, se lee el valor de GP14 (jugador1); si el botón de jugador1 está presionado, el número de presiones se almacena en la variable [count1] y el indicador de GP15 se enciende.

|button_race3|

Lee el número de presiones de GP12 (jugador2) de la misma manera.

|button_race4|

Imprime el número de presiones para jugador1 y jugador2, respectivamente.

|button_race5|

Cuando el botón de árbitro se presiona nuevamente, el zumbador deja de funcionar y el juego termina.
