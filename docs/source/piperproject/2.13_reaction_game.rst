.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans le monde des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-achat et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Avant-premi√®res exclusives** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et promotions sp√©ciales durant les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _per_reaction_game:

2.13 Jeu de R√©action
===========================

Ici, nous utilisons plusieurs boutons, un buzzer et des LED pour cr√©er un jeu de r√©action. Appuyez sur le bouton de l'arbitre pour d√©marrer le jeu, le buzzer √©mettra un son continu pour indiquer que le jeu est en cours ; les deux joueurs doivent appuyer rapidement sur leurs boutons respectifs ; lorsque le bouton de l'arbitre est de nouveau press√©, le jeu se termine et le buzzer cesse de fonctionner. √Ä ce moment-l√†, regardez la CONSOLE sur Piper Make pour voir qui a r√©agi le plus rapidement.

**Composants N√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants.

Il est certainement plus pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit Kepler	
        - 450+
        - |link_kepler_kit|

Vous pouvez √©galement les acheter s√©par√©ment en suivant les liens ci-dessous.

.. list-table::
    :widths: 5 20 5 20
    :header-rows: 1

    *   - SN
        - COMPOSANT	
        - QUANTIT√â
        - LIEN

    *   - 1
        - :ref:`cpn_pico_w`
        - 1
        - |link_picow_buy|
    *   - 2
        - C√¢ble Micro USB
        - 1
        - 
    *   - 3
        - :ref:`cpn_breadboard`
        - 1
        - |link_breadboard_buy|
    *   - 4
        - :ref:`cpn_wire`
        - Plusieurs
        - |link_wires_buy|
    *   - 5
        - :ref:`cpn_transistor`
        - 1 (S8050)
        - |link_transistor_buy|
    *   - 6
        - :ref:`cpn_resistor`
        - 6 (2-220Œ©, 1-1KŒ©, 3-10KŒ©)
        - |link_resistor_buy|
    *   - 7
        - Buzzer Actif :ref:`cpn_buzzer`
        - 1
        - 
    *   - 8
        - :ref:`cpn_button`
        - 3
        - |link_button_buy|
    *   - 9
        - :ref:`cpn_led`
        - 2
        - |link_led_buy|

**C√¢blage**

|button_race0|

* D√©finir 2 boutons comme joueur1 (GP14) et joueur2 (GP12), tous deux √©quip√©s d'une r√©sistance pull-up. Lorsque les boutons sont press√©s, GP14 et GP12 passent √† un √©tat bas.
* Leurs indicateurs sont connect√©s √† GP15 et GP13, et envoient un signal haut pour les allumer.
* D√©finir un bouton arbitre connect√© √† GP10, lorsque ce bouton est press√©, GP10 devient bas.
* Le buzzer actif est connect√© √† GP11, lorsque GP11 est haut, le buzzer √©met un son.

**Code**

.. note::

    * Vous pouvez vous r√©f√©rer √† l'image ci-dessous pour √©crire du code en utilisant le glisser-d√©poser. 
    * Importez ``2.13_reaction_game.png`` depuis le chemin ``kepler-kit-main\piper``. Pour des tutoriels d√©taill√©s, veuillez consulter :ref:`import_code_piper`.

|button_race|

* Apr√®s avoir connect√© le Pico W, cliquez sur le bouton **D√©marrer** pour lancer le code.
* Appuyez sur le bouton arbitre, et le buzzer commence √† √©mettre un son continu, signalant le d√©but du jeu.
* √Ä ce stade, appuyez rapidement sur les boutons **joueur**, et les LED correspondantes s'allumeront.
* Lorsque le bouton **arbitre** est de nouveau press√©, le buzzer s'arr√™te, indiquant la fin du jeu.
* Cliquez sur CONSOLE pour voir qui a appuy√© le plus rapidement.

**Comment √ßa fonctionne ?**

|button_race1|

GP10 est le bouton de l'arbitre ; lorsque le bouton n'est pas press√©, il est haut et le jeu n'a pas encore commenc√©. 
Lorsque GP10 devient bas (bouton arbitre press√©), le jeu commence ; GP11 est mis en √©tat haut (buzzer activ√©), des variables sont cr√©√©es et des valeurs initiales sont d√©finies.

|button_race2|

Quand le drapeau est √©gal √† 1 pour le d√©but du jeu, lisez la valeur de GP14 (joueur1) ; si le bouton joueur1 est press√©, stockez le nombre de pressions dans la variable [count1], et faites s'allumer l'indicateur de GP15.

|button_race3|

Lisez le nombre de pressions de GP12 (joueur2) de la m√™me mani√®re.

|button_race4|

Affichez le nombre de pressions pour joueur1 et joueur2 respectivement.

|button_race5|

Lorsque le bouton arbitre est press√© √† nouveau, le buzzer cesse de fonctionner et le jeu se termine.
