.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour d√©velopper vos comp√©tences.
    - **Avant-premi√®res exclusives** : Profitez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux aper√ßus en avant-premi√®re.
    - **Remises sp√©ciales** : B√©n√©ficiez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions et cadeaux festifs** : Participez √† des promotions sp√©ciales et √† des tirages au sort pour les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _cpn_i2c_lcd:

I2C LCD1602
==================

|i2c_lcd1602|

* **GND** : Masse
* **VCC** : Alimentation, 5V
* **SDA** : Ligne de donn√©es s√©rie. Connecter √† VCC via une r√©sistance de pull-up.
* **SCL** : Ligne d'horloge s√©rie. Connecter √† VCC via une r√©sistance de pull-up.

Comme nous le savons tous, bien que les √©crans LCD et d'autres affichages enrichissent consid√©rablement l'interaction homme-machine, ils partagent une faiblesse commune. Lorsqu'ils sont connect√©s √† un contr√¥leur, plusieurs E/S sont occup√©es, ce qui limite les autres fonctions du contr√¥leur, surtout si celui-ci ne dispose pas de nombreux ports externes.

C'est pourquoi le LCD1602 avec un module I2C a √©t√© d√©velopp√© pour r√©soudre ce probl√®me. Le module I2C int√®gre une puce PCF8574 qui convertit les donn√©es s√©rie I2C en donn√©es parall√®les pour l'affichage sur le LCD.

* `PCF8574 Datasheet <https://www.ti.com/lit/ds/symlink/pcf8574.pdf?ts=1627006546204&ref_url=https%253A%252F%252Fwww.google.com%252F>`_

**Adresse I2C**

L'adresse par d√©faut est g√©n√©ralement 0x27, mais dans certains cas, elle peut √™tre 0x3F.

En prenant l'adresse par d√©faut 0x27 comme exemple, l'adresse du p√©riph√©rique peut √™tre modifi√©e en reliant les points A0/A1/A2 ; √† l'√©tat par d√©faut, A0/A1/A2 est √† 1, et si le point de connexion est reli√©, A0/A1/A2 passe √† 0.

|i2c_address|

**R√©tro√©clairage/Contraste**

Le r√©tro√©clairage peut √™tre activ√© via un cavalier ; retirez le cavalier pour d√©sactiver le r√©tro√©clairage. Le potentiom√®tre bleu au dos sert √† ajuster le contraste (le rapport de luminosit√© entre le blanc le plus lumineux et le noir le plus fonc√©).

|back_lcd1602|

* **Cavalier** : Le r√©tro√©clairage peut √™tre activ√© avec ce cavalier, retirez-le pour d√©sactiver le r√©tro√©clairage.
* **Potentiom√®tre** : Il permet de r√©gler le contraste (la clart√© du texte affich√©), qui augmente dans le sens horaire et diminue dans le sens antihoraire.

**Exemple**

* :ref:`py_lcd` (pour les utilisateurs de MicroPython)
* :ref:`py_room_temp` (pour les utilisateurs de MicroPython)
* :ref:`py_guess_number` (pour les utilisateurs de MicroPython)
* :ref:`ar_lcd` (pour les utilisateurs d'Arduino)
