.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _cpn_74hc595:

74HC595
===========

|img_74hc595|

Der 74HC595 besteht aus einem 8-Bit-Schieberegister und einem Speicherregister mit dreizust√§ndigen parallelen Ausg√§ngen. Er wandelt serielle Eingaben in parallele Ausgaben um, sodass IO-Ports eines MCU gespart werden k√∂nnen.

* Bei hohem Pegel an MR (Pin10) und niedrigem Pegel an OE (Pin13) wird die Daten am steigenden Flanken von SHcp eingelesen und durchlaufen das Speicherregister √ºber die steigende Flanke von SHcp.
* Wenn die beiden Taktgeber miteinander verbunden sind, liegt das Schieberegister immer einen Taktimpuls vor dem Speicherregister.
* Im Speicherregister gibt es einen seriellen Schiebeeingangspin (Ds), einen seriellen Ausgangspin (Q) und eine asynchrone Reset-Taste (niedriger Pegel).
* Das Speicherregister gibt einen Bus mit parallelem 8-Bit und in drei Zust√§nden aus.
* Ist OE aktiviert (niedriger Pegel), werden die Daten im Speicherregister zum Bus (Q0 ~ Q7) ausgegeben.

* `74HC595 Datenblatt <https://www.ti.com/lit/ds/symlink/cd74hc595.pdf?ts=1617341564801>`_

|img_74jc595_pin|

Pins des 74HC595 und ihre Funktionen:

* **Q0-Q7**: 8-Bit-parallele Daten-Ausgangspins, direkt f√ºr die Steuerung von 8 LEDs oder 8 Pins einer 7-Segment-Anzeige geeignet.
* **Q7'**: Serieller Ausgangspin, verbunden mit DS eines weiteren 74HC595 zur seriellen Verkn√ºpfung mehrerer 74HC595.
* **MR**: Reset-Pin, aktiv bei niedrigem Pegel.
* **SHcp**: Zeitsequenz-Eingang des Schieberegisters. An der steigenden Flanke r√ºckt die Daten im Schieberegister jeweils um ein Bit vor, d.h. Daten in Q1 bewegen sich zu Q2 usw. An der fallenden Flanke bleiben die Daten unver√§ndert.
* **STcp**: Zeitsequenz-Eingang des Speicherregisters. An der steigenden Flanke wandern die Daten aus dem Schieberegister ins Speicherregister.
* **OE**: Enable-Pin f√ºr den Ausgang, aktiv bei niedrigem Pegel.
* **DS**: Serieller Dateneingangspin.
* **VCC**: Positive Versorgungsspannung.
* **GND**: Masse.

.. Beispiel
.. -------------------

.. :ref:`Microchip - :ref:`cpn_74hc595``

**Beispiel**

* :ref:`py_74hc_led` (F√ºr MicroPython-Anwender)
* :ref:`py_74hc_7seg` (F√ºr MicroPython-Anwender)
* :ref:`py_74hc_4dig` (F√ºr MicroPython-Anwender)
* :ref:`py_74hc_788bs` (F√ºr MicroPython-Anwender)
* :ref:`py_passage_counter` (F√ºr MicroPython-Anwender)
* :ref:`py_10_second` (F√ºr MicroPython-Anwender)
* :ref:`py_traffic_light` (F√ºr MicroPython-Anwender)
* :ref:`py_bubble_level` (F√ºr MicroPython-Anwender)
* :ref:`ar_74hc_led` (F√ºr Arduino-Anwender)
* :ref:`ar_74hc_7seg` (F√ºr Arduino-Anwender)
* :ref:`ar_74hc_4dig` (F√ºr Arduino-Anwender)
* :ref:`ar_74hc_788bs` (F√ºr Arduino-Anwender)
